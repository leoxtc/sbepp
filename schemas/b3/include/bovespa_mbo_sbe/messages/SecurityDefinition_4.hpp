// SPDX-License-Identifier: MIT
// Copyright (c) 2023, Oleksandr Koval

// This file was generated by sbeppc 1.3.0
#pragma once

#include <sbepp/sbepp.hpp>

SBEPP_WARNINGS_OFF();

#include "../schema/schema.hpp"
#include "../types/messageHeader.hpp"
#include "../types/TextEncoding.hpp"
#include "../types/MultiLegPriceMethod.hpp"
#include "../types/UInt64NULL.hpp"
#include "../types/Symbol.hpp"
#include "../types/UTCTimestampSeconds.hpp"
#include "../types/Asset.hpp"
#include "../types/SecurityGroup.hpp"
#include "../types/Percentage9.hpp"
#include "../types/MessageType.hpp"
#include "../types/Fixed8.hpp"
#include "../types/GovernanceIndicator.hpp"
#include "../types/UInt32.hpp"
#include "../types/Side.hpp"
#include "../types/LocalMktDate32.hpp"
#include "../types/RatioQty.hpp"
#include "../types/ClearingHouseID.hpp"
#include "../types/GroupSizeEncoding.hpp"
#include "../types/ExerciseStyle.hpp"
#include "../types/ApplVerID.hpp"
#include "../types/InstrAttribValue.hpp"
#include "../types/LotType.hpp"
#include "../types/InstrAttribType.hpp"
#include "../types/PriceType.hpp"
#include "../types/PriceOptional.hpp"
#include "../types/SecurityIDSource.hpp"
#include "../types/SecurityID.hpp"
#include "../types/SecurityMatchType.hpp"
#include "../types/SecurityUpdateAction.hpp"
#include "../types/SecurityStrategyType.hpp"
#include "../types/QuantityOptional.hpp"
#include "../types/SecurityExchange.hpp"
#include "../types/UInt32NULL.hpp"
#include "../types/SecurityExchangeBVMF.hpp"
#include "../types/CountryCode.hpp"
#include "../types/LocalMktDate32Optional.hpp"
#include "../types/CFICode.hpp"
#include "../types/ISINNumber.hpp"
#include "../types/SettlType.hpp"
#include "../types/UInt16.hpp"
#include "../types/MaturityMonthYear.hpp"
#include "../types/UInt8.hpp"
#include "../types/Currency.hpp"
#include "../types/Boolean.hpp"
#include "../types/Product.hpp"
#include "../types/SecurityType.hpp"
#include "../types/PutOrCall.hpp"
#include "../types/MarketSegmentID.hpp"
#include "../types/MultiLegModel.hpp"


namespace bovespa_mbo_sbe
{
namespace detail
{
namespace messages
{





template<typename Byte>
class entry_1 : public ::sbepp::detail::entry_base<Byte, ::std::uint16_t>
{
public:
    using ::sbepp::detail::entry_base<Byte, ::std::uint16_t>::entry_base;
    using ::sbepp::detail::entry_base<Byte, ::std::uint16_t>::operator();

    
        SBEPP_CPP20_CONSTEXPR ::bovespa_mbo_sbe::types::SecurityID underlyingSecurityID() const noexcept
    {
        return ::sbepp::detail::get_value<
            ::bovespa_mbo_sbe::types::SecurityID, ::bovespa_mbo_sbe::types::SecurityID::value_type, ::sbepp::endian::little>(*this, 0);
    }

    template<
        typename T = void,
        typename = ::sbepp::detail::enable_if_writable_t<Byte, T>>
    SBEPP_CPP20_CONSTEXPR void underlyingSecurityID(::bovespa_mbo_sbe::types::SecurityID v) const noexcept
    {
        ::sbepp::detail::set_value<::sbepp::endian::little>(*this, 0, v.value());
    }
    static constexpr ::bovespa_mbo_sbe::types::SecurityIDSource underlyingSecurityIDSource() noexcept
    {
        return ::bovespa_mbo_sbe::types::SecurityIDSource{::bovespa_mbo_sbe::detail::types::enum_1::EXCHANGE_SYMBOL};
    }
    static constexpr ::bovespa_mbo_sbe::types::SecurityExchangeBVMF underlyingSecurityExchange() noexcept
    {
        return ::bovespa_mbo_sbe::types::SecurityExchangeBVMF{"BVMF", 4};
    }
    constexpr ::bovespa_mbo_sbe::types::Percentage9<Byte> indexPct() const noexcept
    {
        return ::sbepp::detail::get_static_field_view<::bovespa_mbo_sbe::types::Percentage9<Byte>>(
            *this, 8);
    }
    constexpr ::bovespa_mbo_sbe::types::Fixed8<Byte> indexTheoreticalQty() const noexcept
    {
        return ::sbepp::detail::get_static_field_view<::bovespa_mbo_sbe::types::Fixed8<Byte>>(
            *this, 16);
    }
    constexpr ::bovespa_mbo_sbe::types::Symbol<Byte> underlyingSymbol() const noexcept
    {
        return ::sbepp::detail::get_static_field_view<::bovespa_mbo_sbe::types::Symbol<Byte>>(
            *this, 24);
    }

    template<
        typename Cursor,
        typename = ::sbepp::detail::enable_if_cursor_compatible_t<
            Byte, ::sbepp::detail::cursor_byte_type_t<Cursor>>>
    SBEPP_CPP20_CONSTEXPR auto
        underlyingSecurityID(Cursor&& c) const noexcept
            -> ::sbepp::detail::cursor_result_type_t<Cursor, ::bovespa_mbo_sbe::types::SecurityID>
    {
        return c.template get_value<::bovespa_mbo_sbe::types::SecurityID, ::std::uint64_t, ::sbepp::endian::little>(
            *this, 0, 0);
    }

    template<
        typename Cursor,
        typename = ::sbepp::detail::enable_if_cursor_writeable_t<
            Byte, ::sbepp::detail::cursor_byte_type_t<Cursor>>>
    SBEPP_CPP20_CONSTEXPR void underlyingSecurityID(
        ::bovespa_mbo_sbe::types::SecurityID v, Cursor&& c) const noexcept
    {
        return c.template set_value<::sbepp::endian::little>(
            *this, 0, 0, v.value());
    }

    template<
        typename Cursor,
        typename = ::sbepp::detail::enable_if_cursor_compatible_t<
            Byte, ::sbepp::detail::cursor_byte_type_t<Cursor>>>
    SBEPP_CPP20_CONSTEXPR auto indexPct(Cursor&& c) const noexcept
        -> ::sbepp::detail::cursor_result_type_t<Cursor, 
            ::bovespa_mbo_sbe::types::Percentage9<::sbepp::detail::cursor_byte_type_t<Cursor>>>
    {
        return c.template get_static_field_view<::bovespa_mbo_sbe::types::Percentage9<::sbepp::detail::cursor_byte_type_t<Cursor>>>(
            *this, 0, 8);
    }

    template<
        typename Cursor,
        typename = ::sbepp::detail::enable_if_cursor_compatible_t<
            Byte, ::sbepp::detail::cursor_byte_type_t<Cursor>>>
    SBEPP_CPP20_CONSTEXPR auto indexTheoreticalQty(Cursor&& c) const noexcept
        -> ::sbepp::detail::cursor_result_type_t<Cursor, 
            ::bovespa_mbo_sbe::types::Fixed8<::sbepp::detail::cursor_byte_type_t<Cursor>>>
    {
        return c.template get_static_field_view<::bovespa_mbo_sbe::types::Fixed8<::sbepp::detail::cursor_byte_type_t<Cursor>>>(
            *this, 0, 16);
    }

    template<
        typename Cursor,
        typename = ::sbepp::detail::enable_if_cursor_compatible_t<
            Byte, ::sbepp::detail::cursor_byte_type_t<Cursor>>>
    SBEPP_CPP20_CONSTEXPR auto underlyingSymbol(Cursor&& c) const noexcept
        -> ::sbepp::detail::cursor_result_type_t<Cursor,
            ::bovespa_mbo_sbe::types::Symbol<::sbepp::detail::cursor_byte_type_t<Cursor>>>
    {
        return c.template get_last_static_field_view<::bovespa_mbo_sbe::types::Symbol<::sbepp::detail::cursor_byte_type_t<Cursor>>>(
            *this, 0, 24);
    }

    
    SBEPP_CPP20_CONSTEXPR std::size_t operator()(
        ::sbepp::detail::size_bytes_tag) const noexcept
    {
        return 0 + (*this)(::sbepp::detail::get_block_length_tag{});
    }


    template<typename Visitor, typename Cursor>
    constexpr bool operator()(
        ::sbepp::detail::visit_tag, Visitor& v, Cursor& c) const
    {
        return v.template on_entry(*this, c);
    }

    
    template<typename Visitor, typename Cursor>
    constexpr bool operator()(
        ::sbepp::detail::visit_children_tag, Visitor& v, Cursor& c) const
    {
        return v.template on_field(this->underlyingSecurityID(c), ::bovespa_mbo_sbe::schema::messages::SecurityDefinition_4::noUnderlyings::underlyingSecurityID{})
||v.template on_field(this->indexPct(c), ::bovespa_mbo_sbe::schema::messages::SecurityDefinition_4::noUnderlyings::indexPct{})
||v.template on_field(this->indexTheoreticalQty(c), ::bovespa_mbo_sbe::schema::messages::SecurityDefinition_4::noUnderlyings::indexTheoreticalQty{})
||v.template on_field(this->underlyingSymbol(c), ::bovespa_mbo_sbe::schema::messages::SecurityDefinition_4::noUnderlyings::underlyingSymbol{});
    }

};


template<typename Byte>
class group_1 : public ::sbepp::detail::flat_group_base<
                  Byte,
                  ::bovespa_mbo_sbe::detail::messages::entry_1<Byte>,
                  ::bovespa_mbo_sbe::types::GroupSizeEncoding<Byte>>
{
public:
        using ::sbepp::detail::flat_group_base<
                Byte,
                ::bovespa_mbo_sbe::detail::messages::entry_1<Byte>,
                ::bovespa_mbo_sbe::types::GroupSizeEncoding<Byte>>::flat_group_base;
        using ::sbepp::detail::flat_group_base<
                Byte,
                ::bovespa_mbo_sbe::detail::messages::entry_1<Byte>,
                ::bovespa_mbo_sbe::types::GroupSizeEncoding<Byte>>::operator();
    
    // this is implementation detail, don't use it directly
    template<
        typename T = void,
        typename = ::sbepp::detail::enable_if_writable_t<Byte, T>>
    SBEPP_CPP14_CONSTEXPR ::bovespa_mbo_sbe::types::GroupSizeEncoding<Byte>
        operator()(
            ::sbepp::detail::fill_group_header_tag,
            ::bovespa_mbo_sbe::detail::types::type_88 num_in_group) const noexcept
    {
        auto header = operator()(::sbepp::detail::get_header_tag{});
        header.blockLength({44});
        header.numInGroup(num_in_group);
        
        
        return header;
    }


    template<typename Visitor, typename Cursor>
    constexpr bool operator()(
        ::sbepp::detail::visit_tag, Visitor& v, Cursor& c) const
    {
        return v.template on_group(*this, c, "noUnderlyings");
    }
};




template<typename Byte>
class entry_2 : public ::sbepp::detail::entry_base<Byte, ::std::uint16_t>
{
public:
    using ::sbepp::detail::entry_base<Byte, ::std::uint16_t>::entry_base;
    using ::sbepp::detail::entry_base<Byte, ::std::uint16_t>::operator();

    
        SBEPP_CPP20_CONSTEXPR ::bovespa_mbo_sbe::types::SecurityID legSecurityID() const noexcept
    {
        return ::sbepp::detail::get_value<
            ::bovespa_mbo_sbe::types::SecurityID, ::bovespa_mbo_sbe::types::SecurityID::value_type, ::sbepp::endian::little>(*this, 0);
    }

    template<
        typename T = void,
        typename = ::sbepp::detail::enable_if_writable_t<Byte, T>>
    SBEPP_CPP20_CONSTEXPR void legSecurityID(::bovespa_mbo_sbe::types::SecurityID v) const noexcept
    {
        ::sbepp::detail::set_value<::sbepp::endian::little>(*this, 0, v.value());
    }
    static constexpr ::bovespa_mbo_sbe::types::SecurityIDSource legSecurityIDSource() noexcept
    {
        return ::bovespa_mbo_sbe::types::SecurityIDSource{::bovespa_mbo_sbe::detail::types::enum_1::EXCHANGE_SYMBOL};
    }
    static constexpr ::bovespa_mbo_sbe::types::SecurityExchangeBVMF legSecurityExchange() noexcept
    {
        return ::bovespa_mbo_sbe::types::SecurityExchangeBVMF{"BVMF", 4};
    }
    constexpr ::bovespa_mbo_sbe::types::RatioQty<Byte> legRatioQty() const noexcept
    {
        return ::sbepp::detail::get_static_field_view<::bovespa_mbo_sbe::types::RatioQty<Byte>>(
            *this, 8);
    }
    SBEPP_CPP20_CONSTEXPR ::bovespa_mbo_sbe::types::SecurityType legSecurityType() const noexcept
    {
        return ::sbepp::detail::get_value<
            ::bovespa_mbo_sbe::types::SecurityType, ::bovespa_mbo_sbe::types::SecurityType, ::sbepp::endian::little>(*this, 16);
    }

    template<
        typename T = void,
        typename = ::sbepp::detail::enable_if_writable_t<Byte, T>>
    SBEPP_CPP20_CONSTEXPR void legSecurityType(::bovespa_mbo_sbe::types::SecurityType v) const noexcept
    {
        ::sbepp::detail::set_value<::sbepp::endian::little>(*this, 16, v);
    }
    SBEPP_CPP20_CONSTEXPR ::bovespa_mbo_sbe::types::Side legSide() const noexcept
    {
        return ::sbepp::detail::get_value<
            ::bovespa_mbo_sbe::types::Side, ::bovespa_mbo_sbe::types::Side, ::sbepp::endian::little>(*this, 17);
    }

    template<
        typename T = void,
        typename = ::sbepp::detail::enable_if_writable_t<Byte, T>>
    SBEPP_CPP20_CONSTEXPR void legSide(::bovespa_mbo_sbe::types::Side v) const noexcept
    {
        ::sbepp::detail::set_value<::sbepp::endian::little>(*this, 17, v);
    }
    constexpr ::bovespa_mbo_sbe::types::Symbol<Byte> legSymbol() const noexcept
    {
        return ::sbepp::detail::get_static_field_view<::bovespa_mbo_sbe::types::Symbol<Byte>>(
            *this, 18);
    }

    template<
        typename Cursor,
        typename = ::sbepp::detail::enable_if_cursor_compatible_t<
            Byte, ::sbepp::detail::cursor_byte_type_t<Cursor>>>
    SBEPP_CPP20_CONSTEXPR auto
        legSecurityID(Cursor&& c) const noexcept
            -> ::sbepp::detail::cursor_result_type_t<Cursor, ::bovespa_mbo_sbe::types::SecurityID>
    {
        return c.template get_value<::bovespa_mbo_sbe::types::SecurityID, ::std::uint64_t, ::sbepp::endian::little>(
            *this, 0, 0);
    }

    template<
        typename Cursor,
        typename = ::sbepp::detail::enable_if_cursor_writeable_t<
            Byte, ::sbepp::detail::cursor_byte_type_t<Cursor>>>
    SBEPP_CPP20_CONSTEXPR void legSecurityID(
        ::bovespa_mbo_sbe::types::SecurityID v, Cursor&& c) const noexcept
    {
        return c.template set_value<::sbepp::endian::little>(
            *this, 0, 0, v.value());
    }

    template<
        typename Cursor,
        typename = ::sbepp::detail::enable_if_cursor_compatible_t<
            Byte, ::sbepp::detail::cursor_byte_type_t<Cursor>>>
    SBEPP_CPP20_CONSTEXPR auto legRatioQty(Cursor&& c) const noexcept
        -> ::sbepp::detail::cursor_result_type_t<Cursor, 
            ::bovespa_mbo_sbe::types::RatioQty<::sbepp::detail::cursor_byte_type_t<Cursor>>>
    {
        return c.template get_static_field_view<::bovespa_mbo_sbe::types::RatioQty<::sbepp::detail::cursor_byte_type_t<Cursor>>>(
            *this, 0, 8);
    }

    template<
        typename Cursor,
        typename = ::sbepp::detail::enable_if_cursor_compatible_t<
            Byte, ::sbepp::detail::cursor_byte_type_t<Cursor>>>
    SBEPP_CPP20_CONSTEXPR auto
        legSecurityType(Cursor&& c) const noexcept
        -> ::sbepp::detail::cursor_result_type_t<Cursor, ::bovespa_mbo_sbe::types::SecurityType>
    {
        return c.template get_value<::bovespa_mbo_sbe::types::SecurityType, ::bovespa_mbo_sbe::types::SecurityType, ::sbepp::endian::little>(
            *this, 0, 16);
    }

    template<
        typename Cursor,
        typename = ::sbepp::detail::enable_if_cursor_writeable_t<
            Byte, ::sbepp::detail::cursor_byte_type_t<Cursor>>>
    SBEPP_CPP20_CONSTEXPR void legSecurityType(
        ::bovespa_mbo_sbe::types::SecurityType v, Cursor&& c) const noexcept
    {
        return c.template set_value<::sbepp::endian::little>(
            *this, 0, 16, v);
    }

    template<
        typename Cursor,
        typename = ::sbepp::detail::enable_if_cursor_compatible_t<
            Byte, ::sbepp::detail::cursor_byte_type_t<Cursor>>>
    SBEPP_CPP20_CONSTEXPR auto
        legSide(Cursor&& c) const noexcept
        -> ::sbepp::detail::cursor_result_type_t<Cursor, ::bovespa_mbo_sbe::types::Side>
    {
        return c.template get_value<::bovespa_mbo_sbe::types::Side, ::bovespa_mbo_sbe::types::Side, ::sbepp::endian::little>(
            *this, 0, 17);
    }

    template<
        typename Cursor,
        typename = ::sbepp::detail::enable_if_cursor_writeable_t<
            Byte, ::sbepp::detail::cursor_byte_type_t<Cursor>>>
    SBEPP_CPP20_CONSTEXPR void legSide(
        ::bovespa_mbo_sbe::types::Side v, Cursor&& c) const noexcept
    {
        return c.template set_value<::sbepp::endian::little>(
            *this, 0, 17, v);
    }

    template<
        typename Cursor,
        typename = ::sbepp::detail::enable_if_cursor_compatible_t<
            Byte, ::sbepp::detail::cursor_byte_type_t<Cursor>>>
    SBEPP_CPP20_CONSTEXPR auto legSymbol(Cursor&& c) const noexcept
        -> ::sbepp::detail::cursor_result_type_t<Cursor,
            ::bovespa_mbo_sbe::types::Symbol<::sbepp::detail::cursor_byte_type_t<Cursor>>>
    {
        return c.template get_last_static_field_view<::bovespa_mbo_sbe::types::Symbol<::sbepp::detail::cursor_byte_type_t<Cursor>>>(
            *this, 0, 18);
    }

    
    SBEPP_CPP20_CONSTEXPR std::size_t operator()(
        ::sbepp::detail::size_bytes_tag) const noexcept
    {
        return 0 + (*this)(::sbepp::detail::get_block_length_tag{});
    }


    template<typename Visitor, typename Cursor>
    constexpr bool operator()(
        ::sbepp::detail::visit_tag, Visitor& v, Cursor& c) const
    {
        return v.template on_entry(*this, c);
    }

    
    template<typename Visitor, typename Cursor>
    constexpr bool operator()(
        ::sbepp::detail::visit_children_tag, Visitor& v, Cursor& c) const
    {
        return v.template on_field(this->legSecurityID(c), ::bovespa_mbo_sbe::schema::messages::SecurityDefinition_4::noLegs::legSecurityID{})
||v.template on_field(this->legRatioQty(c), ::bovespa_mbo_sbe::schema::messages::SecurityDefinition_4::noLegs::legRatioQty{})
||v.template on_field(this->legSecurityType(c), ::bovespa_mbo_sbe::schema::messages::SecurityDefinition_4::noLegs::legSecurityType{})
||v.template on_field(this->legSide(c), ::bovespa_mbo_sbe::schema::messages::SecurityDefinition_4::noLegs::legSide{})
||v.template on_field(this->legSymbol(c), ::bovespa_mbo_sbe::schema::messages::SecurityDefinition_4::noLegs::legSymbol{});
    }

};


template<typename Byte>
class group_2 : public ::sbepp::detail::flat_group_base<
                  Byte,
                  ::bovespa_mbo_sbe::detail::messages::entry_2<Byte>,
                  ::bovespa_mbo_sbe::types::GroupSizeEncoding<Byte>>
{
public:
        using ::sbepp::detail::flat_group_base<
                Byte,
                ::bovespa_mbo_sbe::detail::messages::entry_2<Byte>,
                ::bovespa_mbo_sbe::types::GroupSizeEncoding<Byte>>::flat_group_base;
        using ::sbepp::detail::flat_group_base<
                Byte,
                ::bovespa_mbo_sbe::detail::messages::entry_2<Byte>,
                ::bovespa_mbo_sbe::types::GroupSizeEncoding<Byte>>::operator();
    
    // this is implementation detail, don't use it directly
    template<
        typename T = void,
        typename = ::sbepp::detail::enable_if_writable_t<Byte, T>>
    SBEPP_CPP14_CONSTEXPR ::bovespa_mbo_sbe::types::GroupSizeEncoding<Byte>
        operator()(
            ::sbepp::detail::fill_group_header_tag,
            ::bovespa_mbo_sbe::detail::types::type_88 num_in_group) const noexcept
    {
        auto header = operator()(::sbepp::detail::get_header_tag{});
        header.blockLength({38});
        header.numInGroup(num_in_group);
        
        
        return header;
    }


    template<typename Visitor, typename Cursor>
    constexpr bool operator()(
        ::sbepp::detail::visit_tag, Visitor& v, Cursor& c) const
    {
        return v.template on_group(*this, c, "noLegs");
    }
};




template<typename Byte>
class entry_3 : public ::sbepp::detail::entry_base<Byte, ::std::uint16_t>
{
public:
    using ::sbepp::detail::entry_base<Byte, ::std::uint16_t>::entry_base;
    using ::sbepp::detail::entry_base<Byte, ::std::uint16_t>::operator();

    
        SBEPP_CPP20_CONSTEXPR ::bovespa_mbo_sbe::types::InstrAttribType instrAttribType() const noexcept
    {
        return ::sbepp::detail::get_value<
            ::bovespa_mbo_sbe::types::InstrAttribType, ::bovespa_mbo_sbe::types::InstrAttribType, ::sbepp::endian::little>(*this, 0);
    }

    template<
        typename T = void,
        typename = ::sbepp::detail::enable_if_writable_t<Byte, T>>
    SBEPP_CPP20_CONSTEXPR void instrAttribType(::bovespa_mbo_sbe::types::InstrAttribType v) const noexcept
    {
        ::sbepp::detail::set_value<::sbepp::endian::little>(*this, 0, v);
    }
    SBEPP_CPP20_CONSTEXPR ::bovespa_mbo_sbe::types::InstrAttribValue instrAttribValue() const noexcept
    {
        return ::sbepp::detail::get_value<
            ::bovespa_mbo_sbe::types::InstrAttribValue, ::bovespa_mbo_sbe::types::InstrAttribValue, ::sbepp::endian::little>(*this, 1);
    }

    template<
        typename T = void,
        typename = ::sbepp::detail::enable_if_writable_t<Byte, T>>
    SBEPP_CPP20_CONSTEXPR void instrAttribValue(::bovespa_mbo_sbe::types::InstrAttribValue v) const noexcept
    {
        ::sbepp::detail::set_value<::sbepp::endian::little>(*this, 1, v);
    }

    template<
        typename Cursor,
        typename = ::sbepp::detail::enable_if_cursor_compatible_t<
            Byte, ::sbepp::detail::cursor_byte_type_t<Cursor>>>
    SBEPP_CPP20_CONSTEXPR auto
        instrAttribType(Cursor&& c) const noexcept
        -> ::sbepp::detail::cursor_result_type_t<Cursor, ::bovespa_mbo_sbe::types::InstrAttribType>
    {
        return c.template get_value<::bovespa_mbo_sbe::types::InstrAttribType, ::bovespa_mbo_sbe::types::InstrAttribType, ::sbepp::endian::little>(
            *this, 0, 0);
    }

    template<
        typename Cursor,
        typename = ::sbepp::detail::enable_if_cursor_writeable_t<
            Byte, ::sbepp::detail::cursor_byte_type_t<Cursor>>>
    SBEPP_CPP20_CONSTEXPR void instrAttribType(
        ::bovespa_mbo_sbe::types::InstrAttribType v, Cursor&& c) const noexcept
    {
        return c.template set_value<::sbepp::endian::little>(
            *this, 0, 0, v);
    }

    template<
        typename Cursor,
        typename = ::sbepp::detail::enable_if_cursor_compatible_t<
            Byte, ::sbepp::detail::cursor_byte_type_t<Cursor>>>
    SBEPP_CPP20_CONSTEXPR auto instrAttribValue(Cursor&& c) const noexcept
        -> ::sbepp::detail::cursor_result_type_t<Cursor, ::bovespa_mbo_sbe::types::InstrAttribValue>
    {
        return c.template get_last_value<::bovespa_mbo_sbe::types::InstrAttribValue, ::bovespa_mbo_sbe::types::InstrAttribValue, ::sbepp::endian::little>(
            *this, 0, 1);
    }

    template<
        typename Cursor,
        typename = ::sbepp::detail::enable_if_cursor_writeable_t<Byte, ::sbepp::detail::cursor_byte_type_t<Cursor>>>
    SBEPP_CPP20_CONSTEXPR void instrAttribValue(::bovespa_mbo_sbe::types::InstrAttribValue v, Cursor&& c) const noexcept
    {
        return c.template set_last_value<::sbepp::endian::little>(*this, 0, 1, v);
    }

    
    SBEPP_CPP20_CONSTEXPR std::size_t operator()(
        ::sbepp::detail::size_bytes_tag) const noexcept
    {
        return 0 + (*this)(::sbepp::detail::get_block_length_tag{});
    }


    template<typename Visitor, typename Cursor>
    constexpr bool operator()(
        ::sbepp::detail::visit_tag, Visitor& v, Cursor& c) const
    {
        return v.template on_entry(*this, c);
    }

    
    template<typename Visitor, typename Cursor>
    constexpr bool operator()(
        ::sbepp::detail::visit_children_tag, Visitor& v, Cursor& c) const
    {
        return v.template on_field(this->instrAttribType(c), ::bovespa_mbo_sbe::schema::messages::SecurityDefinition_4::noInstrAttribs::instrAttribType{})
||v.template on_field(this->instrAttribValue(c), ::bovespa_mbo_sbe::schema::messages::SecurityDefinition_4::noInstrAttribs::instrAttribValue{});
    }

};


template<typename Byte>
class group_3 : public ::sbepp::detail::flat_group_base<
                  Byte,
                  ::bovespa_mbo_sbe::detail::messages::entry_3<Byte>,
                  ::bovespa_mbo_sbe::types::GroupSizeEncoding<Byte>>
{
public:
        using ::sbepp::detail::flat_group_base<
                Byte,
                ::bovespa_mbo_sbe::detail::messages::entry_3<Byte>,
                ::bovespa_mbo_sbe::types::GroupSizeEncoding<Byte>>::flat_group_base;
        using ::sbepp::detail::flat_group_base<
                Byte,
                ::bovespa_mbo_sbe::detail::messages::entry_3<Byte>,
                ::bovespa_mbo_sbe::types::GroupSizeEncoding<Byte>>::operator();
    
    // this is implementation detail, don't use it directly
    template<
        typename T = void,
        typename = ::sbepp::detail::enable_if_writable_t<Byte, T>>
    SBEPP_CPP14_CONSTEXPR ::bovespa_mbo_sbe::types::GroupSizeEncoding<Byte>
        operator()(
            ::sbepp::detail::fill_group_header_tag,
            ::bovespa_mbo_sbe::detail::types::type_88 num_in_group) const noexcept
    {
        auto header = operator()(::sbepp::detail::get_header_tag{});
        header.blockLength({2});
        header.numInGroup(num_in_group);
        
        
        return header;
    }


    template<typename Visitor, typename Cursor>
    constexpr bool operator()(
        ::sbepp::detail::visit_tag, Visitor& v, Cursor& c) const
    {
        return v.template on_group(*this, c, "noInstrAttribs");
    }
};


template<typename Byte>
class message_7 : public ::sbepp::detail::message_base<
    Byte, ::bovespa_mbo_sbe::types::messageHeader<Byte>>
{
public:
    using ::sbepp::detail::message_base<
        Byte, ::bovespa_mbo_sbe::types::messageHeader<Byte>>::message_base;
    using ::sbepp::detail::message_base<
        Byte, ::bovespa_mbo_sbe::types::messageHeader<Byte>>::operator();

    static constexpr ::bovespa_mbo_sbe::types::MessageType messageType() noexcept
    {
        return ::bovespa_mbo_sbe::types::MessageType{::bovespa_mbo_sbe::detail::types::enum_8::SecurityDefinition};
    }
    static constexpr ::bovespa_mbo_sbe::types::ApplVerID applVerID() noexcept
    {
        return ::bovespa_mbo_sbe::types::ApplVerID{::bovespa_mbo_sbe::detail::types::enum_6::FIX50SP2};
    }
    SBEPP_CPP20_CONSTEXPR ::bovespa_mbo_sbe::types::SecurityID securityID() const noexcept
    {
        return ::sbepp::detail::get_value<
            ::bovespa_mbo_sbe::types::SecurityID, ::bovespa_mbo_sbe::types::SecurityID::value_type, ::sbepp::endian::little>(*this, 8);
    }

    template<
        typename T = void,
        typename = ::sbepp::detail::enable_if_writable_t<Byte, T>>
    SBEPP_CPP20_CONSTEXPR void securityID(::bovespa_mbo_sbe::types::SecurityID v) const noexcept
    {
        ::sbepp::detail::set_value<::sbepp::endian::little>(*this, 8, v.value());
    }
    constexpr ::bovespa_mbo_sbe::types::SecurityExchange<Byte> securityExchange() const noexcept
    {
        return ::sbepp::detail::get_static_field_view<::bovespa_mbo_sbe::types::SecurityExchange<Byte>>(
            *this, 16);
    }
    SBEPP_CPP20_CONSTEXPR ::bovespa_mbo_sbe::types::SecurityIDSource securityIDSource() const noexcept
    {
        return ::sbepp::detail::get_value<
            ::bovespa_mbo_sbe::types::SecurityIDSource, ::bovespa_mbo_sbe::types::SecurityIDSource, ::sbepp::endian::little>(*this, 20);
    }

    template<
        typename T = void,
        typename = ::sbepp::detail::enable_if_writable_t<Byte, T>>
    SBEPP_CPP20_CONSTEXPR void securityIDSource(::bovespa_mbo_sbe::types::SecurityIDSource v) const noexcept
    {
        ::sbepp::detail::set_value<::sbepp::endian::little>(*this, 20, v);
    }
    constexpr ::bovespa_mbo_sbe::types::SecurityGroup<Byte> securityGroup() const noexcept
    {
        return ::sbepp::detail::get_static_field_view<::bovespa_mbo_sbe::types::SecurityGroup<Byte>>(
            *this, 21);
    }
    constexpr ::bovespa_mbo_sbe::types::Symbol<Byte> symbol() const noexcept
    {
        return ::sbepp::detail::get_static_field_view<::bovespa_mbo_sbe::types::Symbol<Byte>>(
            *this, 24);
    }
    SBEPP_CPP20_CONSTEXPR ::bovespa_mbo_sbe::types::SecurityUpdateAction securityUpdateAction() const noexcept
    {
        return ::sbepp::detail::get_value<
            ::bovespa_mbo_sbe::types::SecurityUpdateAction, ::bovespa_mbo_sbe::types::SecurityUpdateAction, ::sbepp::endian::little>(*this, 44);
    }

    template<
        typename T = void,
        typename = ::sbepp::detail::enable_if_writable_t<Byte, T>>
    SBEPP_CPP20_CONSTEXPR void securityUpdateAction(::bovespa_mbo_sbe::types::SecurityUpdateAction v) const noexcept
    {
        ::sbepp::detail::set_value<::sbepp::endian::little>(*this, 44, v);
    }
    SBEPP_CPP20_CONSTEXPR ::bovespa_mbo_sbe::types::SecurityType securityType() const noexcept
    {
        return ::sbepp::detail::get_value<
            ::bovespa_mbo_sbe::types::SecurityType, ::bovespa_mbo_sbe::types::SecurityType, ::sbepp::endian::little>(*this, 45);
    }

    template<
        typename T = void,
        typename = ::sbepp::detail::enable_if_writable_t<Byte, T>>
    SBEPP_CPP20_CONSTEXPR void securityType(::bovespa_mbo_sbe::types::SecurityType v) const noexcept
    {
        ::sbepp::detail::set_value<::sbepp::endian::little>(*this, 45, v);
    }
    SBEPP_CPP20_CONSTEXPR ::bovespa_mbo_sbe::types::UInt16 securitySubType() const noexcept
    {
        return ::sbepp::detail::get_value<
            ::bovespa_mbo_sbe::types::UInt16, ::bovespa_mbo_sbe::types::UInt16::value_type, ::sbepp::endian::little>(*this, 46);
    }

    template<
        typename T = void,
        typename = ::sbepp::detail::enable_if_writable_t<Byte, T>>
    SBEPP_CPP20_CONSTEXPR void securitySubType(::bovespa_mbo_sbe::types::UInt16 v) const noexcept
    {
        ::sbepp::detail::set_value<::sbepp::endian::little>(*this, 46, v.value());
    }
    SBEPP_CPP20_CONSTEXPR ::bovespa_mbo_sbe::types::UInt32 totNoRelatedSym() const noexcept
    {
        return ::sbepp::detail::get_value<
            ::bovespa_mbo_sbe::types::UInt32, ::bovespa_mbo_sbe::types::UInt32::value_type, ::sbepp::endian::little>(*this, 48);
    }

    template<
        typename T = void,
        typename = ::sbepp::detail::enable_if_writable_t<Byte, T>>
    SBEPP_CPP20_CONSTEXPR void totNoRelatedSym(::bovespa_mbo_sbe::types::UInt32 v) const noexcept
    {
        ::sbepp::detail::set_value<::sbepp::endian::little>(*this, 48, v.value());
    }
    constexpr ::bovespa_mbo_sbe::types::PriceOptional<Byte> minPriceIncrement() const noexcept
    {
        return ::sbepp::detail::get_static_field_view<::bovespa_mbo_sbe::types::PriceOptional<Byte>>(
            *this, 52);
    }
    constexpr ::bovespa_mbo_sbe::types::PriceOptional<Byte> strikePrice() const noexcept
    {
        return ::sbepp::detail::get_static_field_view<::bovespa_mbo_sbe::types::PriceOptional<Byte>>(
            *this, 60);
    }
    constexpr ::bovespa_mbo_sbe::types::Fixed8<Byte> contractMultiplier() const noexcept
    {
        return ::sbepp::detail::get_static_field_view<::bovespa_mbo_sbe::types::Fixed8<Byte>>(
            *this, 68);
    }
    constexpr ::bovespa_mbo_sbe::types::Fixed8<Byte> priceDivisor() const noexcept
    {
        return ::sbepp::detail::get_static_field_view<::bovespa_mbo_sbe::types::Fixed8<Byte>>(
            *this, 76);
    }
    constexpr ::bovespa_mbo_sbe::types::UTCTimestampSeconds<Byte> securityValidityTimestamp() const noexcept
    {
        return ::sbepp::detail::get_static_field_view<::bovespa_mbo_sbe::types::UTCTimestampSeconds<Byte>>(
            *this, 84);
    }
    SBEPP_CPP20_CONSTEXPR ::bovespa_mbo_sbe::types::UInt64NULL noSharesIssued() const noexcept
    {
        return ::sbepp::detail::get_value<
            ::bovespa_mbo_sbe::types::UInt64NULL, ::bovespa_mbo_sbe::types::UInt64NULL::value_type, ::sbepp::endian::little>(*this, 92);
    }

    template<
        typename T = void,
        typename = ::sbepp::detail::enable_if_writable_t<Byte, T>>
    SBEPP_CPP20_CONSTEXPR void noSharesIssued(::bovespa_mbo_sbe::types::UInt64NULL v) const noexcept
    {
        ::sbepp::detail::set_value<::sbepp::endian::little>(*this, 92, v.value());
    }
    SBEPP_CPP20_CONSTEXPR ::bovespa_mbo_sbe::types::ClearingHouseID clearingHouseID() const noexcept
    {
        return ::sbepp::detail::get_value<
            ::bovespa_mbo_sbe::types::ClearingHouseID, ::bovespa_mbo_sbe::types::ClearingHouseID::value_type, ::sbepp::endian::little>(*this, 100);
    }

    template<
        typename T = void,
        typename = ::sbepp::detail::enable_if_writable_t<Byte, T>>
    SBEPP_CPP20_CONSTEXPR void clearingHouseID(::bovespa_mbo_sbe::types::ClearingHouseID v) const noexcept
    {
        ::sbepp::detail::set_value<::sbepp::endian::little>(*this, 100, v.value());
    }
    SBEPP_CPP20_CONSTEXPR ::bovespa_mbo_sbe::types::QuantityOptional minOrderQty() const noexcept
    {
        return ::sbepp::detail::get_value<
            ::bovespa_mbo_sbe::types::QuantityOptional, ::bovespa_mbo_sbe::types::QuantityOptional::value_type, ::sbepp::endian::little>(*this, 108);
    }

    template<
        typename T = void,
        typename = ::sbepp::detail::enable_if_writable_t<Byte, T>>
    SBEPP_CPP20_CONSTEXPR void minOrderQty(::bovespa_mbo_sbe::types::QuantityOptional v) const noexcept
    {
        ::sbepp::detail::set_value<::sbepp::endian::little>(*this, 108, v.value());
    }
    SBEPP_CPP20_CONSTEXPR ::bovespa_mbo_sbe::types::QuantityOptional maxOrderQty() const noexcept
    {
        return ::sbepp::detail::get_value<
            ::bovespa_mbo_sbe::types::QuantityOptional, ::bovespa_mbo_sbe::types::QuantityOptional::value_type, ::sbepp::endian::little>(*this, 116);
    }

    template<
        typename T = void,
        typename = ::sbepp::detail::enable_if_writable_t<Byte, T>>
    SBEPP_CPP20_CONSTEXPR void maxOrderQty(::bovespa_mbo_sbe::types::QuantityOptional v) const noexcept
    {
        ::sbepp::detail::set_value<::sbepp::endian::little>(*this, 116, v.value());
    }
    SBEPP_CPP20_CONSTEXPR ::bovespa_mbo_sbe::types::QuantityOptional minLotSize() const noexcept
    {
        return ::sbepp::detail::get_value<
            ::bovespa_mbo_sbe::types::QuantityOptional, ::bovespa_mbo_sbe::types::QuantityOptional::value_type, ::sbepp::endian::little>(*this, 124);
    }

    template<
        typename T = void,
        typename = ::sbepp::detail::enable_if_writable_t<Byte, T>>
    SBEPP_CPP20_CONSTEXPR void minLotSize(::bovespa_mbo_sbe::types::QuantityOptional v) const noexcept
    {
        ::sbepp::detail::set_value<::sbepp::endian::little>(*this, 124, v.value());
    }
    SBEPP_CPP20_CONSTEXPR ::bovespa_mbo_sbe::types::QuantityOptional minTradeVol() const noexcept
    {
        return ::sbepp::detail::get_value<
            ::bovespa_mbo_sbe::types::QuantityOptional, ::bovespa_mbo_sbe::types::QuantityOptional::value_type, ::sbepp::endian::little>(*this, 132);
    }

    template<
        typename T = void,
        typename = ::sbepp::detail::enable_if_writable_t<Byte, T>>
    SBEPP_CPP20_CONSTEXPR void minTradeVol(::bovespa_mbo_sbe::types::QuantityOptional v) const noexcept
    {
        ::sbepp::detail::set_value<::sbepp::endian::little>(*this, 132, v.value());
    }
    SBEPP_CPP20_CONSTEXPR ::bovespa_mbo_sbe::types::UInt32NULL corporateActionEventId() const noexcept
    {
        return ::sbepp::detail::get_value<
            ::bovespa_mbo_sbe::types::UInt32NULL, ::bovespa_mbo_sbe::types::UInt32NULL::value_type, ::sbepp::endian::little>(*this, 140);
    }

    template<
        typename T = void,
        typename = ::sbepp::detail::enable_if_writable_t<Byte, T>>
    SBEPP_CPP20_CONSTEXPR void corporateActionEventId(::bovespa_mbo_sbe::types::UInt32NULL v) const noexcept
    {
        ::sbepp::detail::set_value<::sbepp::endian::little>(*this, 140, v.value());
    }
    SBEPP_CPP20_CONSTEXPR ::bovespa_mbo_sbe::types::LocalMktDate32 issueDate() const noexcept
    {
        return ::sbepp::detail::get_value<
            ::bovespa_mbo_sbe::types::LocalMktDate32, ::bovespa_mbo_sbe::types::LocalMktDate32::value_type, ::sbepp::endian::little>(*this, 144);
    }

    template<
        typename T = void,
        typename = ::sbepp::detail::enable_if_writable_t<Byte, T>>
    SBEPP_CPP20_CONSTEXPR void issueDate(::bovespa_mbo_sbe::types::LocalMktDate32 v) const noexcept
    {
        ::sbepp::detail::set_value<::sbepp::endian::little>(*this, 144, v.value());
    }
    SBEPP_CPP20_CONSTEXPR ::bovespa_mbo_sbe::types::LocalMktDate32Optional maturityDate() const noexcept
    {
        return ::sbepp::detail::get_value<
            ::bovespa_mbo_sbe::types::LocalMktDate32Optional, ::bovespa_mbo_sbe::types::LocalMktDate32Optional::value_type, ::sbepp::endian::little>(*this, 148);
    }

    template<
        typename T = void,
        typename = ::sbepp::detail::enable_if_writable_t<Byte, T>>
    SBEPP_CPP20_CONSTEXPR void maturityDate(::bovespa_mbo_sbe::types::LocalMktDate32Optional v) const noexcept
    {
        ::sbepp::detail::set_value<::sbepp::endian::little>(*this, 148, v.value());
    }
    constexpr ::bovespa_mbo_sbe::types::CountryCode<Byte> countryOfIssue() const noexcept
    {
        return ::sbepp::detail::get_static_field_view<::bovespa_mbo_sbe::types::CountryCode<Byte>>(
            *this, 152);
    }
    SBEPP_CPP20_CONSTEXPR ::bovespa_mbo_sbe::types::LocalMktDate32Optional startDate() const noexcept
    {
        return ::sbepp::detail::get_value<
            ::bovespa_mbo_sbe::types::LocalMktDate32Optional, ::bovespa_mbo_sbe::types::LocalMktDate32Optional::value_type, ::sbepp::endian::little>(*this, 154);
    }

    template<
        typename T = void,
        typename = ::sbepp::detail::enable_if_writable_t<Byte, T>>
    SBEPP_CPP20_CONSTEXPR void startDate(::bovespa_mbo_sbe::types::LocalMktDate32Optional v) const noexcept
    {
        ::sbepp::detail::set_value<::sbepp::endian::little>(*this, 154, v.value());
    }
    SBEPP_CPP20_CONSTEXPR ::bovespa_mbo_sbe::types::LocalMktDate32Optional endDate() const noexcept
    {
        return ::sbepp::detail::get_value<
            ::bovespa_mbo_sbe::types::LocalMktDate32Optional, ::bovespa_mbo_sbe::types::LocalMktDate32Optional::value_type, ::sbepp::endian::little>(*this, 158);
    }

    template<
        typename T = void,
        typename = ::sbepp::detail::enable_if_writable_t<Byte, T>>
    SBEPP_CPP20_CONSTEXPR void endDate(::bovespa_mbo_sbe::types::LocalMktDate32Optional v) const noexcept
    {
        ::sbepp::detail::set_value<::sbepp::endian::little>(*this, 158, v.value());
    }
    SBEPP_CPP20_CONSTEXPR ::bovespa_mbo_sbe::types::SettlType settlType() const noexcept
    {
        return ::sbepp::detail::get_value<
            ::bovespa_mbo_sbe::types::SettlType, ::bovespa_mbo_sbe::types::SettlType::value_type, ::sbepp::endian::little>(*this, 162);
    }

    template<
        typename T = void,
        typename = ::sbepp::detail::enable_if_writable_t<Byte, T>>
    SBEPP_CPP20_CONSTEXPR void settlType(::bovespa_mbo_sbe::types::SettlType v) const noexcept
    {
        ::sbepp::detail::set_value<::sbepp::endian::little>(*this, 162, v.value());
    }
    SBEPP_CPP20_CONSTEXPR ::bovespa_mbo_sbe::types::LocalMktDate32Optional settlDate() const noexcept
    {
        return ::sbepp::detail::get_value<
            ::bovespa_mbo_sbe::types::LocalMktDate32Optional, ::bovespa_mbo_sbe::types::LocalMktDate32Optional::value_type, ::sbepp::endian::little>(*this, 164);
    }

    template<
        typename T = void,
        typename = ::sbepp::detail::enable_if_writable_t<Byte, T>>
    SBEPP_CPP20_CONSTEXPR void settlDate(::bovespa_mbo_sbe::types::LocalMktDate32Optional v) const noexcept
    {
        ::sbepp::detail::set_value<::sbepp::endian::little>(*this, 164, v.value());
    }
    SBEPP_CPP20_CONSTEXPR ::bovespa_mbo_sbe::types::LocalMktDate32Optional datedDate() const noexcept
    {
        return ::sbepp::detail::get_value<
            ::bovespa_mbo_sbe::types::LocalMktDate32Optional, ::bovespa_mbo_sbe::types::LocalMktDate32Optional::value_type, ::sbepp::endian::little>(*this, 168);
    }

    template<
        typename T = void,
        typename = ::sbepp::detail::enable_if_writable_t<Byte, T>>
    SBEPP_CPP20_CONSTEXPR void datedDate(::bovespa_mbo_sbe::types::LocalMktDate32Optional v) const noexcept
    {
        ::sbepp::detail::set_value<::sbepp::endian::little>(*this, 168, v.value());
    }
    constexpr ::bovespa_mbo_sbe::types::ISINNumber<Byte> isinNumber() const noexcept
    {
        return ::sbepp::detail::get_static_field_view<::bovespa_mbo_sbe::types::ISINNumber<Byte>>(
            *this, 172);
    }
    constexpr ::bovespa_mbo_sbe::types::Asset<Byte> asset() const noexcept
    {
        return ::sbepp::detail::get_static_field_view<::bovespa_mbo_sbe::types::Asset<Byte>>(
            *this, 184);
    }
    constexpr ::bovespa_mbo_sbe::types::CFICode<Byte> cfiCode() const noexcept
    {
        return ::sbepp::detail::get_static_field_view<::bovespa_mbo_sbe::types::CFICode<Byte>>(
            *this, 190);
    }
    constexpr ::bovespa_mbo_sbe::types::MaturityMonthYear<Byte> maturityMonthYear() const noexcept
    {
        return ::sbepp::detail::get_static_field_view<::bovespa_mbo_sbe::types::MaturityMonthYear<Byte>>(
            *this, 196);
    }
    constexpr ::bovespa_mbo_sbe::types::MaturityMonthYear<Byte> contractSettlMonth() const noexcept
    {
        return ::sbepp::detail::get_static_field_view<::bovespa_mbo_sbe::types::MaturityMonthYear<Byte>>(
            *this, 201);
    }
    constexpr ::bovespa_mbo_sbe::types::Currency<Byte> currency() const noexcept
    {
        return ::sbepp::detail::get_static_field_view<::bovespa_mbo_sbe::types::Currency<Byte>>(
            *this, 206);
    }
    constexpr ::bovespa_mbo_sbe::types::Currency<Byte> strikeCurrency() const noexcept
    {
        return ::sbepp::detail::get_static_field_view<::bovespa_mbo_sbe::types::Currency<Byte>>(
            *this, 209);
    }
    constexpr ::bovespa_mbo_sbe::types::Currency<Byte> settlCurrency() const noexcept
    {
        return ::sbepp::detail::get_static_field_view<::bovespa_mbo_sbe::types::Currency<Byte>>(
            *this, 212);
    }
    constexpr ::bovespa_mbo_sbe::types::SecurityStrategyType<Byte> securityStrategyType() const noexcept
    {
        return ::sbepp::detail::get_static_field_view<::bovespa_mbo_sbe::types::SecurityStrategyType<Byte>>(
            *this, 215);
    }
    SBEPP_CPP20_CONSTEXPR ::bovespa_mbo_sbe::types::LotType lotType() const noexcept
    {
        return ::sbepp::detail::get_value<
            ::bovespa_mbo_sbe::types::LotType, ::bovespa_mbo_sbe::types::LotType, ::sbepp::endian::little>(*this, 218);
    }

    template<
        typename T = void,
        typename = ::sbepp::detail::enable_if_writable_t<Byte, T>>
    SBEPP_CPP20_CONSTEXPR void lotType(::bovespa_mbo_sbe::types::LotType v) const noexcept
    {
        ::sbepp::detail::set_value<::sbepp::endian::little>(*this, 218, v);
    }
    SBEPP_CPP20_CONSTEXPR ::bovespa_mbo_sbe::types::UInt8 tickSizeDenominator() const noexcept
    {
        return ::sbepp::detail::get_value<
            ::bovespa_mbo_sbe::types::UInt8, ::bovespa_mbo_sbe::types::UInt8::value_type, ::sbepp::endian::little>(*this, 219);
    }

    template<
        typename T = void,
        typename = ::sbepp::detail::enable_if_writable_t<Byte, T>>
    SBEPP_CPP20_CONSTEXPR void tickSizeDenominator(::bovespa_mbo_sbe::types::UInt8 v) const noexcept
    {
        ::sbepp::detail::set_value<::sbepp::endian::little>(*this, 219, v.value());
    }
    SBEPP_CPP20_CONSTEXPR ::bovespa_mbo_sbe::types::Product product() const noexcept
    {
        return ::sbepp::detail::get_value<
            ::bovespa_mbo_sbe::types::Product, ::bovespa_mbo_sbe::types::Product, ::sbepp::endian::little>(*this, 220);
    }

    template<
        typename T = void,
        typename = ::sbepp::detail::enable_if_writable_t<Byte, T>>
    SBEPP_CPP20_CONSTEXPR void product(::bovespa_mbo_sbe::types::Product v) const noexcept
    {
        ::sbepp::detail::set_value<::sbepp::endian::little>(*this, 220, v);
    }
    SBEPP_CPP20_CONSTEXPR ::bovespa_mbo_sbe::types::ExerciseStyle exerciseStyle() const noexcept
    {
        return ::sbepp::detail::get_value<
            ::bovespa_mbo_sbe::types::ExerciseStyle, ::bovespa_mbo_sbe::types::ExerciseStyle, ::sbepp::endian::little>(*this, 221);
    }

    template<
        typename T = void,
        typename = ::sbepp::detail::enable_if_writable_t<Byte, T>>
    SBEPP_CPP20_CONSTEXPR void exerciseStyle(::bovespa_mbo_sbe::types::ExerciseStyle v) const noexcept
    {
        ::sbepp::detail::set_value<::sbepp::endian::little>(*this, 221, v);
    }
    SBEPP_CPP20_CONSTEXPR ::bovespa_mbo_sbe::types::PutOrCall putOrCall() const noexcept
    {
        return ::sbepp::detail::get_value<
            ::bovespa_mbo_sbe::types::PutOrCall, ::bovespa_mbo_sbe::types::PutOrCall, ::sbepp::endian::little>(*this, 222);
    }

    template<
        typename T = void,
        typename = ::sbepp::detail::enable_if_writable_t<Byte, T>>
    SBEPP_CPP20_CONSTEXPR void putOrCall(::bovespa_mbo_sbe::types::PutOrCall v) const noexcept
    {
        ::sbepp::detail::set_value<::sbepp::endian::little>(*this, 222, v);
    }
    SBEPP_CPP20_CONSTEXPR ::bovespa_mbo_sbe::types::PriceType priceType() const noexcept
    {
        return ::sbepp::detail::get_value<
            ::bovespa_mbo_sbe::types::PriceType, ::bovespa_mbo_sbe::types::PriceType, ::sbepp::endian::little>(*this, 223);
    }

    template<
        typename T = void,
        typename = ::sbepp::detail::enable_if_writable_t<Byte, T>>
    SBEPP_CPP20_CONSTEXPR void priceType(::bovespa_mbo_sbe::types::PriceType v) const noexcept
    {
        ::sbepp::detail::set_value<::sbepp::endian::little>(*this, 223, v);
    }
    SBEPP_CPP20_CONSTEXPR ::bovespa_mbo_sbe::types::MarketSegmentID marketSegmentID() const noexcept
    {
        return ::sbepp::detail::get_value<
            ::bovespa_mbo_sbe::types::MarketSegmentID, ::bovespa_mbo_sbe::types::MarketSegmentID::value_type, ::sbepp::endian::little>(*this, 224);
    }

    template<
        typename T = void,
        typename = ::sbepp::detail::enable_if_writable_t<Byte, T>>
    SBEPP_CPP20_CONSTEXPR void marketSegmentID(::bovespa_mbo_sbe::types::MarketSegmentID v) const noexcept
    {
        ::sbepp::detail::set_value<::sbepp::endian::little>(*this, 224, v.value());
    }
    SBEPP_CPP20_CONSTEXPR ::bovespa_mbo_sbe::types::GovernanceIndicator governanceIndicator() const noexcept
    {
        return ::sbepp::detail::get_value<
            ::bovespa_mbo_sbe::types::GovernanceIndicator, ::bovespa_mbo_sbe::types::GovernanceIndicator, ::sbepp::endian::little>(*this, 225);
    }

    template<
        typename T = void,
        typename = ::sbepp::detail::enable_if_writable_t<Byte, T>>
    SBEPP_CPP20_CONSTEXPR void governanceIndicator(::bovespa_mbo_sbe::types::GovernanceIndicator v) const noexcept
    {
        ::sbepp::detail::set_value<::sbepp::endian::little>(*this, 225, v);
    }
    SBEPP_CPP20_CONSTEXPR ::bovespa_mbo_sbe::types::SecurityMatchType securityMatchType() const noexcept
    {
        return ::sbepp::detail::get_value<
            ::bovespa_mbo_sbe::types::SecurityMatchType, ::bovespa_mbo_sbe::types::SecurityMatchType, ::sbepp::endian::little>(*this, 226);
    }

    template<
        typename T = void,
        typename = ::sbepp::detail::enable_if_writable_t<Byte, T>>
    SBEPP_CPP20_CONSTEXPR void securityMatchType(::bovespa_mbo_sbe::types::SecurityMatchType v) const noexcept
    {
        ::sbepp::detail::set_value<::sbepp::endian::little>(*this, 226, v);
    }
    SBEPP_CPP20_CONSTEXPR ::bovespa_mbo_sbe::types::Boolean lastFragment() const noexcept
    {
        return ::sbepp::detail::get_value<
            ::bovespa_mbo_sbe::types::Boolean, ::bovespa_mbo_sbe::types::Boolean, ::sbepp::endian::little>(*this, 227);
    }

    template<
        typename T = void,
        typename = ::sbepp::detail::enable_if_writable_t<Byte, T>>
    SBEPP_CPP20_CONSTEXPR void lastFragment(::bovespa_mbo_sbe::types::Boolean v) const noexcept
    {
        ::sbepp::detail::set_value<::sbepp::endian::little>(*this, 227, v);
    }
    SBEPP_CPP20_CONSTEXPR ::bovespa_mbo_sbe::types::MultiLegModel multiLegModel() const noexcept
    {
        return ::sbepp::detail::get_value<
            ::bovespa_mbo_sbe::types::MultiLegModel, ::bovespa_mbo_sbe::types::MultiLegModel, ::sbepp::endian::little>(*this, 228);
    }

    template<
        typename T = void,
        typename = ::sbepp::detail::enable_if_writable_t<Byte, T>>
    SBEPP_CPP20_CONSTEXPR void multiLegModel(::bovespa_mbo_sbe::types::MultiLegModel v) const noexcept
    {
        ::sbepp::detail::set_value<::sbepp::endian::little>(*this, 228, v);
    }
    SBEPP_CPP20_CONSTEXPR ::bovespa_mbo_sbe::types::MultiLegPriceMethod multiLegPriceMethod() const noexcept
    {
        return ::sbepp::detail::get_value<
            ::bovespa_mbo_sbe::types::MultiLegPriceMethod, ::bovespa_mbo_sbe::types::MultiLegPriceMethod, ::sbepp::endian::little>(*this, 229);
    }

    template<
        typename T = void,
        typename = ::sbepp::detail::enable_if_writable_t<Byte, T>>
    SBEPP_CPP20_CONSTEXPR void multiLegPriceMethod(::bovespa_mbo_sbe::types::MultiLegPriceMethod v) const noexcept
    {
        ::sbepp::detail::set_value<::sbepp::endian::little>(*this, 229, v);
    }
    SBEPP_CPP20_CONSTEXPR ::bovespa_mbo_sbe::types::QuantityOptional minCrossQty() const noexcept
    {
        return ::sbepp::detail::get_value<
            ::bovespa_mbo_sbe::types::QuantityOptional, ::bovespa_mbo_sbe::types::QuantityOptional::value_type, ::sbepp::endian::little>(*this, 230);
    }

    template<
        typename T = void,
        typename = ::sbepp::detail::enable_if_writable_t<Byte, T>>
    SBEPP_CPP20_CONSTEXPR void minCrossQty(::bovespa_mbo_sbe::types::QuantityOptional v) const noexcept
    {
        ::sbepp::detail::set_value<::sbepp::endian::little>(*this, 230, v.value());
    }

    constexpr ::bovespa_mbo_sbe::detail::messages::group_1<Byte> noUnderlyings() const noexcept
    {
        return ::sbepp::detail::get_first_dynamic_field_view<::bovespa_mbo_sbe::detail::messages::group_1<Byte>>(
            *this);
    }

    constexpr ::bovespa_mbo_sbe::detail::messages::group_2<Byte> noLegs() const noexcept
    {
        return ::sbepp::detail::get_dynamic_field_view<::bovespa_mbo_sbe::detail::messages::group_2<Byte>>(*this, noUnderlyings());
    }

    constexpr ::bovespa_mbo_sbe::detail::messages::group_3<Byte> noInstrAttribs() const noexcept
    {
        return ::sbepp::detail::get_dynamic_field_view<::bovespa_mbo_sbe::detail::messages::group_3<Byte>>(*this, noLegs());
    }

    constexpr ::sbepp::detail::dynamic_array_ref<
    Byte, char, ::bovespa_mbo_sbe::detail::types::type_90, ::sbepp::endian::little> securityDesc() const noexcept
    {
        return ::sbepp::detail::get_dynamic_field_view<::sbepp::detail::dynamic_array_ref<
    Byte, char, ::bovespa_mbo_sbe::detail::types::type_90, ::sbepp::endian::little>>(
            *this, noInstrAttribs());
    }

    template<
        typename Cursor,
        typename = ::sbepp::detail::enable_if_cursor_compatible_t<
            Byte, ::sbepp::detail::cursor_byte_type_t<Cursor>>>
    SBEPP_CPP20_CONSTEXPR auto
        securityID(Cursor&& c) const noexcept
            -> ::sbepp::detail::cursor_result_type_t<Cursor, ::bovespa_mbo_sbe::types::SecurityID>
    {
        return c.template get_value<::bovespa_mbo_sbe::types::SecurityID, ::std::uint64_t, ::sbepp::endian::little>(
            *this, 0, 8);
    }

    template<
        typename Cursor,
        typename = ::sbepp::detail::enable_if_cursor_writeable_t<
            Byte, ::sbepp::detail::cursor_byte_type_t<Cursor>>>
    SBEPP_CPP20_CONSTEXPR void securityID(
        ::bovespa_mbo_sbe::types::SecurityID v, Cursor&& c) const noexcept
    {
        return c.template set_value<::sbepp::endian::little>(
            *this, 0, 8, v.value());
    }

    template<
        typename Cursor,
        typename = ::sbepp::detail::enable_if_cursor_compatible_t<
            Byte, ::sbepp::detail::cursor_byte_type_t<Cursor>>>
    SBEPP_CPP20_CONSTEXPR auto
        securityExchange(Cursor&& c) const noexcept
        -> ::sbepp::detail::cursor_result_type_t<Cursor, ::bovespa_mbo_sbe::types::SecurityExchange<
            ::sbepp::detail::cursor_byte_type_t<Cursor>>>
    {
        return c.template get_static_field_view<::bovespa_mbo_sbe::types::SecurityExchange<
            ::sbepp::detail::cursor_byte_type_t<Cursor>>>(
                *this, 0, 16);
    }

    template<
        typename Cursor,
        typename = ::sbepp::detail::enable_if_cursor_compatible_t<
            Byte, ::sbepp::detail::cursor_byte_type_t<Cursor>>>
    SBEPP_CPP20_CONSTEXPR auto
        securityIDSource(Cursor&& c) const noexcept
        -> ::sbepp::detail::cursor_result_type_t<Cursor, ::bovespa_mbo_sbe::types::SecurityIDSource>
    {
        return c.template get_value<::bovespa_mbo_sbe::types::SecurityIDSource, ::bovespa_mbo_sbe::types::SecurityIDSource, ::sbepp::endian::little>(
            *this, 0, 20);
    }

    template<
        typename Cursor,
        typename = ::sbepp::detail::enable_if_cursor_writeable_t<
            Byte, ::sbepp::detail::cursor_byte_type_t<Cursor>>>
    SBEPP_CPP20_CONSTEXPR void securityIDSource(
        ::bovespa_mbo_sbe::types::SecurityIDSource v, Cursor&& c) const noexcept
    {
        return c.template set_value<::sbepp::endian::little>(
            *this, 0, 20, v);
    }

    template<
        typename Cursor,
        typename = ::sbepp::detail::enable_if_cursor_compatible_t<
            Byte, ::sbepp::detail::cursor_byte_type_t<Cursor>>>
    SBEPP_CPP20_CONSTEXPR auto
        securityGroup(Cursor&& c) const noexcept
        -> ::sbepp::detail::cursor_result_type_t<Cursor, ::bovespa_mbo_sbe::types::SecurityGroup<
            ::sbepp::detail::cursor_byte_type_t<Cursor>>>
    {
        return c.template get_static_field_view<::bovespa_mbo_sbe::types::SecurityGroup<
            ::sbepp::detail::cursor_byte_type_t<Cursor>>>(
                *this, 0, 21);
    }

    template<
        typename Cursor,
        typename = ::sbepp::detail::enable_if_cursor_compatible_t<
            Byte, ::sbepp::detail::cursor_byte_type_t<Cursor>>>
    SBEPP_CPP20_CONSTEXPR auto
        symbol(Cursor&& c) const noexcept
        -> ::sbepp::detail::cursor_result_type_t<Cursor, ::bovespa_mbo_sbe::types::Symbol<
            ::sbepp::detail::cursor_byte_type_t<Cursor>>>
    {
        return c.template get_static_field_view<::bovespa_mbo_sbe::types::Symbol<
            ::sbepp::detail::cursor_byte_type_t<Cursor>>>(
                *this, 0, 24);
    }

    template<
        typename Cursor,
        typename = ::sbepp::detail::enable_if_cursor_compatible_t<
            Byte, ::sbepp::detail::cursor_byte_type_t<Cursor>>>
    SBEPP_CPP20_CONSTEXPR auto
        securityUpdateAction(Cursor&& c) const noexcept
        -> ::sbepp::detail::cursor_result_type_t<Cursor, ::bovespa_mbo_sbe::types::SecurityUpdateAction>
    {
        return c.template get_value<::bovespa_mbo_sbe::types::SecurityUpdateAction, ::bovespa_mbo_sbe::types::SecurityUpdateAction, ::sbepp::endian::little>(
            *this, 0, 44);
    }

    template<
        typename Cursor,
        typename = ::sbepp::detail::enable_if_cursor_writeable_t<
            Byte, ::sbepp::detail::cursor_byte_type_t<Cursor>>>
    SBEPP_CPP20_CONSTEXPR void securityUpdateAction(
        ::bovespa_mbo_sbe::types::SecurityUpdateAction v, Cursor&& c) const noexcept
    {
        return c.template set_value<::sbepp::endian::little>(
            *this, 0, 44, v);
    }

    template<
        typename Cursor,
        typename = ::sbepp::detail::enable_if_cursor_compatible_t<
            Byte, ::sbepp::detail::cursor_byte_type_t<Cursor>>>
    SBEPP_CPP20_CONSTEXPR auto
        securityType(Cursor&& c) const noexcept
        -> ::sbepp::detail::cursor_result_type_t<Cursor, ::bovespa_mbo_sbe::types::SecurityType>
    {
        return c.template get_value<::bovespa_mbo_sbe::types::SecurityType, ::bovespa_mbo_sbe::types::SecurityType, ::sbepp::endian::little>(
            *this, 0, 45);
    }

    template<
        typename Cursor,
        typename = ::sbepp::detail::enable_if_cursor_writeable_t<
            Byte, ::sbepp::detail::cursor_byte_type_t<Cursor>>>
    SBEPP_CPP20_CONSTEXPR void securityType(
        ::bovespa_mbo_sbe::types::SecurityType v, Cursor&& c) const noexcept
    {
        return c.template set_value<::sbepp::endian::little>(
            *this, 0, 45, v);
    }

    template<
        typename Cursor,
        typename = ::sbepp::detail::enable_if_cursor_compatible_t<
            Byte, ::sbepp::detail::cursor_byte_type_t<Cursor>>>
    SBEPP_CPP20_CONSTEXPR auto
        securitySubType(Cursor&& c) const noexcept
            -> ::sbepp::detail::cursor_result_type_t<Cursor, ::bovespa_mbo_sbe::types::UInt16>
    {
        return c.template get_value<::bovespa_mbo_sbe::types::UInt16, ::std::uint16_t, ::sbepp::endian::little>(
            *this, 0, 46);
    }

    template<
        typename Cursor,
        typename = ::sbepp::detail::enable_if_cursor_writeable_t<
            Byte, ::sbepp::detail::cursor_byte_type_t<Cursor>>>
    SBEPP_CPP20_CONSTEXPR void securitySubType(
        ::bovespa_mbo_sbe::types::UInt16 v, Cursor&& c) const noexcept
    {
        return c.template set_value<::sbepp::endian::little>(
            *this, 0, 46, v.value());
    }

    template<
        typename Cursor,
        typename = ::sbepp::detail::enable_if_cursor_compatible_t<
            Byte, ::sbepp::detail::cursor_byte_type_t<Cursor>>>
    SBEPP_CPP20_CONSTEXPR auto
        totNoRelatedSym(Cursor&& c) const noexcept
            -> ::sbepp::detail::cursor_result_type_t<Cursor, ::bovespa_mbo_sbe::types::UInt32>
    {
        return c.template get_value<::bovespa_mbo_sbe::types::UInt32, ::std::uint32_t, ::sbepp::endian::little>(
            *this, 0, 48);
    }

    template<
        typename Cursor,
        typename = ::sbepp::detail::enable_if_cursor_writeable_t<
            Byte, ::sbepp::detail::cursor_byte_type_t<Cursor>>>
    SBEPP_CPP20_CONSTEXPR void totNoRelatedSym(
        ::bovespa_mbo_sbe::types::UInt32 v, Cursor&& c) const noexcept
    {
        return c.template set_value<::sbepp::endian::little>(
            *this, 0, 48, v.value());
    }

    template<
        typename Cursor,
        typename = ::sbepp::detail::enable_if_cursor_compatible_t<
            Byte, ::sbepp::detail::cursor_byte_type_t<Cursor>>>
    SBEPP_CPP20_CONSTEXPR auto minPriceIncrement(Cursor&& c) const noexcept
        -> ::sbepp::detail::cursor_result_type_t<Cursor, 
            ::bovespa_mbo_sbe::types::PriceOptional<::sbepp::detail::cursor_byte_type_t<Cursor>>>
    {
        return c.template get_static_field_view<::bovespa_mbo_sbe::types::PriceOptional<::sbepp::detail::cursor_byte_type_t<Cursor>>>(
            *this, 0, 52);
    }

    template<
        typename Cursor,
        typename = ::sbepp::detail::enable_if_cursor_compatible_t<
            Byte, ::sbepp::detail::cursor_byte_type_t<Cursor>>>
    SBEPP_CPP20_CONSTEXPR auto strikePrice(Cursor&& c) const noexcept
        -> ::sbepp::detail::cursor_result_type_t<Cursor, 
            ::bovespa_mbo_sbe::types::PriceOptional<::sbepp::detail::cursor_byte_type_t<Cursor>>>
    {
        return c.template get_static_field_view<::bovespa_mbo_sbe::types::PriceOptional<::sbepp::detail::cursor_byte_type_t<Cursor>>>(
            *this, 0, 60);
    }

    template<
        typename Cursor,
        typename = ::sbepp::detail::enable_if_cursor_compatible_t<
            Byte, ::sbepp::detail::cursor_byte_type_t<Cursor>>>
    SBEPP_CPP20_CONSTEXPR auto contractMultiplier(Cursor&& c) const noexcept
        -> ::sbepp::detail::cursor_result_type_t<Cursor, 
            ::bovespa_mbo_sbe::types::Fixed8<::sbepp::detail::cursor_byte_type_t<Cursor>>>
    {
        return c.template get_static_field_view<::bovespa_mbo_sbe::types::Fixed8<::sbepp::detail::cursor_byte_type_t<Cursor>>>(
            *this, 0, 68);
    }

    template<
        typename Cursor,
        typename = ::sbepp::detail::enable_if_cursor_compatible_t<
            Byte, ::sbepp::detail::cursor_byte_type_t<Cursor>>>
    SBEPP_CPP20_CONSTEXPR auto priceDivisor(Cursor&& c) const noexcept
        -> ::sbepp::detail::cursor_result_type_t<Cursor, 
            ::bovespa_mbo_sbe::types::Fixed8<::sbepp::detail::cursor_byte_type_t<Cursor>>>
    {
        return c.template get_static_field_view<::bovespa_mbo_sbe::types::Fixed8<::sbepp::detail::cursor_byte_type_t<Cursor>>>(
            *this, 0, 76);
    }

    template<
        typename Cursor,
        typename = ::sbepp::detail::enable_if_cursor_compatible_t<
            Byte, ::sbepp::detail::cursor_byte_type_t<Cursor>>>
    SBEPP_CPP20_CONSTEXPR auto securityValidityTimestamp(Cursor&& c) const noexcept
        -> ::sbepp::detail::cursor_result_type_t<Cursor, 
            ::bovespa_mbo_sbe::types::UTCTimestampSeconds<::sbepp::detail::cursor_byte_type_t<Cursor>>>
    {
        return c.template get_static_field_view<::bovespa_mbo_sbe::types::UTCTimestampSeconds<::sbepp::detail::cursor_byte_type_t<Cursor>>>(
            *this, 0, 84);
    }

    template<
        typename Cursor,
        typename = ::sbepp::detail::enable_if_cursor_compatible_t<
            Byte, ::sbepp::detail::cursor_byte_type_t<Cursor>>>
    SBEPP_CPP20_CONSTEXPR auto
        noSharesIssued(Cursor&& c) const noexcept
            -> ::sbepp::detail::cursor_result_type_t<Cursor, ::bovespa_mbo_sbe::types::UInt64NULL>
    {
        return c.template get_value<::bovespa_mbo_sbe::types::UInt64NULL, ::std::uint64_t, ::sbepp::endian::little>(
            *this, 0, 92);
    }

    template<
        typename Cursor,
        typename = ::sbepp::detail::enable_if_cursor_writeable_t<
            Byte, ::sbepp::detail::cursor_byte_type_t<Cursor>>>
    SBEPP_CPP20_CONSTEXPR void noSharesIssued(
        ::bovespa_mbo_sbe::types::UInt64NULL v, Cursor&& c) const noexcept
    {
        return c.template set_value<::sbepp::endian::little>(
            *this, 0, 92, v.value());
    }

    template<
        typename Cursor,
        typename = ::sbepp::detail::enable_if_cursor_compatible_t<
            Byte, ::sbepp::detail::cursor_byte_type_t<Cursor>>>
    SBEPP_CPP20_CONSTEXPR auto
        clearingHouseID(Cursor&& c) const noexcept
            -> ::sbepp::detail::cursor_result_type_t<Cursor, ::bovespa_mbo_sbe::types::ClearingHouseID>
    {
        return c.template get_value<::bovespa_mbo_sbe::types::ClearingHouseID, ::std::uint64_t, ::sbepp::endian::little>(
            *this, 0, 100);
    }

    template<
        typename Cursor,
        typename = ::sbepp::detail::enable_if_cursor_writeable_t<
            Byte, ::sbepp::detail::cursor_byte_type_t<Cursor>>>
    SBEPP_CPP20_CONSTEXPR void clearingHouseID(
        ::bovespa_mbo_sbe::types::ClearingHouseID v, Cursor&& c) const noexcept
    {
        return c.template set_value<::sbepp::endian::little>(
            *this, 0, 100, v.value());
    }

    template<
        typename Cursor,
        typename = ::sbepp::detail::enable_if_cursor_compatible_t<
            Byte, ::sbepp::detail::cursor_byte_type_t<Cursor>>>
    SBEPP_CPP20_CONSTEXPR auto
        minOrderQty(Cursor&& c) const noexcept
            -> ::sbepp::detail::cursor_result_type_t<Cursor, ::bovespa_mbo_sbe::types::QuantityOptional>
    {
        return c.template get_value<::bovespa_mbo_sbe::types::QuantityOptional, ::std::int64_t, ::sbepp::endian::little>(
            *this, 0, 108);
    }

    template<
        typename Cursor,
        typename = ::sbepp::detail::enable_if_cursor_writeable_t<
            Byte, ::sbepp::detail::cursor_byte_type_t<Cursor>>>
    SBEPP_CPP20_CONSTEXPR void minOrderQty(
        ::bovespa_mbo_sbe::types::QuantityOptional v, Cursor&& c) const noexcept
    {
        return c.template set_value<::sbepp::endian::little>(
            *this, 0, 108, v.value());
    }

    template<
        typename Cursor,
        typename = ::sbepp::detail::enable_if_cursor_compatible_t<
            Byte, ::sbepp::detail::cursor_byte_type_t<Cursor>>>
    SBEPP_CPP20_CONSTEXPR auto
        maxOrderQty(Cursor&& c) const noexcept
            -> ::sbepp::detail::cursor_result_type_t<Cursor, ::bovespa_mbo_sbe::types::QuantityOptional>
    {
        return c.template get_value<::bovespa_mbo_sbe::types::QuantityOptional, ::std::int64_t, ::sbepp::endian::little>(
            *this, 0, 116);
    }

    template<
        typename Cursor,
        typename = ::sbepp::detail::enable_if_cursor_writeable_t<
            Byte, ::sbepp::detail::cursor_byte_type_t<Cursor>>>
    SBEPP_CPP20_CONSTEXPR void maxOrderQty(
        ::bovespa_mbo_sbe::types::QuantityOptional v, Cursor&& c) const noexcept
    {
        return c.template set_value<::sbepp::endian::little>(
            *this, 0, 116, v.value());
    }

    template<
        typename Cursor,
        typename = ::sbepp::detail::enable_if_cursor_compatible_t<
            Byte, ::sbepp::detail::cursor_byte_type_t<Cursor>>>
    SBEPP_CPP20_CONSTEXPR auto
        minLotSize(Cursor&& c) const noexcept
            -> ::sbepp::detail::cursor_result_type_t<Cursor, ::bovespa_mbo_sbe::types::QuantityOptional>
    {
        return c.template get_value<::bovespa_mbo_sbe::types::QuantityOptional, ::std::int64_t, ::sbepp::endian::little>(
            *this, 0, 124);
    }

    template<
        typename Cursor,
        typename = ::sbepp::detail::enable_if_cursor_writeable_t<
            Byte, ::sbepp::detail::cursor_byte_type_t<Cursor>>>
    SBEPP_CPP20_CONSTEXPR void minLotSize(
        ::bovespa_mbo_sbe::types::QuantityOptional v, Cursor&& c) const noexcept
    {
        return c.template set_value<::sbepp::endian::little>(
            *this, 0, 124, v.value());
    }

    template<
        typename Cursor,
        typename = ::sbepp::detail::enable_if_cursor_compatible_t<
            Byte, ::sbepp::detail::cursor_byte_type_t<Cursor>>>
    SBEPP_CPP20_CONSTEXPR auto
        minTradeVol(Cursor&& c) const noexcept
            -> ::sbepp::detail::cursor_result_type_t<Cursor, ::bovespa_mbo_sbe::types::QuantityOptional>
    {
        return c.template get_value<::bovespa_mbo_sbe::types::QuantityOptional, ::std::int64_t, ::sbepp::endian::little>(
            *this, 0, 132);
    }

    template<
        typename Cursor,
        typename = ::sbepp::detail::enable_if_cursor_writeable_t<
            Byte, ::sbepp::detail::cursor_byte_type_t<Cursor>>>
    SBEPP_CPP20_CONSTEXPR void minTradeVol(
        ::bovespa_mbo_sbe::types::QuantityOptional v, Cursor&& c) const noexcept
    {
        return c.template set_value<::sbepp::endian::little>(
            *this, 0, 132, v.value());
    }

    template<
        typename Cursor,
        typename = ::sbepp::detail::enable_if_cursor_compatible_t<
            Byte, ::sbepp::detail::cursor_byte_type_t<Cursor>>>
    SBEPP_CPP20_CONSTEXPR auto
        corporateActionEventId(Cursor&& c) const noexcept
            -> ::sbepp::detail::cursor_result_type_t<Cursor, ::bovespa_mbo_sbe::types::UInt32NULL>
    {
        return c.template get_value<::bovespa_mbo_sbe::types::UInt32NULL, ::std::uint32_t, ::sbepp::endian::little>(
            *this, 0, 140);
    }

    template<
        typename Cursor,
        typename = ::sbepp::detail::enable_if_cursor_writeable_t<
            Byte, ::sbepp::detail::cursor_byte_type_t<Cursor>>>
    SBEPP_CPP20_CONSTEXPR void corporateActionEventId(
        ::bovespa_mbo_sbe::types::UInt32NULL v, Cursor&& c) const noexcept
    {
        return c.template set_value<::sbepp::endian::little>(
            *this, 0, 140, v.value());
    }

    template<
        typename Cursor,
        typename = ::sbepp::detail::enable_if_cursor_compatible_t<
            Byte, ::sbepp::detail::cursor_byte_type_t<Cursor>>>
    SBEPP_CPP20_CONSTEXPR auto
        issueDate(Cursor&& c) const noexcept
            -> ::sbepp::detail::cursor_result_type_t<Cursor, ::bovespa_mbo_sbe::types::LocalMktDate32>
    {
        return c.template get_value<::bovespa_mbo_sbe::types::LocalMktDate32, ::std::int32_t, ::sbepp::endian::little>(
            *this, 0, 144);
    }

    template<
        typename Cursor,
        typename = ::sbepp::detail::enable_if_cursor_writeable_t<
            Byte, ::sbepp::detail::cursor_byte_type_t<Cursor>>>
    SBEPP_CPP20_CONSTEXPR void issueDate(
        ::bovespa_mbo_sbe::types::LocalMktDate32 v, Cursor&& c) const noexcept
    {
        return c.template set_value<::sbepp::endian::little>(
            *this, 0, 144, v.value());
    }

    template<
        typename Cursor,
        typename = ::sbepp::detail::enable_if_cursor_compatible_t<
            Byte, ::sbepp::detail::cursor_byte_type_t<Cursor>>>
    SBEPP_CPP20_CONSTEXPR auto
        maturityDate(Cursor&& c) const noexcept
            -> ::sbepp::detail::cursor_result_type_t<Cursor, ::bovespa_mbo_sbe::types::LocalMktDate32Optional>
    {
        return c.template get_value<::bovespa_mbo_sbe::types::LocalMktDate32Optional, ::std::int32_t, ::sbepp::endian::little>(
            *this, 0, 148);
    }

    template<
        typename Cursor,
        typename = ::sbepp::detail::enable_if_cursor_writeable_t<
            Byte, ::sbepp::detail::cursor_byte_type_t<Cursor>>>
    SBEPP_CPP20_CONSTEXPR void maturityDate(
        ::bovespa_mbo_sbe::types::LocalMktDate32Optional v, Cursor&& c) const noexcept
    {
        return c.template set_value<::sbepp::endian::little>(
            *this, 0, 148, v.value());
    }

    template<
        typename Cursor,
        typename = ::sbepp::detail::enable_if_cursor_compatible_t<
            Byte, ::sbepp::detail::cursor_byte_type_t<Cursor>>>
    SBEPP_CPP20_CONSTEXPR auto
        countryOfIssue(Cursor&& c) const noexcept
        -> ::sbepp::detail::cursor_result_type_t<Cursor, ::bovespa_mbo_sbe::types::CountryCode<
            ::sbepp::detail::cursor_byte_type_t<Cursor>>>
    {
        return c.template get_static_field_view<::bovespa_mbo_sbe::types::CountryCode<
            ::sbepp::detail::cursor_byte_type_t<Cursor>>>(
                *this, 0, 152);
    }

    template<
        typename Cursor,
        typename = ::sbepp::detail::enable_if_cursor_compatible_t<
            Byte, ::sbepp::detail::cursor_byte_type_t<Cursor>>>
    SBEPP_CPP20_CONSTEXPR auto
        startDate(Cursor&& c) const noexcept
            -> ::sbepp::detail::cursor_result_type_t<Cursor, ::bovespa_mbo_sbe::types::LocalMktDate32Optional>
    {
        return c.template get_value<::bovespa_mbo_sbe::types::LocalMktDate32Optional, ::std::int32_t, ::sbepp::endian::little>(
            *this, 0, 154);
    }

    template<
        typename Cursor,
        typename = ::sbepp::detail::enable_if_cursor_writeable_t<
            Byte, ::sbepp::detail::cursor_byte_type_t<Cursor>>>
    SBEPP_CPP20_CONSTEXPR void startDate(
        ::bovespa_mbo_sbe::types::LocalMktDate32Optional v, Cursor&& c) const noexcept
    {
        return c.template set_value<::sbepp::endian::little>(
            *this, 0, 154, v.value());
    }

    template<
        typename Cursor,
        typename = ::sbepp::detail::enable_if_cursor_compatible_t<
            Byte, ::sbepp::detail::cursor_byte_type_t<Cursor>>>
    SBEPP_CPP20_CONSTEXPR auto
        endDate(Cursor&& c) const noexcept
            -> ::sbepp::detail::cursor_result_type_t<Cursor, ::bovespa_mbo_sbe::types::LocalMktDate32Optional>
    {
        return c.template get_value<::bovespa_mbo_sbe::types::LocalMktDate32Optional, ::std::int32_t, ::sbepp::endian::little>(
            *this, 0, 158);
    }

    template<
        typename Cursor,
        typename = ::sbepp::detail::enable_if_cursor_writeable_t<
            Byte, ::sbepp::detail::cursor_byte_type_t<Cursor>>>
    SBEPP_CPP20_CONSTEXPR void endDate(
        ::bovespa_mbo_sbe::types::LocalMktDate32Optional v, Cursor&& c) const noexcept
    {
        return c.template set_value<::sbepp::endian::little>(
            *this, 0, 158, v.value());
    }

    template<
        typename Cursor,
        typename = ::sbepp::detail::enable_if_cursor_compatible_t<
            Byte, ::sbepp::detail::cursor_byte_type_t<Cursor>>>
    SBEPP_CPP20_CONSTEXPR auto
        settlType(Cursor&& c) const noexcept
            -> ::sbepp::detail::cursor_result_type_t<Cursor, ::bovespa_mbo_sbe::types::SettlType>
    {
        return c.template get_value<::bovespa_mbo_sbe::types::SettlType, ::std::uint16_t, ::sbepp::endian::little>(
            *this, 0, 162);
    }

    template<
        typename Cursor,
        typename = ::sbepp::detail::enable_if_cursor_writeable_t<
            Byte, ::sbepp::detail::cursor_byte_type_t<Cursor>>>
    SBEPP_CPP20_CONSTEXPR void settlType(
        ::bovespa_mbo_sbe::types::SettlType v, Cursor&& c) const noexcept
    {
        return c.template set_value<::sbepp::endian::little>(
            *this, 0, 162, v.value());
    }

    template<
        typename Cursor,
        typename = ::sbepp::detail::enable_if_cursor_compatible_t<
            Byte, ::sbepp::detail::cursor_byte_type_t<Cursor>>>
    SBEPP_CPP20_CONSTEXPR auto
        settlDate(Cursor&& c) const noexcept
            -> ::sbepp::detail::cursor_result_type_t<Cursor, ::bovespa_mbo_sbe::types::LocalMktDate32Optional>
    {
        return c.template get_value<::bovespa_mbo_sbe::types::LocalMktDate32Optional, ::std::int32_t, ::sbepp::endian::little>(
            *this, 0, 164);
    }

    template<
        typename Cursor,
        typename = ::sbepp::detail::enable_if_cursor_writeable_t<
            Byte, ::sbepp::detail::cursor_byte_type_t<Cursor>>>
    SBEPP_CPP20_CONSTEXPR void settlDate(
        ::bovespa_mbo_sbe::types::LocalMktDate32Optional v, Cursor&& c) const noexcept
    {
        return c.template set_value<::sbepp::endian::little>(
            *this, 0, 164, v.value());
    }

    template<
        typename Cursor,
        typename = ::sbepp::detail::enable_if_cursor_compatible_t<
            Byte, ::sbepp::detail::cursor_byte_type_t<Cursor>>>
    SBEPP_CPP20_CONSTEXPR auto
        datedDate(Cursor&& c) const noexcept
            -> ::sbepp::detail::cursor_result_type_t<Cursor, ::bovespa_mbo_sbe::types::LocalMktDate32Optional>
    {
        return c.template get_value<::bovespa_mbo_sbe::types::LocalMktDate32Optional, ::std::int32_t, ::sbepp::endian::little>(
            *this, 0, 168);
    }

    template<
        typename Cursor,
        typename = ::sbepp::detail::enable_if_cursor_writeable_t<
            Byte, ::sbepp::detail::cursor_byte_type_t<Cursor>>>
    SBEPP_CPP20_CONSTEXPR void datedDate(
        ::bovespa_mbo_sbe::types::LocalMktDate32Optional v, Cursor&& c) const noexcept
    {
        return c.template set_value<::sbepp::endian::little>(
            *this, 0, 168, v.value());
    }

    template<
        typename Cursor,
        typename = ::sbepp::detail::enable_if_cursor_compatible_t<
            Byte, ::sbepp::detail::cursor_byte_type_t<Cursor>>>
    SBEPP_CPP20_CONSTEXPR auto
        isinNumber(Cursor&& c) const noexcept
        -> ::sbepp::detail::cursor_result_type_t<Cursor, ::bovespa_mbo_sbe::types::ISINNumber<
            ::sbepp::detail::cursor_byte_type_t<Cursor>>>
    {
        return c.template get_static_field_view<::bovespa_mbo_sbe::types::ISINNumber<
            ::sbepp::detail::cursor_byte_type_t<Cursor>>>(
                *this, 0, 172);
    }

    template<
        typename Cursor,
        typename = ::sbepp::detail::enable_if_cursor_compatible_t<
            Byte, ::sbepp::detail::cursor_byte_type_t<Cursor>>>
    SBEPP_CPP20_CONSTEXPR auto
        asset(Cursor&& c) const noexcept
        -> ::sbepp::detail::cursor_result_type_t<Cursor, ::bovespa_mbo_sbe::types::Asset<
            ::sbepp::detail::cursor_byte_type_t<Cursor>>>
    {
        return c.template get_static_field_view<::bovespa_mbo_sbe::types::Asset<
            ::sbepp::detail::cursor_byte_type_t<Cursor>>>(
                *this, 0, 184);
    }

    template<
        typename Cursor,
        typename = ::sbepp::detail::enable_if_cursor_compatible_t<
            Byte, ::sbepp::detail::cursor_byte_type_t<Cursor>>>
    SBEPP_CPP20_CONSTEXPR auto
        cfiCode(Cursor&& c) const noexcept
        -> ::sbepp::detail::cursor_result_type_t<Cursor, ::bovespa_mbo_sbe::types::CFICode<
            ::sbepp::detail::cursor_byte_type_t<Cursor>>>
    {
        return c.template get_static_field_view<::bovespa_mbo_sbe::types::CFICode<
            ::sbepp::detail::cursor_byte_type_t<Cursor>>>(
                *this, 0, 190);
    }

    template<
        typename Cursor,
        typename = ::sbepp::detail::enable_if_cursor_compatible_t<
            Byte, ::sbepp::detail::cursor_byte_type_t<Cursor>>>
    SBEPP_CPP20_CONSTEXPR auto maturityMonthYear(Cursor&& c) const noexcept
        -> ::sbepp::detail::cursor_result_type_t<Cursor, 
            ::bovespa_mbo_sbe::types::MaturityMonthYear<::sbepp::detail::cursor_byte_type_t<Cursor>>>
    {
        return c.template get_static_field_view<::bovespa_mbo_sbe::types::MaturityMonthYear<::sbepp::detail::cursor_byte_type_t<Cursor>>>(
            *this, 0, 196);
    }

    template<
        typename Cursor,
        typename = ::sbepp::detail::enable_if_cursor_compatible_t<
            Byte, ::sbepp::detail::cursor_byte_type_t<Cursor>>>
    SBEPP_CPP20_CONSTEXPR auto contractSettlMonth(Cursor&& c) const noexcept
        -> ::sbepp::detail::cursor_result_type_t<Cursor, 
            ::bovespa_mbo_sbe::types::MaturityMonthYear<::sbepp::detail::cursor_byte_type_t<Cursor>>>
    {
        return c.template get_static_field_view<::bovespa_mbo_sbe::types::MaturityMonthYear<::sbepp::detail::cursor_byte_type_t<Cursor>>>(
            *this, 0, 201);
    }

    template<
        typename Cursor,
        typename = ::sbepp::detail::enable_if_cursor_compatible_t<
            Byte, ::sbepp::detail::cursor_byte_type_t<Cursor>>>
    SBEPP_CPP20_CONSTEXPR auto
        currency(Cursor&& c) const noexcept
        -> ::sbepp::detail::cursor_result_type_t<Cursor, ::bovespa_mbo_sbe::types::Currency<
            ::sbepp::detail::cursor_byte_type_t<Cursor>>>
    {
        return c.template get_static_field_view<::bovespa_mbo_sbe::types::Currency<
            ::sbepp::detail::cursor_byte_type_t<Cursor>>>(
                *this, 0, 206);
    }

    template<
        typename Cursor,
        typename = ::sbepp::detail::enable_if_cursor_compatible_t<
            Byte, ::sbepp::detail::cursor_byte_type_t<Cursor>>>
    SBEPP_CPP20_CONSTEXPR auto
        strikeCurrency(Cursor&& c) const noexcept
        -> ::sbepp::detail::cursor_result_type_t<Cursor, ::bovespa_mbo_sbe::types::Currency<
            ::sbepp::detail::cursor_byte_type_t<Cursor>>>
    {
        return c.template get_static_field_view<::bovespa_mbo_sbe::types::Currency<
            ::sbepp::detail::cursor_byte_type_t<Cursor>>>(
                *this, 0, 209);
    }

    template<
        typename Cursor,
        typename = ::sbepp::detail::enable_if_cursor_compatible_t<
            Byte, ::sbepp::detail::cursor_byte_type_t<Cursor>>>
    SBEPP_CPP20_CONSTEXPR auto
        settlCurrency(Cursor&& c) const noexcept
        -> ::sbepp::detail::cursor_result_type_t<Cursor, ::bovespa_mbo_sbe::types::Currency<
            ::sbepp::detail::cursor_byte_type_t<Cursor>>>
    {
        return c.template get_static_field_view<::bovespa_mbo_sbe::types::Currency<
            ::sbepp::detail::cursor_byte_type_t<Cursor>>>(
                *this, 0, 212);
    }

    template<
        typename Cursor,
        typename = ::sbepp::detail::enable_if_cursor_compatible_t<
            Byte, ::sbepp::detail::cursor_byte_type_t<Cursor>>>
    SBEPP_CPP20_CONSTEXPR auto
        securityStrategyType(Cursor&& c) const noexcept
        -> ::sbepp::detail::cursor_result_type_t<Cursor, ::bovespa_mbo_sbe::types::SecurityStrategyType<
            ::sbepp::detail::cursor_byte_type_t<Cursor>>>
    {
        return c.template get_static_field_view<::bovespa_mbo_sbe::types::SecurityStrategyType<
            ::sbepp::detail::cursor_byte_type_t<Cursor>>>(
                *this, 0, 215);
    }

    template<
        typename Cursor,
        typename = ::sbepp::detail::enable_if_cursor_compatible_t<
            Byte, ::sbepp::detail::cursor_byte_type_t<Cursor>>>
    SBEPP_CPP20_CONSTEXPR auto
        lotType(Cursor&& c) const noexcept
        -> ::sbepp::detail::cursor_result_type_t<Cursor, ::bovespa_mbo_sbe::types::LotType>
    {
        return c.template get_value<::bovespa_mbo_sbe::types::LotType, ::bovespa_mbo_sbe::types::LotType, ::sbepp::endian::little>(
            *this, 0, 218);
    }

    template<
        typename Cursor,
        typename = ::sbepp::detail::enable_if_cursor_writeable_t<
            Byte, ::sbepp::detail::cursor_byte_type_t<Cursor>>>
    SBEPP_CPP20_CONSTEXPR void lotType(
        ::bovespa_mbo_sbe::types::LotType v, Cursor&& c) const noexcept
    {
        return c.template set_value<::sbepp::endian::little>(
            *this, 0, 218, v);
    }

    template<
        typename Cursor,
        typename = ::sbepp::detail::enable_if_cursor_compatible_t<
            Byte, ::sbepp::detail::cursor_byte_type_t<Cursor>>>
    SBEPP_CPP20_CONSTEXPR auto
        tickSizeDenominator(Cursor&& c) const noexcept
            -> ::sbepp::detail::cursor_result_type_t<Cursor, ::bovespa_mbo_sbe::types::UInt8>
    {
        return c.template get_value<::bovespa_mbo_sbe::types::UInt8, ::std::uint8_t, ::sbepp::endian::little>(
            *this, 0, 219);
    }

    template<
        typename Cursor,
        typename = ::sbepp::detail::enable_if_cursor_writeable_t<
            Byte, ::sbepp::detail::cursor_byte_type_t<Cursor>>>
    SBEPP_CPP20_CONSTEXPR void tickSizeDenominator(
        ::bovespa_mbo_sbe::types::UInt8 v, Cursor&& c) const noexcept
    {
        return c.template set_value<::sbepp::endian::little>(
            *this, 0, 219, v.value());
    }

    template<
        typename Cursor,
        typename = ::sbepp::detail::enable_if_cursor_compatible_t<
            Byte, ::sbepp::detail::cursor_byte_type_t<Cursor>>>
    SBEPP_CPP20_CONSTEXPR auto
        product(Cursor&& c) const noexcept
        -> ::sbepp::detail::cursor_result_type_t<Cursor, ::bovespa_mbo_sbe::types::Product>
    {
        return c.template get_value<::bovespa_mbo_sbe::types::Product, ::bovespa_mbo_sbe::types::Product, ::sbepp::endian::little>(
            *this, 0, 220);
    }

    template<
        typename Cursor,
        typename = ::sbepp::detail::enable_if_cursor_writeable_t<
            Byte, ::sbepp::detail::cursor_byte_type_t<Cursor>>>
    SBEPP_CPP20_CONSTEXPR void product(
        ::bovespa_mbo_sbe::types::Product v, Cursor&& c) const noexcept
    {
        return c.template set_value<::sbepp::endian::little>(
            *this, 0, 220, v);
    }

    template<
        typename Cursor,
        typename = ::sbepp::detail::enable_if_cursor_compatible_t<
            Byte, ::sbepp::detail::cursor_byte_type_t<Cursor>>>
    SBEPP_CPP20_CONSTEXPR auto
        exerciseStyle(Cursor&& c) const noexcept
        -> ::sbepp::detail::cursor_result_type_t<Cursor, ::bovespa_mbo_sbe::types::ExerciseStyle>
    {
        return c.template get_value<::bovespa_mbo_sbe::types::ExerciseStyle, ::bovespa_mbo_sbe::types::ExerciseStyle, ::sbepp::endian::little>(
            *this, 0, 221);
    }

    template<
        typename Cursor,
        typename = ::sbepp::detail::enable_if_cursor_writeable_t<
            Byte, ::sbepp::detail::cursor_byte_type_t<Cursor>>>
    SBEPP_CPP20_CONSTEXPR void exerciseStyle(
        ::bovespa_mbo_sbe::types::ExerciseStyle v, Cursor&& c) const noexcept
    {
        return c.template set_value<::sbepp::endian::little>(
            *this, 0, 221, v);
    }

    template<
        typename Cursor,
        typename = ::sbepp::detail::enable_if_cursor_compatible_t<
            Byte, ::sbepp::detail::cursor_byte_type_t<Cursor>>>
    SBEPP_CPP20_CONSTEXPR auto
        putOrCall(Cursor&& c) const noexcept
        -> ::sbepp::detail::cursor_result_type_t<Cursor, ::bovespa_mbo_sbe::types::PutOrCall>
    {
        return c.template get_value<::bovespa_mbo_sbe::types::PutOrCall, ::bovespa_mbo_sbe::types::PutOrCall, ::sbepp::endian::little>(
            *this, 0, 222);
    }

    template<
        typename Cursor,
        typename = ::sbepp::detail::enable_if_cursor_writeable_t<
            Byte, ::sbepp::detail::cursor_byte_type_t<Cursor>>>
    SBEPP_CPP20_CONSTEXPR void putOrCall(
        ::bovespa_mbo_sbe::types::PutOrCall v, Cursor&& c) const noexcept
    {
        return c.template set_value<::sbepp::endian::little>(
            *this, 0, 222, v);
    }

    template<
        typename Cursor,
        typename = ::sbepp::detail::enable_if_cursor_compatible_t<
            Byte, ::sbepp::detail::cursor_byte_type_t<Cursor>>>
    SBEPP_CPP20_CONSTEXPR auto
        priceType(Cursor&& c) const noexcept
        -> ::sbepp::detail::cursor_result_type_t<Cursor, ::bovespa_mbo_sbe::types::PriceType>
    {
        return c.template get_value<::bovespa_mbo_sbe::types::PriceType, ::bovespa_mbo_sbe::types::PriceType, ::sbepp::endian::little>(
            *this, 0, 223);
    }

    template<
        typename Cursor,
        typename = ::sbepp::detail::enable_if_cursor_writeable_t<
            Byte, ::sbepp::detail::cursor_byte_type_t<Cursor>>>
    SBEPP_CPP20_CONSTEXPR void priceType(
        ::bovespa_mbo_sbe::types::PriceType v, Cursor&& c) const noexcept
    {
        return c.template set_value<::sbepp::endian::little>(
            *this, 0, 223, v);
    }

    template<
        typename Cursor,
        typename = ::sbepp::detail::enable_if_cursor_compatible_t<
            Byte, ::sbepp::detail::cursor_byte_type_t<Cursor>>>
    SBEPP_CPP20_CONSTEXPR auto
        marketSegmentID(Cursor&& c) const noexcept
            -> ::sbepp::detail::cursor_result_type_t<Cursor, ::bovespa_mbo_sbe::types::MarketSegmentID>
    {
        return c.template get_value<::bovespa_mbo_sbe::types::MarketSegmentID, ::std::uint8_t, ::sbepp::endian::little>(
            *this, 0, 224);
    }

    template<
        typename Cursor,
        typename = ::sbepp::detail::enable_if_cursor_writeable_t<
            Byte, ::sbepp::detail::cursor_byte_type_t<Cursor>>>
    SBEPP_CPP20_CONSTEXPR void marketSegmentID(
        ::bovespa_mbo_sbe::types::MarketSegmentID v, Cursor&& c) const noexcept
    {
        return c.template set_value<::sbepp::endian::little>(
            *this, 0, 224, v.value());
    }

    template<
        typename Cursor,
        typename = ::sbepp::detail::enable_if_cursor_compatible_t<
            Byte, ::sbepp::detail::cursor_byte_type_t<Cursor>>>
    SBEPP_CPP20_CONSTEXPR auto
        governanceIndicator(Cursor&& c) const noexcept
        -> ::sbepp::detail::cursor_result_type_t<Cursor, ::bovespa_mbo_sbe::types::GovernanceIndicator>
    {
        return c.template get_value<::bovespa_mbo_sbe::types::GovernanceIndicator, ::bovespa_mbo_sbe::types::GovernanceIndicator, ::sbepp::endian::little>(
            *this, 0, 225);
    }

    template<
        typename Cursor,
        typename = ::sbepp::detail::enable_if_cursor_writeable_t<
            Byte, ::sbepp::detail::cursor_byte_type_t<Cursor>>>
    SBEPP_CPP20_CONSTEXPR void governanceIndicator(
        ::bovespa_mbo_sbe::types::GovernanceIndicator v, Cursor&& c) const noexcept
    {
        return c.template set_value<::sbepp::endian::little>(
            *this, 0, 225, v);
    }

    template<
        typename Cursor,
        typename = ::sbepp::detail::enable_if_cursor_compatible_t<
            Byte, ::sbepp::detail::cursor_byte_type_t<Cursor>>>
    SBEPP_CPP20_CONSTEXPR auto
        securityMatchType(Cursor&& c) const noexcept
        -> ::sbepp::detail::cursor_result_type_t<Cursor, ::bovespa_mbo_sbe::types::SecurityMatchType>
    {
        return c.template get_value<::bovespa_mbo_sbe::types::SecurityMatchType, ::bovespa_mbo_sbe::types::SecurityMatchType, ::sbepp::endian::little>(
            *this, 0, 226);
    }

    template<
        typename Cursor,
        typename = ::sbepp::detail::enable_if_cursor_writeable_t<
            Byte, ::sbepp::detail::cursor_byte_type_t<Cursor>>>
    SBEPP_CPP20_CONSTEXPR void securityMatchType(
        ::bovespa_mbo_sbe::types::SecurityMatchType v, Cursor&& c) const noexcept
    {
        return c.template set_value<::sbepp::endian::little>(
            *this, 0, 226, v);
    }

    template<
        typename Cursor,
        typename = ::sbepp::detail::enable_if_cursor_compatible_t<
            Byte, ::sbepp::detail::cursor_byte_type_t<Cursor>>>
    SBEPP_CPP20_CONSTEXPR auto
        lastFragment(Cursor&& c) const noexcept
        -> ::sbepp::detail::cursor_result_type_t<Cursor, ::bovespa_mbo_sbe::types::Boolean>
    {
        return c.template get_value<::bovespa_mbo_sbe::types::Boolean, ::bovespa_mbo_sbe::types::Boolean, ::sbepp::endian::little>(
            *this, 0, 227);
    }

    template<
        typename Cursor,
        typename = ::sbepp::detail::enable_if_cursor_writeable_t<
            Byte, ::sbepp::detail::cursor_byte_type_t<Cursor>>>
    SBEPP_CPP20_CONSTEXPR void lastFragment(
        ::bovespa_mbo_sbe::types::Boolean v, Cursor&& c) const noexcept
    {
        return c.template set_value<::sbepp::endian::little>(
            *this, 0, 227, v);
    }

    template<
        typename Cursor,
        typename = ::sbepp::detail::enable_if_cursor_compatible_t<
            Byte, ::sbepp::detail::cursor_byte_type_t<Cursor>>>
    SBEPP_CPP20_CONSTEXPR auto
        multiLegModel(Cursor&& c) const noexcept
        -> ::sbepp::detail::cursor_result_type_t<Cursor, ::bovespa_mbo_sbe::types::MultiLegModel>
    {
        return c.template get_value<::bovespa_mbo_sbe::types::MultiLegModel, ::bovespa_mbo_sbe::types::MultiLegModel, ::sbepp::endian::little>(
            *this, 0, 228);
    }

    template<
        typename Cursor,
        typename = ::sbepp::detail::enable_if_cursor_writeable_t<
            Byte, ::sbepp::detail::cursor_byte_type_t<Cursor>>>
    SBEPP_CPP20_CONSTEXPR void multiLegModel(
        ::bovespa_mbo_sbe::types::MultiLegModel v, Cursor&& c) const noexcept
    {
        return c.template set_value<::sbepp::endian::little>(
            *this, 0, 228, v);
    }

    template<
        typename Cursor,
        typename = ::sbepp::detail::enable_if_cursor_compatible_t<
            Byte, ::sbepp::detail::cursor_byte_type_t<Cursor>>>
    SBEPP_CPP20_CONSTEXPR auto
        multiLegPriceMethod(Cursor&& c) const noexcept
        -> ::sbepp::detail::cursor_result_type_t<Cursor, ::bovespa_mbo_sbe::types::MultiLegPriceMethod>
    {
        return c.template get_value<::bovespa_mbo_sbe::types::MultiLegPriceMethod, ::bovespa_mbo_sbe::types::MultiLegPriceMethod, ::sbepp::endian::little>(
            *this, 0, 229);
    }

    template<
        typename Cursor,
        typename = ::sbepp::detail::enable_if_cursor_writeable_t<
            Byte, ::sbepp::detail::cursor_byte_type_t<Cursor>>>
    SBEPP_CPP20_CONSTEXPR void multiLegPriceMethod(
        ::bovespa_mbo_sbe::types::MultiLegPriceMethod v, Cursor&& c) const noexcept
    {
        return c.template set_value<::sbepp::endian::little>(
            *this, 0, 229, v);
    }

    template<
        typename Cursor,
        typename = ::sbepp::detail::enable_if_cursor_compatible_t<
            Byte, ::sbepp::detail::cursor_byte_type_t<Cursor>>>
    SBEPP_CPP20_CONSTEXPR auto minCrossQty(Cursor&& c) const noexcept
        -> ::sbepp::detail::cursor_result_type_t<Cursor, ::bovespa_mbo_sbe::types::QuantityOptional>
    {
        return c.template get_last_value<::bovespa_mbo_sbe::types::QuantityOptional, ::std::int64_t, ::sbepp::endian::little>(
            *this, 0, 230);
    }

    template<
        typename Cursor,
        typename = ::sbepp::detail::enable_if_cursor_writeable_t<
            Byte, ::sbepp::detail::cursor_byte_type_t<Cursor>>>
    SBEPP_CPP20_CONSTEXPR void minCrossQty(::bovespa_mbo_sbe::types::QuantityOptional v, Cursor&& c) const noexcept
    {
        return c.template set_last_value<::sbepp::endian::little>(
            *this, 0, 230, v.value());
    }

    template<
        typename Cursor,
        typename = ::sbepp::detail::enable_if_cursor_compatible_t<
            Byte, ::sbepp::detail::cursor_byte_type_t<Cursor>>>
    constexpr auto noUnderlyings(Cursor&& c) const noexcept
        -> ::sbepp::detail::cursor_result_type_t<Cursor,
            ::bovespa_mbo_sbe::detail::messages::group_1<::sbepp::detail::cursor_byte_type_t<Cursor>>>
    {
        return c.template get_first_group_view<
            ::bovespa_mbo_sbe::detail::messages::group_1<::sbepp::detail::cursor_byte_type_t<Cursor>>>(*this);
    }

    template<
        typename Cursor,
        typename = ::sbepp::detail::enable_if_cursor_compatible_t<
            Byte, ::sbepp::detail::cursor_byte_type_t<Cursor>>>
    constexpr auto noLegs(Cursor&& c) const noexcept
        -> ::sbepp::detail::cursor_result_type_t<Cursor,
            ::bovespa_mbo_sbe::detail::messages::group_2<::sbepp::detail::cursor_byte_type_t<Cursor>>>
    {
        return c.template get_group_view<
            ::bovespa_mbo_sbe::detail::messages::group_2<::sbepp::detail::cursor_byte_type_t<Cursor>>>(
                *this, [this](){return this->noLegs();});
    }

    template<
        typename Cursor,
        typename = ::sbepp::detail::enable_if_cursor_compatible_t<
            Byte, ::sbepp::detail::cursor_byte_type_t<Cursor>>>
    constexpr auto noInstrAttribs(Cursor&& c) const noexcept
        -> ::sbepp::detail::cursor_result_type_t<Cursor,
            ::bovespa_mbo_sbe::detail::messages::group_3<::sbepp::detail::cursor_byte_type_t<Cursor>>>
    {
        return c.template get_group_view<
            ::bovespa_mbo_sbe::detail::messages::group_3<::sbepp::detail::cursor_byte_type_t<Cursor>>>(
                *this, [this](){return this->noInstrAttribs();});
    }

    template<
        typename Cursor,
        typename = ::sbepp::detail::enable_if_cursor_compatible_t<
            Byte, ::sbepp::detail::cursor_byte_type_t<Cursor>>>
    constexpr auto securityDesc(Cursor&& c) const noexcept
        -> ::sbepp::detail::cursor_result_type_t<Cursor,
            ::sbepp::detail::dynamic_array_ref<
                ::sbepp::detail::cursor_byte_type_t<Cursor>,
                    char, ::bovespa_mbo_sbe::detail::types::type_90, ::sbepp::endian::little>>
    {
        return c.template get_data_view<
            ::sbepp::detail::dynamic_array_ref<
                ::sbepp::detail::cursor_byte_type_t<Cursor>, char,
                    ::bovespa_mbo_sbe::detail::types::type_90, ::sbepp::endian::little>>(
                        *this, [this](){return this->securityDesc();});
    }


    template<
        typename T = void,
        typename = ::sbepp::detail::enable_if_writable_t<Byte, T>>
    SBEPP_CPP14_CONSTEXPR ::bovespa_mbo_sbe::types::messageHeader<Byte>
        operator()(::sbepp::detail::fill_message_header_tag) const noexcept
    {
        auto header = operator()(::sbepp::detail::get_header_tag{});
        header.schemaId({2});
        header.templateId({4});
        header.version({8});
        header.blockLength({230});
        
        
        return header;
    }


    SBEPP_CPP20_CONSTEXPR std::size_t operator()(
        ::sbepp::detail::size_bytes_tag) const noexcept
    {
        const auto last = securityDesc();
        return ::sbepp::addressof(last) + ::sbepp::size_bytes(last)
               - (*this)(::sbepp::detail::addressof_tag{});
    }


    template<typename Visitor, typename Cursor>
    SBEPP_CPP14_CONSTEXPR void operator()(
        ::sbepp::detail::visit_tag, Visitor& v, Cursor& c)
    {
        v.template on_message(*this, c, ::bovespa_mbo_sbe::schema::messages::SecurityDefinition_4{});
    }


    template<typename Visitor, typename Cursor>
    constexpr bool operator()(
        ::sbepp::detail::visit_children_tag, Visitor& v, Cursor& c) const
    {
        return v.template on_field(this->securityID(c), ::bovespa_mbo_sbe::schema::messages::SecurityDefinition_4::securityID{})
||v.template on_field(this->securityExchange(c), ::bovespa_mbo_sbe::schema::messages::SecurityDefinition_4::securityExchange{})
||v.template on_field(this->securityIDSource(c), ::bovespa_mbo_sbe::schema::messages::SecurityDefinition_4::securityIDSource{})
||v.template on_field(this->securityGroup(c), ::bovespa_mbo_sbe::schema::messages::SecurityDefinition_4::securityGroup{})
||v.template on_field(this->symbol(c), ::bovespa_mbo_sbe::schema::messages::SecurityDefinition_4::symbol{})
||v.template on_field(this->securityUpdateAction(c), ::bovespa_mbo_sbe::schema::messages::SecurityDefinition_4::securityUpdateAction{})
||v.template on_field(this->securityType(c), ::bovespa_mbo_sbe::schema::messages::SecurityDefinition_4::securityType{})
||v.template on_field(this->securitySubType(c), ::bovespa_mbo_sbe::schema::messages::SecurityDefinition_4::securitySubType{})
||v.template on_field(this->totNoRelatedSym(c), ::bovespa_mbo_sbe::schema::messages::SecurityDefinition_4::totNoRelatedSym{})
||v.template on_field(this->minPriceIncrement(c), ::bovespa_mbo_sbe::schema::messages::SecurityDefinition_4::minPriceIncrement{})
||v.template on_field(this->strikePrice(c), ::bovespa_mbo_sbe::schema::messages::SecurityDefinition_4::strikePrice{})
||v.template on_field(this->contractMultiplier(c), ::bovespa_mbo_sbe::schema::messages::SecurityDefinition_4::contractMultiplier{})
||v.template on_field(this->priceDivisor(c), ::bovespa_mbo_sbe::schema::messages::SecurityDefinition_4::priceDivisor{})
||v.template on_field(this->securityValidityTimestamp(c), ::bovespa_mbo_sbe::schema::messages::SecurityDefinition_4::securityValidityTimestamp{})
||v.template on_field(this->noSharesIssued(c), ::bovespa_mbo_sbe::schema::messages::SecurityDefinition_4::noSharesIssued{})
||v.template on_field(this->clearingHouseID(c), ::bovespa_mbo_sbe::schema::messages::SecurityDefinition_4::clearingHouseID{})
||v.template on_field(this->minOrderQty(c), ::bovespa_mbo_sbe::schema::messages::SecurityDefinition_4::minOrderQty{})
||v.template on_field(this->maxOrderQty(c), ::bovespa_mbo_sbe::schema::messages::SecurityDefinition_4::maxOrderQty{})
||v.template on_field(this->minLotSize(c), ::bovespa_mbo_sbe::schema::messages::SecurityDefinition_4::minLotSize{})
||v.template on_field(this->minTradeVol(c), ::bovespa_mbo_sbe::schema::messages::SecurityDefinition_4::minTradeVol{})
||v.template on_field(this->corporateActionEventId(c), ::bovespa_mbo_sbe::schema::messages::SecurityDefinition_4::corporateActionEventId{})
||v.template on_field(this->issueDate(c), ::bovespa_mbo_sbe::schema::messages::SecurityDefinition_4::issueDate{})
||v.template on_field(this->maturityDate(c), ::bovespa_mbo_sbe::schema::messages::SecurityDefinition_4::maturityDate{})
||v.template on_field(this->countryOfIssue(c), ::bovespa_mbo_sbe::schema::messages::SecurityDefinition_4::countryOfIssue{})
||v.template on_field(this->startDate(c), ::bovespa_mbo_sbe::schema::messages::SecurityDefinition_4::startDate{})
||v.template on_field(this->endDate(c), ::bovespa_mbo_sbe::schema::messages::SecurityDefinition_4::endDate{})
||v.template on_field(this->settlType(c), ::bovespa_mbo_sbe::schema::messages::SecurityDefinition_4::settlType{})
||v.template on_field(this->settlDate(c), ::bovespa_mbo_sbe::schema::messages::SecurityDefinition_4::settlDate{})
||v.template on_field(this->datedDate(c), ::bovespa_mbo_sbe::schema::messages::SecurityDefinition_4::datedDate{})
||v.template on_field(this->isinNumber(c), ::bovespa_mbo_sbe::schema::messages::SecurityDefinition_4::isinNumber{})
||v.template on_field(this->asset(c), ::bovespa_mbo_sbe::schema::messages::SecurityDefinition_4::asset{})
||v.template on_field(this->cfiCode(c), ::bovespa_mbo_sbe::schema::messages::SecurityDefinition_4::cfiCode{})
||v.template on_field(this->maturityMonthYear(c), ::bovespa_mbo_sbe::schema::messages::SecurityDefinition_4::maturityMonthYear{})
||v.template on_field(this->contractSettlMonth(c), ::bovespa_mbo_sbe::schema::messages::SecurityDefinition_4::contractSettlMonth{})
||v.template on_field(this->currency(c), ::bovespa_mbo_sbe::schema::messages::SecurityDefinition_4::currency{})
||v.template on_field(this->strikeCurrency(c), ::bovespa_mbo_sbe::schema::messages::SecurityDefinition_4::strikeCurrency{})
||v.template on_field(this->settlCurrency(c), ::bovespa_mbo_sbe::schema::messages::SecurityDefinition_4::settlCurrency{})
||v.template on_field(this->securityStrategyType(c), ::bovespa_mbo_sbe::schema::messages::SecurityDefinition_4::securityStrategyType{})
||v.template on_field(this->lotType(c), ::bovespa_mbo_sbe::schema::messages::SecurityDefinition_4::lotType{})
||v.template on_field(this->tickSizeDenominator(c), ::bovespa_mbo_sbe::schema::messages::SecurityDefinition_4::tickSizeDenominator{})
||v.template on_field(this->product(c), ::bovespa_mbo_sbe::schema::messages::SecurityDefinition_4::product{})
||v.template on_field(this->exerciseStyle(c), ::bovespa_mbo_sbe::schema::messages::SecurityDefinition_4::exerciseStyle{})
||v.template on_field(this->putOrCall(c), ::bovespa_mbo_sbe::schema::messages::SecurityDefinition_4::putOrCall{})
||v.template on_field(this->priceType(c), ::bovespa_mbo_sbe::schema::messages::SecurityDefinition_4::priceType{})
||v.template on_field(this->marketSegmentID(c), ::bovespa_mbo_sbe::schema::messages::SecurityDefinition_4::marketSegmentID{})
||v.template on_field(this->governanceIndicator(c), ::bovespa_mbo_sbe::schema::messages::SecurityDefinition_4::governanceIndicator{})
||v.template on_field(this->securityMatchType(c), ::bovespa_mbo_sbe::schema::messages::SecurityDefinition_4::securityMatchType{})
||v.template on_field(this->lastFragment(c), ::bovespa_mbo_sbe::schema::messages::SecurityDefinition_4::lastFragment{})
||v.template on_field(this->multiLegModel(c), ::bovespa_mbo_sbe::schema::messages::SecurityDefinition_4::multiLegModel{})
||v.template on_field(this->multiLegPriceMethod(c), ::bovespa_mbo_sbe::schema::messages::SecurityDefinition_4::multiLegPriceMethod{})
||v.template on_field(this->minCrossQty(c), ::bovespa_mbo_sbe::schema::messages::SecurityDefinition_4::minCrossQty{})
||v.template on_group(this->noUnderlyings(c), c, ::bovespa_mbo_sbe::schema::messages::SecurityDefinition_4::noUnderlyings{})
||v.template on_group(this->noLegs(c), c, ::bovespa_mbo_sbe::schema::messages::SecurityDefinition_4::noLegs{})
||v.template on_group(this->noInstrAttribs(c), c, ::bovespa_mbo_sbe::schema::messages::SecurityDefinition_4::noInstrAttribs{})
||v.template on_data(this->securityDesc(c), ::bovespa_mbo_sbe::schema::messages::SecurityDefinition_4::securityDesc{});
    }

};

} // namespace messages
} // namespace detail

namespace messages
{

    template<typename Byte>
    using SecurityDefinition_4 = ::bovespa_mbo_sbe::detail::messages::message_7<Byte>;

} // namespace messages
} // namespace bovespa_mbo_sbe

namespace sbepp
{

template<>
class field_traits<::bovespa_mbo_sbe::schema::messages::SecurityDefinition_4::messageType>
{
public:
    static constexpr const char* name() noexcept
    {
        return "messageType";
    }

    static constexpr member_id_t id() noexcept
    {
        return 35;
    }

    static constexpr const char* description() noexcept
    {
        return "";
    }

    static constexpr field_presence presence() noexcept
    {
        return ::sbepp::field_presence::constant;
    }
    
    static constexpr offset_t offset() noexcept
    {
        return {0};
    }


    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    
    using value_type = ::bovespa_mbo_sbe::types::MessageType;
    
};

template<>
class field_traits<::bovespa_mbo_sbe::schema::messages::SecurityDefinition_4::applVerID>
{
public:
    static constexpr const char* name() noexcept
    {
        return "applVerID";
    }

    static constexpr member_id_t id() noexcept
    {
        return 1128;
    }

    static constexpr const char* description() noexcept
    {
        return "Specifies the service pack release being applied at message level";
    }

    static constexpr field_presence presence() noexcept
    {
        return ::sbepp::field_presence::constant;
    }
    
    static constexpr offset_t offset() noexcept
    {
        return {0};
    }


    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    
    using value_type = ::bovespa_mbo_sbe::types::ApplVerID;
    
};

template<>
class field_traits<::bovespa_mbo_sbe::schema::messages::SecurityDefinition_4::securityID>
{
public:
    static constexpr const char* name() noexcept
    {
        return "securityID";
    }

    static constexpr member_id_t id() noexcept
    {
        return 48;
    }

    static constexpr const char* description() noexcept
    {
        return "Security ID as defined by B3.";
    }

    static constexpr field_presence presence() noexcept
    {
        return ::sbepp::field_presence::required;
    }
    
    static constexpr offset_t offset() noexcept
    {
        return {0};
    }


    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    
    using value_type = ::bovespa_mbo_sbe::types::SecurityID;
    using value_type_tag = ::bovespa_mbo_sbe::schema::types::SecurityID;
};

template<>
class field_traits<::bovespa_mbo_sbe::schema::messages::SecurityDefinition_4::securityExchange>
{
public:
    static constexpr const char* name() noexcept
    {
        return "securityExchange";
    }

    static constexpr member_id_t id() noexcept
    {
        return 207;
    }

    static constexpr const char* description() noexcept
    {
        return "Exchange Code.";
    }

    static constexpr field_presence presence() noexcept
    {
        return ::sbepp::field_presence::required;
    }
    
    static constexpr offset_t offset() noexcept
    {
        return {8};
    }


    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    
    
    template<typename Byte>
    using value_type = ::bovespa_mbo_sbe::types::SecurityExchange<Byte>;

    using value_type_tag = ::bovespa_mbo_sbe::schema::types::SecurityExchange;
};

template<>
class field_traits<::bovespa_mbo_sbe::schema::messages::SecurityDefinition_4::securityIDSource>
{
public:
    static constexpr const char* name() noexcept
    {
        return "securityIDSource";
    }

    static constexpr member_id_t id() noexcept
    {
        return 22;
    }

    static constexpr const char* description() noexcept
    {
        return "Identifies the class of the SecurityID.";
    }

    static constexpr field_presence presence() noexcept
    {
        return ::sbepp::field_presence::required;
    }
    
    static constexpr offset_t offset() noexcept
    {
        return {12};
    }


    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    
    using value_type = ::bovespa_mbo_sbe::types::SecurityIDSource;
    using value_type_tag = ::bovespa_mbo_sbe::schema::types::SecurityIDSource;
};

template<>
class field_traits<::bovespa_mbo_sbe::schema::messages::SecurityDefinition_4::securityGroup>
{
public:
    static constexpr const char* name() noexcept
    {
        return "securityGroup";
    }

    static constexpr member_id_t id() noexcept
    {
        return 1151;
    }

    static constexpr const char* description() noexcept
    {
        return "Security Group.";
    }

    static constexpr field_presence presence() noexcept
    {
        return ::sbepp::field_presence::required;
    }
    
    static constexpr offset_t offset() noexcept
    {
        return {13};
    }


    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    
    
    template<typename Byte>
    using value_type = ::bovespa_mbo_sbe::types::SecurityGroup<Byte>;

    using value_type_tag = ::bovespa_mbo_sbe::schema::types::SecurityGroup;
};

template<>
class field_traits<::bovespa_mbo_sbe::schema::messages::SecurityDefinition_4::symbol>
{
public:
    static constexpr const char* name() noexcept
    {
        return "symbol";
    }

    static constexpr member_id_t id() noexcept
    {
        return 55;
    }

    static constexpr const char* description() noexcept
    {
        return "Instrument's ticker symbol.";
    }

    static constexpr field_presence presence() noexcept
    {
        return ::sbepp::field_presence::required;
    }
    
    static constexpr offset_t offset() noexcept
    {
        return {16};
    }


    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    
    
    template<typename Byte>
    using value_type = ::bovespa_mbo_sbe::types::Symbol<Byte>;

    using value_type_tag = ::bovespa_mbo_sbe::schema::types::Symbol;
};

template<>
class field_traits<::bovespa_mbo_sbe::schema::messages::SecurityDefinition_4::securityUpdateAction>
{
public:
    static constexpr const char* name() noexcept
    {
        return "securityUpdateAction";
    }

    static constexpr member_id_t id() noexcept
    {
        return 980;
    }

    static constexpr const char* description() noexcept
    {
        return "Action used when updating the security.";
    }

    static constexpr field_presence presence() noexcept
    {
        return ::sbepp::field_presence::required;
    }
    
    static constexpr offset_t offset() noexcept
    {
        return {36};
    }


    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    
    using value_type = ::bovespa_mbo_sbe::types::SecurityUpdateAction;
    using value_type_tag = ::bovespa_mbo_sbe::schema::types::SecurityUpdateAction;
};

template<>
class field_traits<::bovespa_mbo_sbe::schema::messages::SecurityDefinition_4::securityType>
{
public:
    static constexpr const char* name() noexcept
    {
        return "securityType";
    }

    static constexpr member_id_t id() noexcept
    {
        return 167;
    }

    static constexpr const char* description() noexcept
    {
        return "Instrument's security type.";
    }

    static constexpr field_presence presence() noexcept
    {
        return ::sbepp::field_presence::required;
    }
    
    static constexpr offset_t offset() noexcept
    {
        return {37};
    }


    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    
    using value_type = ::bovespa_mbo_sbe::types::SecurityType;
    using value_type_tag = ::bovespa_mbo_sbe::schema::types::SecurityType;
};

template<>
class field_traits<::bovespa_mbo_sbe::schema::messages::SecurityDefinition_4::securitySubType>
{
public:
    static constexpr const char* name() noexcept
    {
        return "securitySubType";
    }

    static constexpr member_id_t id() noexcept
    {
        return 762;
    }

    static constexpr const char* description() noexcept
    {
        return "Instrument's security sub type. List of values defined at Message Reference document.";
    }

    static constexpr field_presence presence() noexcept
    {
        return ::sbepp::field_presence::required;
    }
    
    static constexpr offset_t offset() noexcept
    {
        return {38};
    }


    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    
    using value_type = ::bovespa_mbo_sbe::types::UInt16;
    using value_type_tag = ::bovespa_mbo_sbe::schema::types::UInt16;
};

template<>
class field_traits<::bovespa_mbo_sbe::schema::messages::SecurityDefinition_4::totNoRelatedSym>
{
public:
    static constexpr const char* name() noexcept
    {
        return "totNoRelatedSym";
    }

    static constexpr member_id_t id() noexcept
    {
        return 393;
    }

    static constexpr const char* description() noexcept
    {
        return "Total number of instruments to be returned in the current replay loop.";
    }

    static constexpr field_presence presence() noexcept
    {
        return ::sbepp::field_presence::required;
    }
    
    static constexpr offset_t offset() noexcept
    {
        return {40};
    }


    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    
    using value_type = ::bovespa_mbo_sbe::types::UInt32;
    using value_type_tag = ::bovespa_mbo_sbe::schema::types::UInt32;
};

template<>
class field_traits<::bovespa_mbo_sbe::schema::messages::SecurityDefinition_4::minPriceIncrement>
{
public:
    static constexpr const char* name() noexcept
    {
        return "minPriceIncrement";
    }

    static constexpr member_id_t id() noexcept
    {
        return 969;
    }

    static constexpr const char* description() noexcept
    {
        return "Number of minimum price increments.";
    }

    static constexpr field_presence presence() noexcept
    {
        return ::sbepp::field_presence::optional;
    }
    
    static constexpr offset_t offset() noexcept
    {
        return {44};
    }


    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    
    
    template<typename Byte>
    using value_type = ::bovespa_mbo_sbe::types::PriceOptional<Byte>;

    using value_type_tag = ::bovespa_mbo_sbe::schema::types::PriceOptional;
};

template<>
class field_traits<::bovespa_mbo_sbe::schema::messages::SecurityDefinition_4::strikePrice>
{
public:
    static constexpr const char* name() noexcept
    {
        return "strikePrice";
    }

    static constexpr member_id_t id() noexcept
    {
        return 202;
    }

    static constexpr const char* description() noexcept
    {
        return "Strike price of an option.";
    }

    static constexpr field_presence presence() noexcept
    {
        return ::sbepp::field_presence::optional;
    }
    
    static constexpr offset_t offset() noexcept
    {
        return {52};
    }


    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    
    
    template<typename Byte>
    using value_type = ::bovespa_mbo_sbe::types::PriceOptional<Byte>;

    using value_type_tag = ::bovespa_mbo_sbe::schema::types::PriceOptional;
};

template<>
class field_traits<::bovespa_mbo_sbe::schema::messages::SecurityDefinition_4::contractMultiplier>
{
public:
    static constexpr const char* name() noexcept
    {
        return "contractMultiplier";
    }

    static constexpr member_id_t id() noexcept
    {
        return 231;
    }

    static constexpr const char* description() noexcept
    {
        return "Specifies the ratio or multiply factor to convert from “nominal” units (e.g. contracts) to total units (e.g. shares) (e.g. 1.0, 100, 1000, 0.00025 etc).";
    }

    static constexpr field_presence presence() noexcept
    {
        return ::sbepp::field_presence::optional;
    }
    
    static constexpr offset_t offset() noexcept
    {
        return {60};
    }


    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    
    
    template<typename Byte>
    using value_type = ::bovespa_mbo_sbe::types::Fixed8<Byte>;

    using value_type_tag = ::bovespa_mbo_sbe::schema::types::Fixed8;
};

template<>
class field_traits<::bovespa_mbo_sbe::schema::messages::SecurityDefinition_4::priceDivisor>
{
public:
    static constexpr const char* name() noexcept
    {
        return "priceDivisor";
    }

    static constexpr member_id_t id() noexcept
    {
        return 37012;
    }

    static constexpr const char* description() noexcept
    {
        return "Value that divides the Price field to produce the actual order price (based on Step of Quotation). (e.g. 1, 100, 1000, etc). Default value is 1. Also used for index instruments to disseminate the index reducer, in this case, there is no default value.";
    }

    static constexpr field_presence presence() noexcept
    {
        return ::sbepp::field_presence::optional;
    }
    
    static constexpr offset_t offset() noexcept
    {
        return {68};
    }


    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    
    
    template<typename Byte>
    using value_type = ::bovespa_mbo_sbe::types::Fixed8<Byte>;

    using value_type_tag = ::bovespa_mbo_sbe::schema::types::Fixed8;
};

template<>
class field_traits<::bovespa_mbo_sbe::schema::messages::SecurityDefinition_4::securityValidityTimestamp>
{
public:
    static constexpr const char* name() noexcept
    {
        return "securityValidityTimestamp";
    }

    static constexpr member_id_t id() noexcept
    {
        return 6938;
    }

    static constexpr const char* description() noexcept
    {
        return "Indicates the UTC timestamp when trading for this security expires, i.e. when it is not eligible to trade anymore. Different from MaturityDate.";
    }

    static constexpr field_presence presence() noexcept
    {
        return ::sbepp::field_presence::required;
    }
    
    static constexpr offset_t offset() noexcept
    {
        return {76};
    }


    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    
    
    template<typename Byte>
    using value_type = ::bovespa_mbo_sbe::types::UTCTimestampSeconds<Byte>;

    using value_type_tag = ::bovespa_mbo_sbe::schema::types::UTCTimestampSeconds;
};

template<>
class field_traits<::bovespa_mbo_sbe::schema::messages::SecurityDefinition_4::noSharesIssued>
{
public:
    static constexpr const char* name() noexcept
    {
        return "noSharesIssued";
    }

    static constexpr member_id_t id() noexcept
    {
        return 7595;
    }

    static constexpr const char* description() noexcept
    {
        return "Share capital.";
    }

    static constexpr field_presence presence() noexcept
    {
        return ::sbepp::field_presence::optional;
    }
    
    static constexpr offset_t offset() noexcept
    {
        return {84};
    }


    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    
    using value_type = ::bovespa_mbo_sbe::types::UInt64NULL;
    using value_type_tag = ::bovespa_mbo_sbe::schema::types::UInt64NULL;
};

template<>
class field_traits<::bovespa_mbo_sbe::schema::messages::SecurityDefinition_4::clearingHouseID>
{
public:
    static constexpr const char* name() noexcept
    {
        return "clearingHouseID";
    }

    static constexpr member_id_t id() noexcept
    {
        return 37037;
    }

    static constexpr const char* description() noexcept
    {
        return "Clearing House ID.";
    }

    static constexpr field_presence presence() noexcept
    {
        return ::sbepp::field_presence::optional;
    }
    
    static constexpr offset_t offset() noexcept
    {
        return {92};
    }


    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    
    using value_type = ::bovespa_mbo_sbe::types::ClearingHouseID;
    using value_type_tag = ::bovespa_mbo_sbe::schema::types::ClearingHouseID;
};

template<>
class field_traits<::bovespa_mbo_sbe::schema::messages::SecurityDefinition_4::minOrderQty>
{
public:
    static constexpr const char* name() noexcept
    {
        return "minOrderQty";
    }

    static constexpr member_id_t id() noexcept
    {
        return 9749;
    }

    static constexpr const char* description() noexcept
    {
        return "Minimum quantity for an order.";
    }

    static constexpr field_presence presence() noexcept
    {
        return ::sbepp::field_presence::optional;
    }
    
    static constexpr offset_t offset() noexcept
    {
        return {100};
    }


    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    
    using value_type = ::bovespa_mbo_sbe::types::QuantityOptional;
    using value_type_tag = ::bovespa_mbo_sbe::schema::types::QuantityOptional;
};

template<>
class field_traits<::bovespa_mbo_sbe::schema::messages::SecurityDefinition_4::maxOrderQty>
{
public:
    static constexpr const char* name() noexcept
    {
        return "maxOrderQty";
    }

    static constexpr member_id_t id() noexcept
    {
        return 9748;
    }

    static constexpr const char* description() noexcept
    {
        return "Maximum quantity for an order.";
    }

    static constexpr field_presence presence() noexcept
    {
        return ::sbepp::field_presence::optional;
    }
    
    static constexpr offset_t offset() noexcept
    {
        return {108};
    }


    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    
    using value_type = ::bovespa_mbo_sbe::types::QuantityOptional;
    using value_type_tag = ::bovespa_mbo_sbe::schema::types::QuantityOptional;
};

template<>
class field_traits<::bovespa_mbo_sbe::schema::messages::SecurityDefinition_4::minLotSize>
{
public:
    static constexpr const char* name() noexcept
    {
        return "minLotSize";
    }

    static constexpr member_id_t id() noexcept
    {
        return 1231;
    }

    static constexpr const char* description() noexcept
    {
        return "Minimum lot size allowed based on lot type specified in LotType(1093). Used for the equities segment.";
    }

    static constexpr field_presence presence() noexcept
    {
        return ::sbepp::field_presence::optional;
    }
    
    static constexpr offset_t offset() noexcept
    {
        return {116};
    }


    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    
    using value_type = ::bovespa_mbo_sbe::types::QuantityOptional;
    using value_type_tag = ::bovespa_mbo_sbe::schema::types::QuantityOptional;
};

template<>
class field_traits<::bovespa_mbo_sbe::schema::messages::SecurityDefinition_4::minTradeVol>
{
public:
    static constexpr const char* name() noexcept
    {
        return "minTradeVol";
    }

    static constexpr member_id_t id() noexcept
    {
        return 562;
    }

    static constexpr const char* description() noexcept
    {
        return "The minimum trading volume for the security.";
    }

    static constexpr field_presence presence() noexcept
    {
        return ::sbepp::field_presence::optional;
    }
    
    static constexpr offset_t offset() noexcept
    {
        return {124};
    }


    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    
    using value_type = ::bovespa_mbo_sbe::types::QuantityOptional;
    using value_type_tag = ::bovespa_mbo_sbe::schema::types::QuantityOptional;
};

template<>
class field_traits<::bovespa_mbo_sbe::schema::messages::SecurityDefinition_4::corporateActionEventId>
{
public:
    static constexpr const char* name() noexcept
    {
        return "corporateActionEventId";
    }

    static constexpr member_id_t id() noexcept
    {
        return 37010;
    }

    static constexpr const char* description() noexcept
    {
        return "Corporate Action Event ID.";
    }

    static constexpr field_presence presence() noexcept
    {
        return ::sbepp::field_presence::optional;
    }
    
    static constexpr offset_t offset() noexcept
    {
        return {132};
    }


    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    
    using value_type = ::bovespa_mbo_sbe::types::UInt32NULL;
    using value_type_tag = ::bovespa_mbo_sbe::schema::types::UInt32NULL;
};

template<>
class field_traits<::bovespa_mbo_sbe::schema::messages::SecurityDefinition_4::issueDate>
{
public:
    static constexpr const char* name() noexcept
    {
        return "issueDate";
    }

    static constexpr member_id_t id() noexcept
    {
        return 225;
    }

    static constexpr const char* description() noexcept
    {
        return "The date on which the security is issued/activated.";
    }

    static constexpr field_presence presence() noexcept
    {
        return ::sbepp::field_presence::required;
    }
    
    static constexpr offset_t offset() noexcept
    {
        return {136};
    }


    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    
    using value_type = ::bovespa_mbo_sbe::types::LocalMktDate32;
    using value_type_tag = ::bovespa_mbo_sbe::schema::types::LocalMktDate32;
};

template<>
class field_traits<::bovespa_mbo_sbe::schema::messages::SecurityDefinition_4::maturityDate>
{
public:
    static constexpr const char* name() noexcept
    {
        return "maturityDate";
    }

    static constexpr member_id_t id() noexcept
    {
        return 541;
    }

    static constexpr const char* description() noexcept
    {
        return "Date of instrument maturity.";
    }

    static constexpr field_presence presence() noexcept
    {
        return ::sbepp::field_presence::optional;
    }
    
    static constexpr offset_t offset() noexcept
    {
        return {140};
    }


    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    
    using value_type = ::bovespa_mbo_sbe::types::LocalMktDate32Optional;
    using value_type_tag = ::bovespa_mbo_sbe::schema::types::LocalMktDate32Optional;
};

template<>
class field_traits<::bovespa_mbo_sbe::schema::messages::SecurityDefinition_4::countryOfIssue>
{
public:
    static constexpr const char* name() noexcept
    {
        return "countryOfIssue";
    }

    static constexpr member_id_t id() noexcept
    {
        return 470;
    }

    static constexpr const char* description() noexcept
    {
        return "ISO 3166-1 alpha-2 country code.";
    }

    static constexpr field_presence presence() noexcept
    {
        return ::sbepp::field_presence::required;
    }
    
    static constexpr offset_t offset() noexcept
    {
        return {144};
    }


    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    
    
    template<typename Byte>
    using value_type = ::bovespa_mbo_sbe::types::CountryCode<Byte>;

    using value_type_tag = ::bovespa_mbo_sbe::schema::types::CountryCode;
};

template<>
class field_traits<::bovespa_mbo_sbe::schema::messages::SecurityDefinition_4::startDate>
{
public:
    static constexpr const char* name() noexcept
    {
        return "startDate";
    }

    static constexpr member_id_t id() noexcept
    {
        return 916;
    }

    static constexpr const char* description() noexcept
    {
        return "Start date of a financing deal, i.e. the date the buyer pays the seller cash and takes control of the collateral.";
    }

    static constexpr field_presence presence() noexcept
    {
        return ::sbepp::field_presence::optional;
    }
    
    static constexpr offset_t offset() noexcept
    {
        return {146};
    }


    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    
    using value_type = ::bovespa_mbo_sbe::types::LocalMktDate32Optional;
    using value_type_tag = ::bovespa_mbo_sbe::schema::types::LocalMktDate32Optional;
};

template<>
class field_traits<::bovespa_mbo_sbe::schema::messages::SecurityDefinition_4::endDate>
{
public:
    static constexpr const char* name() noexcept
    {
        return "endDate";
    }

    static constexpr member_id_t id() noexcept
    {
        return 917;
    }

    static constexpr const char* description() noexcept
    {
        return "End date of a financing deal, i.e. the date the seller reimburses the buyer and takes back control of the collateral.";
    }

    static constexpr field_presence presence() noexcept
    {
        return ::sbepp::field_presence::optional;
    }
    
    static constexpr offset_t offset() noexcept
    {
        return {150};
    }


    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    
    using value_type = ::bovespa_mbo_sbe::types::LocalMktDate32Optional;
    using value_type_tag = ::bovespa_mbo_sbe::schema::types::LocalMktDate32Optional;
};

template<>
class field_traits<::bovespa_mbo_sbe::schema::messages::SecurityDefinition_4::settlType>
{
public:
    static constexpr const char* name() noexcept
    {
        return "settlType";
    }

    static constexpr member_id_t id() noexcept
    {
        return 63;
    }

    static constexpr const char* description() noexcept
    {
        return "Order settlement period in days.";
    }

    static constexpr field_presence presence() noexcept
    {
        return ::sbepp::field_presence::required;
    }
    
    static constexpr offset_t offset() noexcept
    {
        return {154};
    }


    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    
    using value_type = ::bovespa_mbo_sbe::types::SettlType;
    using value_type_tag = ::bovespa_mbo_sbe::schema::types::SettlType;
};

template<>
class field_traits<::bovespa_mbo_sbe::schema::messages::SecurityDefinition_4::settlDate>
{
public:
    static constexpr const char* name() noexcept
    {
        return "settlDate";
    }

    static constexpr member_id_t id() noexcept
    {
        return 64;
    }

    static constexpr const char* description() noexcept
    {
        return "Specific date of trade settlement.";
    }

    static constexpr field_presence presence() noexcept
    {
        return ::sbepp::field_presence::optional;
    }
    
    static constexpr offset_t offset() noexcept
    {
        return {156};
    }


    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    
    using value_type = ::bovespa_mbo_sbe::types::LocalMktDate32Optional;
    using value_type_tag = ::bovespa_mbo_sbe::schema::types::LocalMktDate32Optional;
};

template<>
class field_traits<::bovespa_mbo_sbe::schema::messages::SecurityDefinition_4::datedDate>
{
public:
    static constexpr const char* name() noexcept
    {
        return "datedDate";
    }

    static constexpr member_id_t id() noexcept
    {
        return 873;
    }

    static constexpr const char* description() noexcept
    {
        return "The date of the security activation, if different from the IssueDate.";
    }

    static constexpr field_presence presence() noexcept
    {
        return ::sbepp::field_presence::optional;
    }
    
    static constexpr offset_t offset() noexcept
    {
        return {160};
    }


    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    
    using value_type = ::bovespa_mbo_sbe::types::LocalMktDate32Optional;
    using value_type_tag = ::bovespa_mbo_sbe::schema::types::LocalMktDate32Optional;
};

template<>
class field_traits<::bovespa_mbo_sbe::schema::messages::SecurityDefinition_4::isinNumber>
{
public:
    static constexpr const char* name() noexcept
    {
        return "isinNumber";
    }

    static constexpr member_id_t id() noexcept
    {
        return 37026;
    }

    static constexpr const char* description() noexcept
    {
        return "ISIN Number.";
    }

    static constexpr field_presence presence() noexcept
    {
        return ::sbepp::field_presence::required;
    }
    
    static constexpr offset_t offset() noexcept
    {
        return {164};
    }


    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    
    
    template<typename Byte>
    using value_type = ::bovespa_mbo_sbe::types::ISINNumber<Byte>;

    using value_type_tag = ::bovespa_mbo_sbe::schema::types::ISINNumber;
};

template<>
class field_traits<::bovespa_mbo_sbe::schema::messages::SecurityDefinition_4::asset>
{
public:
    static constexpr const char* name() noexcept
    {
        return "asset";
    }

    static constexpr member_id_t id() noexcept
    {
        return 6937;
    }

    static constexpr const char* description() noexcept
    {
        return "Asset associated to the security.";
    }

    static constexpr field_presence presence() noexcept
    {
        return ::sbepp::field_presence::required;
    }
    
    static constexpr offset_t offset() noexcept
    {
        return {176};
    }


    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    
    
    template<typename Byte>
    using value_type = ::bovespa_mbo_sbe::types::Asset<Byte>;

    using value_type_tag = ::bovespa_mbo_sbe::schema::types::Asset;
};

template<>
class field_traits<::bovespa_mbo_sbe::schema::messages::SecurityDefinition_4::cfiCode>
{
public:
    static constexpr const char* name() noexcept
    {
        return "cfiCode";
    }

    static constexpr member_id_t id() noexcept
    {
        return 461;
    }

    static constexpr const char* description() noexcept
    {
        return "Classification of Financial Instruments (CFI code) values, which indicate the type of security using the ISO 10962 standard.";
    }

    static constexpr field_presence presence() noexcept
    {
        return ::sbepp::field_presence::required;
    }
    
    static constexpr offset_t offset() noexcept
    {
        return {182};
    }


    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    
    
    template<typename Byte>
    using value_type = ::bovespa_mbo_sbe::types::CFICode<Byte>;

    using value_type_tag = ::bovespa_mbo_sbe::schema::types::CFICode;
};

template<>
class field_traits<::bovespa_mbo_sbe::schema::messages::SecurityDefinition_4::maturityMonthYear>
{
public:
    static constexpr const char* name() noexcept
    {
        return "maturityMonthYear";
    }

    static constexpr member_id_t id() noexcept
    {
        return 200;
    }

    static constexpr const char* description() noexcept
    {
        return "Month and year of the maturity.";
    }

    static constexpr field_presence presence() noexcept
    {
        return ::sbepp::field_presence::optional;
    }
    
    static constexpr offset_t offset() noexcept
    {
        return {188};
    }


    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    
    
    template<typename Byte>
    using value_type = ::bovespa_mbo_sbe::types::MaturityMonthYear<Byte>;

    using value_type_tag = ::bovespa_mbo_sbe::schema::types::MaturityMonthYear;
};

template<>
class field_traits<::bovespa_mbo_sbe::schema::messages::SecurityDefinition_4::contractSettlMonth>
{
public:
    static constexpr const char* name() noexcept
    {
        return "contractSettlMonth";
    }

    static constexpr member_id_t id() noexcept
    {
        return 667;
    }

    static constexpr const char* description() noexcept
    {
        return "Specifies when the contract will settle.";
    }

    static constexpr field_presence presence() noexcept
    {
        return ::sbepp::field_presence::optional;
    }
    
    static constexpr offset_t offset() noexcept
    {
        return {193};
    }


    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    
    
    template<typename Byte>
    using value_type = ::bovespa_mbo_sbe::types::MaturityMonthYear<Byte>;

    using value_type_tag = ::bovespa_mbo_sbe::schema::types::MaturityMonthYear;
};

template<>
class field_traits<::bovespa_mbo_sbe::schema::messages::SecurityDefinition_4::currency>
{
public:
    static constexpr const char* name() noexcept
    {
        return "currency";
    }

    static constexpr member_id_t id() noexcept
    {
        return 15;
    }

    static constexpr const char* description() noexcept
    {
        return "Currency code.";
    }

    static constexpr field_presence presence() noexcept
    {
        return ::sbepp::field_presence::required;
    }
    
    static constexpr offset_t offset() noexcept
    {
        return {198};
    }


    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    
    
    template<typename Byte>
    using value_type = ::bovespa_mbo_sbe::types::Currency<Byte>;

    using value_type_tag = ::bovespa_mbo_sbe::schema::types::Currency;
};

template<>
class field_traits<::bovespa_mbo_sbe::schema::messages::SecurityDefinition_4::strikeCurrency>
{
public:
    static constexpr const char* name() noexcept
    {
        return "strikeCurrency";
    }

    static constexpr member_id_t id() noexcept
    {
        return 947;
    }

    static constexpr const char* description() noexcept
    {
        return "Currency of option's strike price.";
    }

    static constexpr field_presence presence() noexcept
    {
        return ::sbepp::field_presence::required;
    }
    
    static constexpr offset_t offset() noexcept
    {
        return {201};
    }


    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    
    
    template<typename Byte>
    using value_type = ::bovespa_mbo_sbe::types::Currency<Byte>;

    using value_type_tag = ::bovespa_mbo_sbe::schema::types::Currency;
};

template<>
class field_traits<::bovespa_mbo_sbe::schema::messages::SecurityDefinition_4::settlCurrency>
{
public:
    static constexpr const char* name() noexcept
    {
        return "settlCurrency";
    }

    static constexpr member_id_t id() noexcept
    {
        return 120;
    }

    static constexpr const char* description() noexcept
    {
        return "Currency used for the settlement.";
    }

    static constexpr field_presence presence() noexcept
    {
        return ::sbepp::field_presence::required;
    }
    
    static constexpr offset_t offset() noexcept
    {
        return {204};
    }


    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    
    
    template<typename Byte>
    using value_type = ::bovespa_mbo_sbe::types::Currency<Byte>;

    using value_type_tag = ::bovespa_mbo_sbe::schema::types::Currency;
};

template<>
class field_traits<::bovespa_mbo_sbe::schema::messages::SecurityDefinition_4::securityStrategyType>
{
public:
    static constexpr const char* name() noexcept
    {
        return "securityStrategyType";
    }

    static constexpr member_id_t id() noexcept
    {
        return 7534;
    }

    static constexpr const char* description() noexcept
    {
        return "Strategy type definition.";
    }

    static constexpr field_presence presence() noexcept
    {
        return ::sbepp::field_presence::optional;
    }
    
    static constexpr offset_t offset() noexcept
    {
        return {207};
    }


    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    
    
    template<typename Byte>
    using value_type = ::bovespa_mbo_sbe::types::SecurityStrategyType<Byte>;

    using value_type_tag = ::bovespa_mbo_sbe::schema::types::SecurityStrategyType;
};

template<>
class field_traits<::bovespa_mbo_sbe::schema::messages::SecurityDefinition_4::lotType>
{
public:
    static constexpr const char* name() noexcept
    {
        return "lotType";
    }

    static constexpr member_id_t id() noexcept
    {
        return 1093;
    }

    static constexpr const char* description() noexcept
    {
        return "Lot type.";
    }

    static constexpr field_presence presence() noexcept
    {
        return ::sbepp::field_presence::required;
    }
    
    static constexpr offset_t offset() noexcept
    {
        return {210};
    }


    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    
    using value_type = ::bovespa_mbo_sbe::types::LotType;
    using value_type_tag = ::bovespa_mbo_sbe::schema::types::LotType;
};

template<>
class field_traits<::bovespa_mbo_sbe::schema::messages::SecurityDefinition_4::tickSizeDenominator>
{
public:
    static constexpr const char* name() noexcept
    {
        return "tickSizeDenominator";
    }

    static constexpr member_id_t id() noexcept
    {
        return 5151;
    }

    static constexpr const char* description() noexcept
    {
        return "Number of decimals for pricing the instrument.";
    }

    static constexpr field_presence presence() noexcept
    {
        return ::sbepp::field_presence::required;
    }
    
    static constexpr offset_t offset() noexcept
    {
        return {211};
    }


    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    
    using value_type = ::bovespa_mbo_sbe::types::UInt8;
    using value_type_tag = ::bovespa_mbo_sbe::schema::types::UInt8;
};

template<>
class field_traits<::bovespa_mbo_sbe::schema::messages::SecurityDefinition_4::product>
{
public:
    static constexpr const char* name() noexcept
    {
        return "product";
    }

    static constexpr member_id_t id() noexcept
    {
        return 460;
    }

    static constexpr const char* description() noexcept
    {
        return "Type of product.";
    }

    static constexpr field_presence presence() noexcept
    {
        return ::sbepp::field_presence::required;
    }
    
    static constexpr offset_t offset() noexcept
    {
        return {212};
    }


    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    
    using value_type = ::bovespa_mbo_sbe::types::Product;
    using value_type_tag = ::bovespa_mbo_sbe::schema::types::Product;
};

template<>
class field_traits<::bovespa_mbo_sbe::schema::messages::SecurityDefinition_4::exerciseStyle>
{
public:
    static constexpr const char* name() noexcept
    {
        return "exerciseStyle";
    }

    static constexpr member_id_t id() noexcept
    {
        return 1194;
    }

    static constexpr const char* description() noexcept
    {
        return "Exercise Style.";
    }

    static constexpr field_presence presence() noexcept
    {
        return ::sbepp::field_presence::required;
    }
    
    static constexpr offset_t offset() noexcept
    {
        return {213};
    }


    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    
    using value_type = ::bovespa_mbo_sbe::types::ExerciseStyle;
    using value_type_tag = ::bovespa_mbo_sbe::schema::types::ExerciseStyle;
};

template<>
class field_traits<::bovespa_mbo_sbe::schema::messages::SecurityDefinition_4::putOrCall>
{
public:
    static constexpr const char* name() noexcept
    {
        return "putOrCall";
    }

    static constexpr member_id_t id() noexcept
    {
        return 201;
    }

    static constexpr const char* description() noexcept
    {
        return "Indicates whether an option contract is a put or call.";
    }

    static constexpr field_presence presence() noexcept
    {
        return ::sbepp::field_presence::required;
    }
    
    static constexpr offset_t offset() noexcept
    {
        return {214};
    }


    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    
    using value_type = ::bovespa_mbo_sbe::types::PutOrCall;
    using value_type_tag = ::bovespa_mbo_sbe::schema::types::PutOrCall;
};

template<>
class field_traits<::bovespa_mbo_sbe::schema::messages::SecurityDefinition_4::priceType>
{
public:
    static constexpr const char* name() noexcept
    {
        return "priceType";
    }

    static constexpr member_id_t id() noexcept
    {
        return 423;
    }

    static constexpr const char* description() noexcept
    {
        return "Price type of the instrument.";
    }

    static constexpr field_presence presence() noexcept
    {
        return ::sbepp::field_presence::required;
    }
    
    static constexpr offset_t offset() noexcept
    {
        return {215};
    }


    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    
    using value_type = ::bovespa_mbo_sbe::types::PriceType;
    using value_type_tag = ::bovespa_mbo_sbe::schema::types::PriceType;
};

template<>
class field_traits<::bovespa_mbo_sbe::schema::messages::SecurityDefinition_4::marketSegmentID>
{
public:
    static constexpr const char* name() noexcept
    {
        return "marketSegmentID";
    }

    static constexpr member_id_t id() noexcept
    {
        return 1300;
    }

    static constexpr const char* description() noexcept
    {
        return "Market segment.";
    }

    static constexpr field_presence presence() noexcept
    {
        return ::sbepp::field_presence::optional;
    }
    
    static constexpr offset_t offset() noexcept
    {
        return {216};
    }


    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    
    using value_type = ::bovespa_mbo_sbe::types::MarketSegmentID;
    using value_type_tag = ::bovespa_mbo_sbe::schema::types::MarketSegmentID;
};

template<>
class field_traits<::bovespa_mbo_sbe::schema::messages::SecurityDefinition_4::governanceIndicator>
{
public:
    static constexpr const char* name() noexcept
    {
        return "governanceIndicator";
    }

    static constexpr member_id_t id() noexcept
    {
        return 37011;
    }

    static constexpr const char* description() noexcept
    {
        return "Corporative Governance Level Indicator.";
    }

    static constexpr field_presence presence() noexcept
    {
        return ::sbepp::field_presence::required;
    }
    
    static constexpr offset_t offset() noexcept
    {
        return {217};
    }


    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    
    using value_type = ::bovespa_mbo_sbe::types::GovernanceIndicator;
    using value_type_tag = ::bovespa_mbo_sbe::schema::types::GovernanceIndicator;
};

template<>
class field_traits<::bovespa_mbo_sbe::schema::messages::SecurityDefinition_4::securityMatchType>
{
public:
    static constexpr const char* name() noexcept
    {
        return "securityMatchType";
    }

    static constexpr member_id_t id() noexcept
    {
        return 37015;
    }

    static constexpr const char* description() noexcept
    {
        return "Type of matching that occurred.";
    }

    static constexpr field_presence presence() noexcept
    {
        return ::sbepp::field_presence::required;
    }
    
    static constexpr offset_t offset() noexcept
    {
        return {218};
    }


    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    
    using value_type = ::bovespa_mbo_sbe::types::SecurityMatchType;
    using value_type_tag = ::bovespa_mbo_sbe::schema::types::SecurityMatchType;
};

template<>
class field_traits<::bovespa_mbo_sbe::schema::messages::SecurityDefinition_4::lastFragment>
{
public:
    static constexpr const char* name() noexcept
    {
        return "lastFragment";
    }

    static constexpr member_id_t id() noexcept
    {
        return 893;
    }

    static constexpr const char* description() noexcept
    {
        return "Indicates whether this message is the last in the sequence of messages.";
    }

    static constexpr field_presence presence() noexcept
    {
        return ::sbepp::field_presence::required;
    }
    
    static constexpr offset_t offset() noexcept
    {
        return {219};
    }


    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    
    using value_type = ::bovespa_mbo_sbe::types::Boolean;
    using value_type_tag = ::bovespa_mbo_sbe::schema::types::Boolean;
};

template<>
class field_traits<::bovespa_mbo_sbe::schema::messages::SecurityDefinition_4::multiLegModel>
{
public:
    static constexpr const char* name() noexcept
    {
        return "multiLegModel";
    }

    static constexpr member_id_t id() noexcept
    {
        return 1377;
    }

    static constexpr const char* description() noexcept
    {
        return "Defines whether the security is pre-defined or user-defined. Used for multileg security only.";
    }

    static constexpr field_presence presence() noexcept
    {
        return ::sbepp::field_presence::required;
    }
    
    static constexpr offset_t offset() noexcept
    {
        return {220};
    }


    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    
    using value_type = ::bovespa_mbo_sbe::types::MultiLegModel;
    using value_type_tag = ::bovespa_mbo_sbe::schema::types::MultiLegModel;
};

template<>
class field_traits<::bovespa_mbo_sbe::schema::messages::SecurityDefinition_4::multiLegPriceMethod>
{
public:
    static constexpr const char* name() noexcept
    {
        return "multiLegPriceMethod";
    }

    static constexpr member_id_t id() noexcept
    {
        return 1378;
    }

    static constexpr const char* description() noexcept
    {
        return "Defines the method used when applying the multileg price to the legs. When this tag is set, it indicates spreads that have leg prices generated by the trading engine.";
    }

    static constexpr field_presence presence() noexcept
    {
        return ::sbepp::field_presence::required;
    }
    
    static constexpr offset_t offset() noexcept
    {
        return {221};
    }


    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    
    using value_type = ::bovespa_mbo_sbe::types::MultiLegPriceMethod;
    using value_type_tag = ::bovespa_mbo_sbe::schema::types::MultiLegPriceMethod;
};

template<>
class field_traits<::bovespa_mbo_sbe::schema::messages::SecurityDefinition_4::minCrossQty>
{
public:
    static constexpr const char* name() noexcept
    {
        return "minCrossQty";
    }

    static constexpr member_id_t id() noexcept
    {
        return 35561;
    }

    static constexpr const char* description() noexcept
    {
        return "Minimum quantity of a cross order for the security.";
    }

    static constexpr field_presence presence() noexcept
    {
        return ::sbepp::field_presence::optional;
    }
    
    static constexpr offset_t offset() noexcept
    {
        return {222};
    }


    static constexpr version_t since_version() noexcept
    {
        return 6;
    }

    
    using value_type = ::bovespa_mbo_sbe::types::QuantityOptional;
    using value_type_tag = ::bovespa_mbo_sbe::schema::types::QuantityOptional;
};


template<>
class field_traits<::bovespa_mbo_sbe::schema::messages::SecurityDefinition_4::noUnderlyings::underlyingSecurityID>
{
public:
    static constexpr const char* name() noexcept
    {
        return "underlyingSecurityID";
    }

    static constexpr member_id_t id() noexcept
    {
        return 309;
    }

    static constexpr const char* description() noexcept
    {
        return "Underlying instrument's security ID.";
    }

    static constexpr field_presence presence() noexcept
    {
        return ::sbepp::field_presence::required;
    }
    
    static constexpr offset_t offset() noexcept
    {
        return {0};
    }


    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    
    using value_type = ::bovespa_mbo_sbe::types::SecurityID;
    using value_type_tag = ::bovespa_mbo_sbe::schema::types::SecurityID;
};

template<>
class field_traits<::bovespa_mbo_sbe::schema::messages::SecurityDefinition_4::noUnderlyings::underlyingSecurityIDSource>
{
public:
    static constexpr const char* name() noexcept
    {
        return "underlyingSecurityIDSource";
    }

    static constexpr member_id_t id() noexcept
    {
        return 305;
    }

    static constexpr const char* description() noexcept
    {
        return "Identifies the class of the underlying instrument's SecurityID (Exchange Symbol).";
    }

    static constexpr field_presence presence() noexcept
    {
        return ::sbepp::field_presence::constant;
    }
    
    static constexpr offset_t offset() noexcept
    {
        return {0};
    }


    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    
    using value_type = ::bovespa_mbo_sbe::types::SecurityIDSource;
    
};

template<>
class field_traits<::bovespa_mbo_sbe::schema::messages::SecurityDefinition_4::noUnderlyings::underlyingSecurityExchange>
{
public:
    static constexpr const char* name() noexcept
    {
        return "underlyingSecurityExchange";
    }

    static constexpr member_id_t id() noexcept
    {
        return 308;
    }

    static constexpr const char* description() noexcept
    {
        return "Underlying instrument's Exchange Code.";
    }

    static constexpr field_presence presence() noexcept
    {
        return ::sbepp::field_presence::constant;
    }
    
    static constexpr offset_t offset() noexcept
    {
        return {0};
    }


    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    
    using value_type = ::bovespa_mbo_sbe::types::SecurityExchangeBVMF;
    
};

template<>
class field_traits<::bovespa_mbo_sbe::schema::messages::SecurityDefinition_4::noUnderlyings::indexPct>
{
public:
    static constexpr const char* name() noexcept
    {
        return "indexPct";
    }

    static constexpr member_id_t id() noexcept
    {
        return 6919;
    }

    static constexpr const char* description() noexcept
    {
        return "Required if this is an equity index instrument. Indicates the percentage that this underlying composes the index.";
    }

    static constexpr field_presence presence() noexcept
    {
        return ::sbepp::field_presence::optional;
    }
    
    static constexpr offset_t offset() noexcept
    {
        return {8};
    }


    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    
    
    template<typename Byte>
    using value_type = ::bovespa_mbo_sbe::types::Percentage9<Byte>;

    using value_type_tag = ::bovespa_mbo_sbe::schema::types::Percentage9;
};

template<>
class field_traits<::bovespa_mbo_sbe::schema::messages::SecurityDefinition_4::noUnderlyings::indexTheoreticalQty>
{
public:
    static constexpr const char* name() noexcept
    {
        return "indexTheoreticalQty";
    }

    static constexpr member_id_t id() noexcept
    {
        return 37021;
    }

    static constexpr const char* description() noexcept
    {
        return "The theoretical quantity of this underlying composing the index. This tag is only used for index instruments.";
    }

    static constexpr field_presence presence() noexcept
    {
        return ::sbepp::field_presence::optional;
    }
    
    static constexpr offset_t offset() noexcept
    {
        return {16};
    }


    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    
    
    template<typename Byte>
    using value_type = ::bovespa_mbo_sbe::types::Fixed8<Byte>;

    using value_type_tag = ::bovespa_mbo_sbe::schema::types::Fixed8;
};

template<>
class field_traits<::bovespa_mbo_sbe::schema::messages::SecurityDefinition_4::noUnderlyings::underlyingSymbol>
{
public:
    static constexpr const char* name() noexcept
    {
        return "underlyingSymbol";
    }

    static constexpr member_id_t id() noexcept
    {
        return 311;
    }

    static constexpr const char* description() noexcept
    {
        return "Underlying instrument's ticker symbol.";
    }

    static constexpr field_presence presence() noexcept
    {
        return ::sbepp::field_presence::required;
    }
    
    static constexpr offset_t offset() noexcept
    {
        return {24};
    }


    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    
    
    template<typename Byte>
    using value_type = ::bovespa_mbo_sbe::types::Symbol<Byte>;

    using value_type_tag = ::bovespa_mbo_sbe::schema::types::Symbol;
};


template<>
class group_traits<::bovespa_mbo_sbe::schema::messages::SecurityDefinition_4::noUnderlyings>
{
public:
    static constexpr const char* name() noexcept
    {
        return "noUnderlyings";
    }

    static constexpr const char* description() noexcept
    {
        return "Underlying instruments.";
    }

    static constexpr member_id_t id() noexcept
    {
        return 711;
    }

    static constexpr block_length_t block_length() noexcept
    {
        return 44;
    }

    static constexpr const char* semantic_type() noexcept
    {
        return "";
    }

    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    
    
    template<typename Byte>
    using value_type = ::bovespa_mbo_sbe::detail::messages::group_1<Byte>;

    
    template<typename Byte>
    using dimension_type = ::bovespa_mbo_sbe::types::GroupSizeEncoding<Byte>;

    using dimension_type_tag = ::bovespa_mbo_sbe::schema::types::GroupSizeEncoding;
    
    template<typename Byte>
    using entry_type = ::bovespa_mbo_sbe::detail::messages::entry_1<Byte>;

    static constexpr ::std::size_t size_bytes(
        const ::std::uint8_t num_in_group) noexcept
    {
        return ::sbepp::composite_traits<dimension_type_tag>::size_bytes()
            + num_in_group * (::sbepp::group_traits<::bovespa_mbo_sbe::schema::messages::SecurityDefinition_4::noUnderlyings>::block_length() );
    }

};

template<typename Byte>
struct traits_tag<::bovespa_mbo_sbe::detail::messages::group_1<Byte>>
{
    using type = ::bovespa_mbo_sbe::schema::messages::SecurityDefinition_4::noUnderlyings;
};



template<>
class field_traits<::bovespa_mbo_sbe::schema::messages::SecurityDefinition_4::noLegs::legSecurityID>
{
public:
    static constexpr const char* name() noexcept
    {
        return "legSecurityID";
    }

    static constexpr member_id_t id() noexcept
    {
        return 602;
    }

    static constexpr const char* description() noexcept
    {
        return "Leg's security ID.";
    }

    static constexpr field_presence presence() noexcept
    {
        return ::sbepp::field_presence::required;
    }
    
    static constexpr offset_t offset() noexcept
    {
        return {0};
    }


    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    
    using value_type = ::bovespa_mbo_sbe::types::SecurityID;
    using value_type_tag = ::bovespa_mbo_sbe::schema::types::SecurityID;
};

template<>
class field_traits<::bovespa_mbo_sbe::schema::messages::SecurityDefinition_4::noLegs::legSecurityIDSource>
{
public:
    static constexpr const char* name() noexcept
    {
        return "legSecurityIDSource";
    }

    static constexpr member_id_t id() noexcept
    {
        return 603;
    }

    static constexpr const char* description() noexcept
    {
        return "Identifies the class of the leg instrument's SecurityID (Exchange Symbol).";
    }

    static constexpr field_presence presence() noexcept
    {
        return ::sbepp::field_presence::constant;
    }
    
    static constexpr offset_t offset() noexcept
    {
        return {0};
    }


    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    
    using value_type = ::bovespa_mbo_sbe::types::SecurityIDSource;
    
};

template<>
class field_traits<::bovespa_mbo_sbe::schema::messages::SecurityDefinition_4::noLegs::legSecurityExchange>
{
public:
    static constexpr const char* name() noexcept
    {
        return "legSecurityExchange";
    }

    static constexpr member_id_t id() noexcept
    {
        return 616;
    }

    static constexpr const char* description() noexcept
    {
        return "Leg's Exchange Code.";
    }

    static constexpr field_presence presence() noexcept
    {
        return ::sbepp::field_presence::constant;
    }
    
    static constexpr offset_t offset() noexcept
    {
        return {0};
    }


    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    
    using value_type = ::bovespa_mbo_sbe::types::SecurityExchangeBVMF;
    
};

template<>
class field_traits<::bovespa_mbo_sbe::schema::messages::SecurityDefinition_4::noLegs::legRatioQty>
{
public:
    static constexpr const char* name() noexcept
    {
        return "legRatioQty";
    }

    static constexpr member_id_t id() noexcept
    {
        return 623;
    }

    static constexpr const char* description() noexcept
    {
        return "Ratio of quantity for this leg relative to the entire security.";
    }

    static constexpr field_presence presence() noexcept
    {
        return ::sbepp::field_presence::required;
    }
    
    static constexpr offset_t offset() noexcept
    {
        return {8};
    }


    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    
    
    template<typename Byte>
    using value_type = ::bovespa_mbo_sbe::types::RatioQty<Byte>;

    using value_type_tag = ::bovespa_mbo_sbe::schema::types::RatioQty;
};

template<>
class field_traits<::bovespa_mbo_sbe::schema::messages::SecurityDefinition_4::noLegs::legSecurityType>
{
public:
    static constexpr const char* name() noexcept
    {
        return "legSecurityType";
    }

    static constexpr member_id_t id() noexcept
    {
        return 609;
    }

    static constexpr const char* description() noexcept
    {
        return "Leg's security type.";
    }

    static constexpr field_presence presence() noexcept
    {
        return ::sbepp::field_presence::required;
    }
    
    static constexpr offset_t offset() noexcept
    {
        return {16};
    }


    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    
    using value_type = ::bovespa_mbo_sbe::types::SecurityType;
    using value_type_tag = ::bovespa_mbo_sbe::schema::types::SecurityType;
};

template<>
class field_traits<::bovespa_mbo_sbe::schema::messages::SecurityDefinition_4::noLegs::legSide>
{
public:
    static constexpr const char* name() noexcept
    {
        return "legSide";
    }

    static constexpr member_id_t id() noexcept
    {
        return 624;
    }

    static constexpr const char* description() noexcept
    {
        return "Side of this leg.";
    }

    static constexpr field_presence presence() noexcept
    {
        return ::sbepp::field_presence::required;
    }
    
    static constexpr offset_t offset() noexcept
    {
        return {17};
    }


    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    
    using value_type = ::bovespa_mbo_sbe::types::Side;
    using value_type_tag = ::bovespa_mbo_sbe::schema::types::Side;
};

template<>
class field_traits<::bovespa_mbo_sbe::schema::messages::SecurityDefinition_4::noLegs::legSymbol>
{
public:
    static constexpr const char* name() noexcept
    {
        return "legSymbol";
    }

    static constexpr member_id_t id() noexcept
    {
        return 600;
    }

    static constexpr const char* description() noexcept
    {
        return "Leg symbol.";
    }

    static constexpr field_presence presence() noexcept
    {
        return ::sbepp::field_presence::required;
    }
    
    static constexpr offset_t offset() noexcept
    {
        return {18};
    }


    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    
    
    template<typename Byte>
    using value_type = ::bovespa_mbo_sbe::types::Symbol<Byte>;

    using value_type_tag = ::bovespa_mbo_sbe::schema::types::Symbol;
};


template<>
class group_traits<::bovespa_mbo_sbe::schema::messages::SecurityDefinition_4::noLegs>
{
public:
    static constexpr const char* name() noexcept
    {
        return "noLegs";
    }

    static constexpr const char* description() noexcept
    {
        return "Instrument legs.";
    }

    static constexpr member_id_t id() noexcept
    {
        return 555;
    }

    static constexpr block_length_t block_length() noexcept
    {
        return 38;
    }

    static constexpr const char* semantic_type() noexcept
    {
        return "";
    }

    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    
    
    template<typename Byte>
    using value_type = ::bovespa_mbo_sbe::detail::messages::group_2<Byte>;

    
    template<typename Byte>
    using dimension_type = ::bovespa_mbo_sbe::types::GroupSizeEncoding<Byte>;

    using dimension_type_tag = ::bovespa_mbo_sbe::schema::types::GroupSizeEncoding;
    
    template<typename Byte>
    using entry_type = ::bovespa_mbo_sbe::detail::messages::entry_2<Byte>;

    static constexpr ::std::size_t size_bytes(
        const ::std::uint8_t num_in_group) noexcept
    {
        return ::sbepp::composite_traits<dimension_type_tag>::size_bytes()
            + num_in_group * (::sbepp::group_traits<::bovespa_mbo_sbe::schema::messages::SecurityDefinition_4::noLegs>::block_length() );
    }

};

template<typename Byte>
struct traits_tag<::bovespa_mbo_sbe::detail::messages::group_2<Byte>>
{
    using type = ::bovespa_mbo_sbe::schema::messages::SecurityDefinition_4::noLegs;
};



template<>
class field_traits<::bovespa_mbo_sbe::schema::messages::SecurityDefinition_4::noInstrAttribs::instrAttribType>
{
public:
    static constexpr const char* name() noexcept
    {
        return "instrAttribType";
    }

    static constexpr member_id_t id() noexcept
    {
        return 871;
    }

    static constexpr const char* description() noexcept
    {
        return "Code to represent the type of instrument attributes.";
    }

    static constexpr field_presence presence() noexcept
    {
        return ::sbepp::field_presence::required;
    }
    
    static constexpr offset_t offset() noexcept
    {
        return {0};
    }


    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    
    using value_type = ::bovespa_mbo_sbe::types::InstrAttribType;
    using value_type_tag = ::bovespa_mbo_sbe::schema::types::InstrAttribType;
};

template<>
class field_traits<::bovespa_mbo_sbe::schema::messages::SecurityDefinition_4::noInstrAttribs::instrAttribValue>
{
public:
    static constexpr const char* name() noexcept
    {
        return "instrAttribValue";
    }

    static constexpr member_id_t id() noexcept
    {
        return 872;
    }

    static constexpr const char* description() noexcept
    {
        return "Attribute value appropriate to the InstrAttribType (871) field.";
    }

    static constexpr field_presence presence() noexcept
    {
        return ::sbepp::field_presence::required;
    }
    
    static constexpr offset_t offset() noexcept
    {
        return {1};
    }


    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    
    using value_type = ::bovespa_mbo_sbe::types::InstrAttribValue;
    using value_type_tag = ::bovespa_mbo_sbe::schema::types::InstrAttribValue;
};


template<>
class group_traits<::bovespa_mbo_sbe::schema::messages::SecurityDefinition_4::noInstrAttribs>
{
public:
    static constexpr const char* name() noexcept
    {
        return "noInstrAttribs";
    }

    static constexpr const char* description() noexcept
    {
        return "Specifies the number of the application ID occurrences (number of channels).";
    }

    static constexpr member_id_t id() noexcept
    {
        return 870;
    }

    static constexpr block_length_t block_length() noexcept
    {
        return 2;
    }

    static constexpr const char* semantic_type() noexcept
    {
        return "";
    }

    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    
    
    template<typename Byte>
    using value_type = ::bovespa_mbo_sbe::detail::messages::group_3<Byte>;

    
    template<typename Byte>
    using dimension_type = ::bovespa_mbo_sbe::types::GroupSizeEncoding<Byte>;

    using dimension_type_tag = ::bovespa_mbo_sbe::schema::types::GroupSizeEncoding;
    
    template<typename Byte>
    using entry_type = ::bovespa_mbo_sbe::detail::messages::entry_3<Byte>;

    static constexpr ::std::size_t size_bytes(
        const ::std::uint8_t num_in_group) noexcept
    {
        return ::sbepp::composite_traits<dimension_type_tag>::size_bytes()
            + num_in_group * (::sbepp::group_traits<::bovespa_mbo_sbe::schema::messages::SecurityDefinition_4::noInstrAttribs>::block_length() );
    }

};

template<typename Byte>
struct traits_tag<::bovespa_mbo_sbe::detail::messages::group_3<Byte>>
{
    using type = ::bovespa_mbo_sbe::schema::messages::SecurityDefinition_4::noInstrAttribs;
};


template<>
class data_traits<::bovespa_mbo_sbe::schema::messages::SecurityDefinition_4::securityDesc>
{
public:
    static constexpr const char* name() noexcept
    {
        return "securityDesc";
    }

    static constexpr member_id_t id() noexcept
    {
        return 107;
    }

    static constexpr const char* description() noexcept
    {
        return "Non-normative textual description for the financial instrument.";
    }

    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    
    template<typename Byte>
    using value_type = ::sbepp::detail::dynamic_array_ref<
    Byte, char, ::bovespa_mbo_sbe::detail::types::type_90, ::sbepp::endian::little>;

    using length_type = ::bovespa_mbo_sbe::detail::types::type_90;
    using length_type_tag = ::bovespa_mbo_sbe::schema::types::TextEncoding::length;

    static constexpr ::std::size_t size_bytes(
        const length_type::value_type size) noexcept
    {
        return sizeof(size) + size;
    }
};

template<>
class message_traits<::bovespa_mbo_sbe::schema::messages::SecurityDefinition_4>
{
public:
    static constexpr const char* name() noexcept
    {
        return "SecurityDefinition_4";
    }

    static constexpr const char* description() noexcept
    {
        return "Security Definition.";
    }

    static constexpr message_id_t id() noexcept
    {
        return 4;
    }

    static constexpr block_length_t block_length() noexcept
    {
        return 230;
    }

    static constexpr const char* semantic_type() noexcept
    {
        return "";
    }

    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    static constexpr version_t deprecated() noexcept
    {
        return {8};
    }

    
    template<typename Byte>
    using value_type = ::bovespa_mbo_sbe::messages::SecurityDefinition_4<Byte>;

    using schema_tag = ::bovespa_mbo_sbe::schema;
    static constexpr ::std::size_t size_bytes(
        const ::std::uint8_t noUnderlyings_num_in_group, 
        const ::std::uint8_t noLegs_num_in_group, 
        const ::std::uint8_t noInstrAttribs_num_in_group, 
        const ::std::size_t total_data_size) noexcept
    {
        return ::sbepp::composite_traits<
            ::sbepp::schema_traits<schema_tag>::header_type_tag>::size_bytes()
            + block_length()
+ ::sbepp::group_traits<::bovespa_mbo_sbe::schema::messages::SecurityDefinition_4::noUnderlyings>::size_bytes(noUnderlyings_num_in_group)
+ ::sbepp::group_traits<::bovespa_mbo_sbe::schema::messages::SecurityDefinition_4::noLegs>::size_bytes(noLegs_num_in_group)
+ ::sbepp::group_traits<::bovespa_mbo_sbe::schema::messages::SecurityDefinition_4::noInstrAttribs>::size_bytes(noInstrAttribs_num_in_group)
+ ::sbepp::data_traits<::bovespa_mbo_sbe::schema::messages::SecurityDefinition_4::securityDesc>::size_bytes(0)
+ total_data_size;
    }

};

template<typename Byte>
struct traits_tag<::bovespa_mbo_sbe::messages::SecurityDefinition_4<Byte>>
{
    using type = ::bovespa_mbo_sbe::schema::messages::SecurityDefinition_4;
};


}  // namespace sbepp

SBEPP_WARNINGS_ON();
