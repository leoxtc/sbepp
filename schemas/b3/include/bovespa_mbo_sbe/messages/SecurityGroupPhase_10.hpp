// SPDX-License-Identifier: MIT
// Copyright (c) 2023, Oleksandr Koval

// This file was generated by sbeppc 1.3.0
#pragma once

#include <sbepp/sbepp.hpp>

SBEPP_WARNINGS_OFF();

#include "../schema/schema.hpp"
#include "../types/messageHeader.hpp"
#include "../types/UTCTimestampNanos.hpp"
#include "../types/LocalMktDate.hpp"
#include "../types/SecurityTradingEvent.hpp"
#include "../types/TradingSessionSubID.hpp"
#include "../types/TradingSessionID.hpp"
#include "../types/MatchEventIndicator.hpp"
#include "../types/SecurityGroup.hpp"
#include "../types/ApplVerID.hpp"
#include "../types/MessageType.hpp"


namespace bovespa_mbo_sbe
{
namespace detail
{
namespace messages
{



template<typename Byte>
class message_6 : public ::sbepp::detail::message_base<
    Byte, ::bovespa_mbo_sbe::types::messageHeader<Byte>>
{
public:
    using ::sbepp::detail::message_base<
        Byte, ::bovespa_mbo_sbe::types::messageHeader<Byte>>::message_base;
    using ::sbepp::detail::message_base<
        Byte, ::bovespa_mbo_sbe::types::messageHeader<Byte>>::operator();

    static constexpr ::bovespa_mbo_sbe::types::MessageType messageType() noexcept
    {
        return ::bovespa_mbo_sbe::types::MessageType{::bovespa_mbo_sbe::detail::types::enum_8::SecurityStatus};
    }
    static constexpr ::bovespa_mbo_sbe::types::ApplVerID applVerID() noexcept
    {
        return ::bovespa_mbo_sbe::types::ApplVerID{::bovespa_mbo_sbe::detail::types::enum_6::FIX50SP2};
    }
    constexpr ::bovespa_mbo_sbe::types::SecurityGroup<Byte> securityGroup() const noexcept
    {
        return ::sbepp::detail::get_static_field_view<::bovespa_mbo_sbe::types::SecurityGroup<Byte>>(
            *this, 8);
    }
    SBEPP_CPP20_CONSTEXPR ::bovespa_mbo_sbe::types::MatchEventIndicator matchEventIndicator() const noexcept
    {
        return ::sbepp::detail::get_value<
            ::bovespa_mbo_sbe::types::MatchEventIndicator, ::std::uint8_t, ::sbepp::endian::little>(*this, 16);
    }

    template<
        typename T = void,
        typename = ::sbepp::detail::enable_if_writable_t<Byte, T>>
    SBEPP_CPP20_CONSTEXPR void matchEventIndicator(::bovespa_mbo_sbe::types::MatchEventIndicator v) const noexcept
    {
        ::sbepp::detail::set_value<::sbepp::endian::little>(*this, 16, *v);
    }
    SBEPP_CPP20_CONSTEXPR ::bovespa_mbo_sbe::types::TradingSessionID tradingSessionID() const noexcept
    {
        return ::sbepp::detail::get_value<
            ::bovespa_mbo_sbe::types::TradingSessionID, ::bovespa_mbo_sbe::types::TradingSessionID, ::sbepp::endian::little>(*this, 17);
    }

    template<
        typename T = void,
        typename = ::sbepp::detail::enable_if_writable_t<Byte, T>>
    SBEPP_CPP20_CONSTEXPR void tradingSessionID(::bovespa_mbo_sbe::types::TradingSessionID v) const noexcept
    {
        ::sbepp::detail::set_value<::sbepp::endian::little>(*this, 17, v);
    }
    SBEPP_CPP20_CONSTEXPR ::bovespa_mbo_sbe::types::TradingSessionSubID tradingSessionSubID() const noexcept
    {
        return ::sbepp::detail::get_value<
            ::bovespa_mbo_sbe::types::TradingSessionSubID, ::bovespa_mbo_sbe::types::TradingSessionSubID, ::sbepp::endian::little>(*this, 18);
    }

    template<
        typename T = void,
        typename = ::sbepp::detail::enable_if_writable_t<Byte, T>>
    SBEPP_CPP20_CONSTEXPR void tradingSessionSubID(::bovespa_mbo_sbe::types::TradingSessionSubID v) const noexcept
    {
        ::sbepp::detail::set_value<::sbepp::endian::little>(*this, 18, v);
    }
    SBEPP_CPP20_CONSTEXPR ::bovespa_mbo_sbe::types::SecurityTradingEvent securityTradingEvent() const noexcept
    {
        return ::sbepp::detail::get_value<
            ::bovespa_mbo_sbe::types::SecurityTradingEvent, ::bovespa_mbo_sbe::types::SecurityTradingEvent, ::sbepp::endian::little>(*this, 19);
    }

    template<
        typename T = void,
        typename = ::sbepp::detail::enable_if_writable_t<Byte, T>>
    SBEPP_CPP20_CONSTEXPR void securityTradingEvent(::bovespa_mbo_sbe::types::SecurityTradingEvent v) const noexcept
    {
        ::sbepp::detail::set_value<::sbepp::endian::little>(*this, 19, v);
    }
    SBEPP_CPP20_CONSTEXPR ::bovespa_mbo_sbe::types::LocalMktDate tradeDate() const noexcept
    {
        return ::sbepp::detail::get_value<
            ::bovespa_mbo_sbe::types::LocalMktDate, ::bovespa_mbo_sbe::types::LocalMktDate::value_type, ::sbepp::endian::little>(*this, 20);
    }

    template<
        typename T = void,
        typename = ::sbepp::detail::enable_if_writable_t<Byte, T>>
    SBEPP_CPP20_CONSTEXPR void tradeDate(::bovespa_mbo_sbe::types::LocalMktDate v) const noexcept
    {
        ::sbepp::detail::set_value<::sbepp::endian::little>(*this, 20, v.value());
    }
    constexpr ::bovespa_mbo_sbe::types::UTCTimestampNanos<Byte> tradSesOpenTime() const noexcept
    {
        return ::sbepp::detail::get_static_field_view<::bovespa_mbo_sbe::types::UTCTimestampNanos<Byte>>(
            *this, 24);
    }
    constexpr ::bovespa_mbo_sbe::types::UTCTimestampNanos<Byte> transactTime() const noexcept
    {
        return ::sbepp::detail::get_static_field_view<::bovespa_mbo_sbe::types::UTCTimestampNanos<Byte>>(
            *this, 32);
    }

    template<
        typename Cursor,
        typename = ::sbepp::detail::enable_if_cursor_compatible_t<
            Byte, ::sbepp::detail::cursor_byte_type_t<Cursor>>>
    SBEPP_CPP20_CONSTEXPR auto
        securityGroup(Cursor&& c) const noexcept
        -> ::sbepp::detail::cursor_result_type_t<Cursor, ::bovespa_mbo_sbe::types::SecurityGroup<
            ::sbepp::detail::cursor_byte_type_t<Cursor>>>
    {
        return c.template get_static_field_view<::bovespa_mbo_sbe::types::SecurityGroup<
            ::sbepp::detail::cursor_byte_type_t<Cursor>>>(
                *this, 0, 8);
    }

    template<
        typename Cursor,
        typename = ::sbepp::detail::enable_if_cursor_compatible_t<
            Byte, ::sbepp::detail::cursor_byte_type_t<Cursor>>>
    SBEPP_CPP20_CONSTEXPR auto
        matchEventIndicator(Cursor&& c) const noexcept
        -> ::sbepp::detail::cursor_result_type_t<Cursor, ::bovespa_mbo_sbe::types::MatchEventIndicator>
    {
        return c.template get_value<::bovespa_mbo_sbe::types::MatchEventIndicator, ::std::uint8_t, ::sbepp::endian::little>(
            *this, 5, 16);
    }

    template<
        typename Cursor,
        typename = ::sbepp::detail::enable_if_cursor_writeable_t<
            Byte, ::sbepp::detail::cursor_byte_type_t<Cursor>>>
    SBEPP_CPP20_CONSTEXPR void matchEventIndicator(
        ::bovespa_mbo_sbe::types::MatchEventIndicator v, Cursor&& c) const noexcept
    {
        c.template set_value<::sbepp::endian::little>(*this, 5, 16, *v);
    }

    template<
        typename Cursor,
        typename = ::sbepp::detail::enable_if_cursor_compatible_t<
            Byte, ::sbepp::detail::cursor_byte_type_t<Cursor>>>
    SBEPP_CPP20_CONSTEXPR auto
        tradingSessionID(Cursor&& c) const noexcept
        -> ::sbepp::detail::cursor_result_type_t<Cursor, ::bovespa_mbo_sbe::types::TradingSessionID>
    {
        return c.template get_value<::bovespa_mbo_sbe::types::TradingSessionID, ::bovespa_mbo_sbe::types::TradingSessionID, ::sbepp::endian::little>(
            *this, 0, 17);
    }

    template<
        typename Cursor,
        typename = ::sbepp::detail::enable_if_cursor_writeable_t<
            Byte, ::sbepp::detail::cursor_byte_type_t<Cursor>>>
    SBEPP_CPP20_CONSTEXPR void tradingSessionID(
        ::bovespa_mbo_sbe::types::TradingSessionID v, Cursor&& c) const noexcept
    {
        return c.template set_value<::sbepp::endian::little>(
            *this, 0, 17, v);
    }

    template<
        typename Cursor,
        typename = ::sbepp::detail::enable_if_cursor_compatible_t<
            Byte, ::sbepp::detail::cursor_byte_type_t<Cursor>>>
    SBEPP_CPP20_CONSTEXPR auto
        tradingSessionSubID(Cursor&& c) const noexcept
        -> ::sbepp::detail::cursor_result_type_t<Cursor, ::bovespa_mbo_sbe::types::TradingSessionSubID>
    {
        return c.template get_value<::bovespa_mbo_sbe::types::TradingSessionSubID, ::bovespa_mbo_sbe::types::TradingSessionSubID, ::sbepp::endian::little>(
            *this, 0, 18);
    }

    template<
        typename Cursor,
        typename = ::sbepp::detail::enable_if_cursor_writeable_t<
            Byte, ::sbepp::detail::cursor_byte_type_t<Cursor>>>
    SBEPP_CPP20_CONSTEXPR void tradingSessionSubID(
        ::bovespa_mbo_sbe::types::TradingSessionSubID v, Cursor&& c) const noexcept
    {
        return c.template set_value<::sbepp::endian::little>(
            *this, 0, 18, v);
    }

    template<
        typename Cursor,
        typename = ::sbepp::detail::enable_if_cursor_compatible_t<
            Byte, ::sbepp::detail::cursor_byte_type_t<Cursor>>>
    SBEPP_CPP20_CONSTEXPR auto
        securityTradingEvent(Cursor&& c) const noexcept
        -> ::sbepp::detail::cursor_result_type_t<Cursor, ::bovespa_mbo_sbe::types::SecurityTradingEvent>
    {
        return c.template get_value<::bovespa_mbo_sbe::types::SecurityTradingEvent, ::bovespa_mbo_sbe::types::SecurityTradingEvent, ::sbepp::endian::little>(
            *this, 0, 19);
    }

    template<
        typename Cursor,
        typename = ::sbepp::detail::enable_if_cursor_writeable_t<
            Byte, ::sbepp::detail::cursor_byte_type_t<Cursor>>>
    SBEPP_CPP20_CONSTEXPR void securityTradingEvent(
        ::bovespa_mbo_sbe::types::SecurityTradingEvent v, Cursor&& c) const noexcept
    {
        return c.template set_value<::sbepp::endian::little>(
            *this, 0, 19, v);
    }

    template<
        typename Cursor,
        typename = ::sbepp::detail::enable_if_cursor_compatible_t<
            Byte, ::sbepp::detail::cursor_byte_type_t<Cursor>>>
    SBEPP_CPP20_CONSTEXPR auto
        tradeDate(Cursor&& c) const noexcept
            -> ::sbepp::detail::cursor_result_type_t<Cursor, ::bovespa_mbo_sbe::types::LocalMktDate>
    {
        return c.template get_value<::bovespa_mbo_sbe::types::LocalMktDate, ::std::uint16_t, ::sbepp::endian::little>(
            *this, 0, 20);
    }

    template<
        typename Cursor,
        typename = ::sbepp::detail::enable_if_cursor_writeable_t<
            Byte, ::sbepp::detail::cursor_byte_type_t<Cursor>>>
    SBEPP_CPP20_CONSTEXPR void tradeDate(
        ::bovespa_mbo_sbe::types::LocalMktDate v, Cursor&& c) const noexcept
    {
        return c.template set_value<::sbepp::endian::little>(
            *this, 0, 20, v.value());
    }

    template<
        typename Cursor,
        typename = ::sbepp::detail::enable_if_cursor_compatible_t<
            Byte, ::sbepp::detail::cursor_byte_type_t<Cursor>>>
    SBEPP_CPP20_CONSTEXPR auto tradSesOpenTime(Cursor&& c) const noexcept
        -> ::sbepp::detail::cursor_result_type_t<Cursor, 
            ::bovespa_mbo_sbe::types::UTCTimestampNanos<::sbepp::detail::cursor_byte_type_t<Cursor>>>
    {
        return c.template get_static_field_view<::bovespa_mbo_sbe::types::UTCTimestampNanos<::sbepp::detail::cursor_byte_type_t<Cursor>>>(
            *this, 2, 24);
    }

    template<
        typename Cursor,
        typename = ::sbepp::detail::enable_if_cursor_compatible_t<
            Byte, ::sbepp::detail::cursor_byte_type_t<Cursor>>>
    SBEPP_CPP20_CONSTEXPR auto transactTime(Cursor&& c) const noexcept
        -> ::sbepp::detail::cursor_result_type_t<Cursor,
            ::bovespa_mbo_sbe::types::UTCTimestampNanos<::sbepp::detail::cursor_byte_type_t<Cursor>>>
    {
        return c.template get_last_static_field_view<::bovespa_mbo_sbe::types::UTCTimestampNanos<
            ::sbepp::detail::cursor_byte_type_t<Cursor>>>(
                *this, 0, 32);
    }


    template<
        typename T = void,
        typename = ::sbepp::detail::enable_if_writable_t<Byte, T>>
    SBEPP_CPP14_CONSTEXPR ::bovespa_mbo_sbe::types::messageHeader<Byte>
        operator()(::sbepp::detail::fill_message_header_tag) const noexcept
    {
        auto header = operator()(::sbepp::detail::get_header_tag{});
        header.schemaId({2});
        header.templateId({10});
        header.version({8});
        header.blockLength({32});
        
        
        return header;
    }


    SBEPP_CPP20_CONSTEXPR std::size_t operator()(
        ::sbepp::detail::size_bytes_tag) const noexcept
    {
        return 8 + (*this)(::sbepp::detail::get_block_length_tag{});
    }


    template<typename Visitor, typename Cursor>
    SBEPP_CPP14_CONSTEXPR void operator()(
        ::sbepp::detail::visit_tag, Visitor& v, Cursor& c)
    {
        v.template on_message(*this, c, ::bovespa_mbo_sbe::schema::messages::SecurityGroupPhase_10{});
    }


    template<typename Visitor, typename Cursor>
    constexpr bool operator()(
        ::sbepp::detail::visit_children_tag, Visitor& v, Cursor& c) const
    {
        return v.template on_field(this->securityGroup(c), ::bovespa_mbo_sbe::schema::messages::SecurityGroupPhase_10::securityGroup{})
||v.template on_field(this->matchEventIndicator(c), ::bovespa_mbo_sbe::schema::messages::SecurityGroupPhase_10::matchEventIndicator{})
||v.template on_field(this->tradingSessionID(c), ::bovespa_mbo_sbe::schema::messages::SecurityGroupPhase_10::tradingSessionID{})
||v.template on_field(this->tradingSessionSubID(c), ::bovespa_mbo_sbe::schema::messages::SecurityGroupPhase_10::tradingSessionSubID{})
||v.template on_field(this->securityTradingEvent(c), ::bovespa_mbo_sbe::schema::messages::SecurityGroupPhase_10::securityTradingEvent{})
||v.template on_field(this->tradeDate(c), ::bovespa_mbo_sbe::schema::messages::SecurityGroupPhase_10::tradeDate{})
||v.template on_field(this->tradSesOpenTime(c), ::bovespa_mbo_sbe::schema::messages::SecurityGroupPhase_10::tradSesOpenTime{})
||v.template on_field(this->transactTime(c), ::bovespa_mbo_sbe::schema::messages::SecurityGroupPhase_10::transactTime{});
    }

};

} // namespace messages
} // namespace detail

namespace messages
{

    template<typename Byte>
    using SecurityGroupPhase_10 = ::bovespa_mbo_sbe::detail::messages::message_6<Byte>;

} // namespace messages
} // namespace bovespa_mbo_sbe

namespace sbepp
{

template<>
class field_traits<::bovespa_mbo_sbe::schema::messages::SecurityGroupPhase_10::messageType>
{
public:
    static constexpr const char* name() noexcept
    {
        return "messageType";
    }

    static constexpr member_id_t id() noexcept
    {
        return 35;
    }

    static constexpr const char* description() noexcept
    {
        return "";
    }

    static constexpr field_presence presence() noexcept
    {
        return ::sbepp::field_presence::constant;
    }
    
    static constexpr offset_t offset() noexcept
    {
        return {0};
    }


    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    
    using value_type = ::bovespa_mbo_sbe::types::MessageType;
    
};

template<>
class field_traits<::bovespa_mbo_sbe::schema::messages::SecurityGroupPhase_10::applVerID>
{
public:
    static constexpr const char* name() noexcept
    {
        return "applVerID";
    }

    static constexpr member_id_t id() noexcept
    {
        return 1128;
    }

    static constexpr const char* description() noexcept
    {
        return "Specifies the service pack release being applied at message level";
    }

    static constexpr field_presence presence() noexcept
    {
        return ::sbepp::field_presence::constant;
    }
    
    static constexpr offset_t offset() noexcept
    {
        return {0};
    }


    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    
    using value_type = ::bovespa_mbo_sbe::types::ApplVerID;
    
};

template<>
class field_traits<::bovespa_mbo_sbe::schema::messages::SecurityGroupPhase_10::securityGroup>
{
public:
    static constexpr const char* name() noexcept
    {
        return "securityGroup";
    }

    static constexpr member_id_t id() noexcept
    {
        return 1151;
    }

    static constexpr const char* description() noexcept
    {
        return "Security Group.";
    }

    static constexpr field_presence presence() noexcept
    {
        return ::sbepp::field_presence::required;
    }
    
    static constexpr offset_t offset() noexcept
    {
        return {0};
    }


    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    
    
    template<typename Byte>
    using value_type = ::bovespa_mbo_sbe::types::SecurityGroup<Byte>;

    using value_type_tag = ::bovespa_mbo_sbe::schema::types::SecurityGroup;
};

template<>
class field_traits<::bovespa_mbo_sbe::schema::messages::SecurityGroupPhase_10::matchEventIndicator>
{
public:
    static constexpr const char* name() noexcept
    {
        return "matchEventIndicator";
    }

    static constexpr member_id_t id() noexcept
    {
        return 37035;
    }

    static constexpr const char* description() noexcept
    {
        return "Identifies the end of the current event and if it is a retransmission.";
    }

    static constexpr field_presence presence() noexcept
    {
        return ::sbepp::field_presence::required;
    }
    
    static constexpr offset_t offset() noexcept
    {
        return {8};
    }


    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    
    using value_type = ::bovespa_mbo_sbe::types::MatchEventIndicator;
    using value_type_tag = ::bovespa_mbo_sbe::schema::types::MatchEventIndicator;
};

template<>
class field_traits<::bovespa_mbo_sbe::schema::messages::SecurityGroupPhase_10::tradingSessionID>
{
public:
    static constexpr const char* name() noexcept
    {
        return "tradingSessionID";
    }

    static constexpr member_id_t id() noexcept
    {
        return 336;
    }

    static constexpr const char* description() noexcept
    {
        return "Identifier for trading session.";
    }

    static constexpr field_presence presence() noexcept
    {
        return ::sbepp::field_presence::required;
    }
    
    static constexpr offset_t offset() noexcept
    {
        return {9};
    }


    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    
    using value_type = ::bovespa_mbo_sbe::types::TradingSessionID;
    using value_type_tag = ::bovespa_mbo_sbe::schema::types::TradingSessionID;
};

template<>
class field_traits<::bovespa_mbo_sbe::schema::messages::SecurityGroupPhase_10::tradingSessionSubID>
{
public:
    static constexpr const char* name() noexcept
    {
        return "tradingSessionSubID";
    }

    static constexpr member_id_t id() noexcept
    {
        return 625;
    }

    static constexpr const char* description() noexcept
    {
        return "Phase related to a given SecurityGroup.";
    }

    static constexpr field_presence presence() noexcept
    {
        return ::sbepp::field_presence::required;
    }
    
    static constexpr offset_t offset() noexcept
    {
        return {10};
    }


    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    
    using value_type = ::bovespa_mbo_sbe::types::TradingSessionSubID;
    using value_type_tag = ::bovespa_mbo_sbe::schema::types::TradingSessionSubID;
};

template<>
class field_traits<::bovespa_mbo_sbe::schema::messages::SecurityGroupPhase_10::securityTradingEvent>
{
public:
    static constexpr const char* name() noexcept
    {
        return "securityTradingEvent";
    }

    static constexpr member_id_t id() noexcept
    {
        return 1174;
    }

    static constexpr const char* description() noexcept
    {
        return "Indicates if the trading session changed in order to reset some statistics for this group.";
    }

    static constexpr field_presence presence() noexcept
    {
        return ::sbepp::field_presence::required;
    }
    
    static constexpr offset_t offset() noexcept
    {
        return {11};
    }


    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    
    using value_type = ::bovespa_mbo_sbe::types::SecurityTradingEvent;
    using value_type_tag = ::bovespa_mbo_sbe::schema::types::SecurityTradingEvent;
};

template<>
class field_traits<::bovespa_mbo_sbe::schema::messages::SecurityGroupPhase_10::tradeDate>
{
public:
    static constexpr const char* name() noexcept
    {
        return "tradeDate";
    }

    static constexpr member_id_t id() noexcept
    {
        return 75;
    }

    static constexpr const char* description() noexcept
    {
        return "Used to specify the trading date for which a set of market data applies.";
    }

    static constexpr field_presence presence() noexcept
    {
        return ::sbepp::field_presence::required;
    }
    
    static constexpr offset_t offset() noexcept
    {
        return {12};
    }


    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    
    using value_type = ::bovespa_mbo_sbe::types::LocalMktDate;
    using value_type_tag = ::bovespa_mbo_sbe::schema::types::LocalMktDate;
};

template<>
class field_traits<::bovespa_mbo_sbe::schema::messages::SecurityGroupPhase_10::tradSesOpenTime>
{
public:
    static constexpr const char* name() noexcept
    {
        return "tradSesOpenTime";
    }

    static constexpr member_id_t id() noexcept
    {
        return 342;
    }

    static constexpr const char* description() noexcept
    {
        return "Estimated end of the current auction. Only present when TradingSessionSubID=21 (Pre-open/Reserved).";
    }

    static constexpr field_presence presence() noexcept
    {
        return ::sbepp::field_presence::optional;
    }
    
    static constexpr offset_t offset() noexcept
    {
        return {16};
    }


    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    
    
    template<typename Byte>
    using value_type = ::bovespa_mbo_sbe::types::UTCTimestampNanos<Byte>;

    using value_type_tag = ::bovespa_mbo_sbe::schema::types::UTCTimestampNanos;
};

template<>
class field_traits<::bovespa_mbo_sbe::schema::messages::SecurityGroupPhase_10::transactTime>
{
public:
    static constexpr const char* name() noexcept
    {
        return "transactTime";
    }

    static constexpr member_id_t id() noexcept
    {
        return 60;
    }

    static constexpr const char* description() noexcept
    {
        return "Timestamp when the business transaction represented by the message occurred.";
    }

    static constexpr field_presence presence() noexcept
    {
        return ::sbepp::field_presence::required;
    }
    
    static constexpr offset_t offset() noexcept
    {
        return {24};
    }


    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    
    
    template<typename Byte>
    using value_type = ::bovespa_mbo_sbe::types::UTCTimestampNanos<Byte>;

    using value_type_tag = ::bovespa_mbo_sbe::schema::types::UTCTimestampNanos;
};

template<>
class message_traits<::bovespa_mbo_sbe::schema::messages::SecurityGroupPhase_10>
{
public:
    static constexpr const char* name() noexcept
    {
        return "SecurityGroupPhase_10";
    }

    static constexpr const char* description() noexcept
    {
        return "Trading status for security groups";
    }

    static constexpr message_id_t id() noexcept
    {
        return 10;
    }

    static constexpr block_length_t block_length() noexcept
    {
        return 32;
    }

    static constexpr const char* semantic_type() noexcept
    {
        return "";
    }

    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    
    
    template<typename Byte>
    using value_type = ::bovespa_mbo_sbe::messages::SecurityGroupPhase_10<Byte>;

    using schema_tag = ::bovespa_mbo_sbe::schema;
    static constexpr ::std::size_t size_bytes() noexcept
    {
        return ::sbepp::composite_traits<
            ::sbepp::schema_traits<schema_tag>::header_type_tag>::size_bytes()
            + block_length();
    }

};

template<typename Byte>
struct traits_tag<::bovespa_mbo_sbe::messages::SecurityGroupPhase_10<Byte>>
{
    using type = ::bovespa_mbo_sbe::schema::messages::SecurityGroupPhase_10;
};


}  // namespace sbepp

SBEPP_WARNINGS_ON();
