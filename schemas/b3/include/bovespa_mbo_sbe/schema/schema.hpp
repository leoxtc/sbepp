// SPDX-License-Identifier: MIT
// Copyright (c) 2023, Oleksandr Koval

// This file was generated by sbeppc 1.3.0
#pragma once


#include <sbepp/sbepp.hpp>

SBEPP_WARNINGS_OFF();

namespace bovespa_mbo_sbe
{
namespace detail
{
namespace schema
{
struct set_1
{
    struct OpeningPrice{};
    struct Crossed{};
    struct LastTradeAtTheSamePrice{};
    struct OutOfSequence{};
    struct TradeOnBehalf{};
    struct RegularTrade{};
    struct BlockTrade{};

};
struct enum_1
{
    struct ISIN{};
    struct EXCHANGE_SYMBOL{};

};
struct enum_2
{
    struct ELECTRONIC_MATCH_OR_GTD_GTC_ELIGIBLE{};
    struct ORDER_CROSS_ELIGIBLE{};
    struct BLOCK_TRADE_ELIGIBLE{};
    struct FLAG_RFQ_FOR_CROSS_ELIGIBLE{};
    struct NEGOTIATED_QUOTE_ELIGIBLE{};

};
struct type_1{};
struct type_2{};
struct type_3{};
struct type_4{};
struct type_5{};
struct type_6{};
struct type_7{};
struct type_8{};
struct type_9{};
struct type_10{};
struct enum_3
{
    struct TRADE_TYPE_ELIGIBILITY{};
    struct GTD_GTC_ELIGIBILITY{};

};
struct type_11{};
struct type_12{};
struct type_13{};
struct type_14{};
struct type_15{};
struct type_16{};
struct type_17{};
struct type_18{};
struct type_19{};
struct enum_4
{
    struct FINAL{};
    struct THEORETICAL{};
    struct UPDATED{};

};
struct type_20{};
struct enum_5
{
    struct PAUSE{};
    struct CLOSE{};
    struct OPEN{};
    struct FORBIDDEN{};
    struct UNKNOWN_OR_INVALID{};
    struct RESERVED{};
    struct FINAL_CLOSING_CALL{};

};
struct enum_6
{
    struct FIX27{};
    struct FIX30{};
    struct FIX40{};
    struct FIX41{};
    struct FIX42{};
    struct FIX43{};
    struct FIX44{};
    struct FIX50{};
    struct FIX50SP1{};
    struct FIX50SP2{};

};
struct type_21{};
struct type_22{};
struct type_23{};
struct type_24{};
struct composite_1
{
using mantissa = ::bovespa_mbo_sbe::detail::schema::type_23;
using exponent = ::bovespa_mbo_sbe::detail::schema::type_24;

};
struct enum_7
{
    struct ODD_LOT{};
    struct ROUND_LOT{};
    struct BLOCK_LOT{};

};
struct enum_8
{
    struct Sequence{};
    struct SequenceReset{};
    struct MarketDataIncrementalRefresh{};
    struct SecurityStatus{};
    struct SecurityDefinition{};
    struct News{};
    struct MarketDataSnapshotFullRefresh{};

};
struct type_25{};
struct type_26{};
struct type_27{};
struct type_28{};
struct composite_2
{
using blockLength = ::bovespa_mbo_sbe::detail::schema::type_25;
using templateId = ::bovespa_mbo_sbe::detail::schema::type_26;
using schemaId = ::bovespa_mbo_sbe::detail::schema::type_27;
using version = ::bovespa_mbo_sbe::detail::schema::type_28;

};
struct type_29{};
struct set_2
{
    struct LastTradeMsg{};
    struct LastVolumeMsg{};
    struct LastQuoteMsg{};
    struct LastStatsMsg{};
    struct LastImpliedMsg{};
    struct RecoveryMsg{};
    struct Reserved{};
    struct EndOfEvent{};

};
struct type_30{};
struct enum_9
{
    struct PERCENTAGE{};
    struct PU{};
    struct FIXED_AMOUNT{};

};
struct type_31{};
struct enum_10
{
    struct EUROPEAN{};
    struct AMERICAN{};

};
struct type_32{};
struct type_33{};
struct type_34{};
struct type_35{};
struct enum_11
{
    struct NET_PRICE{};
    struct REVERSED_NET_PRICE{};
    struct YIELD_DIFFERENCE{};
    struct INDIVIDUAL{};
    struct CONTRACT_WEIGHTED_AVERAGE_PRICE{};
    struct MULTIPLIED_PRICE{};

};
struct type_36{};
struct type_37{};
struct type_38{};
struct type_39{};
struct type_40{};
struct type_41{};
struct type_42{};
struct composite_3
{
using channelNumber = ::bovespa_mbo_sbe::detail::schema::type_38;
using reserved = ::bovespa_mbo_sbe::detail::schema::type_39;
using sequenceVersion = ::bovespa_mbo_sbe::detail::schema::type_40;
using sequenceNumber = ::bovespa_mbo_sbe::detail::schema::type_41;
using sendingTime = ::bovespa_mbo_sbe::detail::schema::type_42;

};
struct type_43{};
struct type_44{};
struct composite_4
{
using messageLength = ::bovespa_mbo_sbe::detail::schema::type_43;
using encodingType = ::bovespa_mbo_sbe::detail::schema::type_44;

};
struct type_45{};
struct set_3
{
    struct ImbalanceMoreBuyers{};
    struct ImbalanceMoreSellers{};

};
struct type_46{};
struct type_47{};
struct composite_5
{
using mantissa = ::bovespa_mbo_sbe::detail::schema::type_46;
using exponent = ::bovespa_mbo_sbe::detail::schema::type_47;

};
struct enum_12
{
    struct SECOND{};
    struct MILLISECOND{};
    struct MICROSECOND{};
    struct NANOSECOND{};

};
struct type_48{};
struct type_49{};
struct type_50{};
struct enum_13
{
    struct PAUSE{};
    struct CLOSE{};
    struct OPEN{};
    struct FORBIDDEN{};
    struct UNKNOWN_OR_INVALID{};
    struct RESERVED{};
    struct FINAL_CLOSING_CALL{};

};
struct type_51{};
struct type_52{};
struct type_53{};
struct type_54{};
struct composite_6
{
using length = ::bovespa_mbo_sbe::detail::schema::type_53;
using varData = ::bovespa_mbo_sbe::detail::schema::type_54;

};
struct type_55{};
struct type_56{};
struct type_57{};
struct composite_7
{
using mantissa = ::bovespa_mbo_sbe::detail::schema::type_56;
using exponent = ::bovespa_mbo_sbe::detail::schema::type_57;

};
struct type_58{};
struct type_59{};
struct type_60{};
struct type_61{};
struct type_62{};
struct type_63{};
struct type_64{};
struct type_65{};
struct composite_8
{
using mantissa = ::bovespa_mbo_sbe::detail::schema::type_64;
using exponent = ::bovespa_mbo_sbe::detail::schema::type_65;

};
struct type_66{};
struct type_67{};
struct composite_9
{
using mantissa = ::bovespa_mbo_sbe::detail::schema::type_66;
using exponent = ::bovespa_mbo_sbe::detail::schema::type_67;

};
struct enum_14
{
    struct PRICE_UNIT{};
    struct TICKS{};
    struct PERCENTAGE{};

};
struct type_68{};
struct type_69{};
struct composite_10
{
using time = ::bovespa_mbo_sbe::detail::schema::type_68;
using unit = ::bovespa_mbo_sbe::detail::schema::type_69;

};
struct type_70{};
struct type_71{};
struct type_72{};
struct composite_11
{
using time = ::bovespa_mbo_sbe::detail::schema::type_71;
using unit = ::bovespa_mbo_sbe::detail::schema::type_72;

};
struct enum_15
{
    struct HARD_LIMIT{};
    struct AUCTION_LIMITS{};
    struct REJECTION_BAND{};
    struct STATIC_LIMITS{};

};
struct type_73{};
struct type_74{};
struct composite_12
{
using mantissa = ::bovespa_mbo_sbe::detail::schema::type_73;
using exponent = ::bovespa_mbo_sbe::detail::schema::type_74;

};
struct enum_16
{
    struct NEW{};
    struct CHANGE{};
    struct DELETE{};
    struct DELETE_THRU{};
    struct DELETE_FROM{};
    struct OVERLAY{};

};
struct type_75{};
struct type_76{};
struct composite_13
{
using mantissa = ::bovespa_mbo_sbe::detail::schema::type_75;
using exponent = ::bovespa_mbo_sbe::detail::schema::type_76;

};
struct type_77{};
struct type_78{};
struct type_79{};
struct type_80{};
struct composite_14
{
using mantissa = ::bovespa_mbo_sbe::detail::schema::type_79;
using exponent = ::bovespa_mbo_sbe::detail::schema::type_80;

};
struct enum_17
{
    struct BUY{};
    struct SELL{};

};
struct enum_18
{
    struct ADD{};
    struct DELETE{};
    struct MODIFY{};

};
struct enum_19
{
    struct ISSUING_BUY_BACK_AUCTION{};

};
struct enum_20
{
    struct COMMODITY{};
    struct CORPORATE{};
    struct CURRENCY{};
    struct EQUITY{};
    struct GOVERNMENT{};
    struct INDEX{};
    struct ECONOMIC_INDICATOR{};
    struct MULTILEG{};

};
struct enum_21
{
    struct CASH{};
    struct CORP{};
    struct CS{};
    struct DTERM{};
    struct ETF{};
    struct FOPT{};
    struct FORWARD{};
    struct FUT{};
    struct INDEX{};
    struct INDEXOPT{};
    struct MLEG{};
    struct OPT{};
    struct OPTEXER{};
    struct PS{};
    struct SECLOAN{};
    struct SOPT{};
    struct SPOT{};

};
struct enum_22
{
    struct No{};
    struct N1{};
    struct N2{};
    struct NM{};
    struct MA{};
    struct MB{};
    struct M2{};

};
struct enum_23
{
    struct FALSE_VALUE{};
    struct TRUE_VALUE{};

};
struct enum_24
{
    struct NO_AGGRESSOR{};
    struct BUY{};
    struct SELL{};

};
struct enum_25
{
    struct REGULAR_TRADING_SESSION{};
    struct NON_REGULAR_TRADING_SESSION{};

};
struct type_81{};
struct type_82{};
struct type_83{};
struct type_84{};
struct composite_15
{
using year = ::bovespa_mbo_sbe::detail::schema::type_81;
using month = ::bovespa_mbo_sbe::detail::schema::type_82;
using day = ::bovespa_mbo_sbe::detail::schema::type_83;
using week = ::bovespa_mbo_sbe::detail::schema::type_84;

};
struct enum_26
{
    struct TRADING_SESSION_CHANGE{};
    struct SECURITY_STATUS_CHANGE{};
    struct SECURITY_REJOINS_SECURITY_GROUP_STATUS{};

};
struct enum_27
{
    struct DAILY{};
    struct SESSION{};
    struct EXPECTED_ENTRY{};
    struct ENTRY_FROM_PREVIOUS_BUSINESS_DAY{};
    struct THEORETICAL_PRICE{};

};
struct type_85{};
struct enum_28
{
    struct PUT{};
    struct CALL{};

};
struct enum_29
{
    struct LAST_TRADED_PRICE{};
    struct COMPLEMENTARY_LAST_PRICE{};
    struct THEORETICAL_PRICE{};

};
struct type_86{};
struct enum_30
{
    struct TRADE{};
    struct AVERAGE_OF_TOB{};

};
struct enum_31
{
    struct BID{};
    struct OFFER{};
    struct TRADE{};
    struct INDEX_VALUE{};
    struct OPENING_PRICE{};
    struct CLOSING_PRICE{};
    struct SETTLEMENT_PRICE{};
    struct SESSION_HIGH_PRICE{};
    struct SESSION_LOW_PRICE{};
    struct EXECUTION_STATISTICS{};
    struct IMBALANCE{};
    struct TRADE_VOLUME{};
    struct OPEN_INTEREST{};
    struct EMPTY_BOOK{};
    struct SECURITY_TRADING_STATE_PHASE{};
    struct PRICE_BAND{};
    struct QUANTITY_BAND{};
    struct COMPOSITE_UNDERLYING_PRICE{};
    struct EXECUTION_SUMMARY{};
    struct VOLATILITY_PRICE{};
    struct TRADE_BUST{};

};
struct type_87{};
struct type_88{};
struct composite_16
{
using blockLength = ::bovespa_mbo_sbe::detail::schema::type_87;
using numInGroup = ::bovespa_mbo_sbe::detail::schema::type_88;

};
struct type_89{};
struct enum_32
{
    struct OTHER{};
    struct DCM{};
    struct BBMNET{};
    struct MARKET_SURVEILLANCE{};
    struct INTERNET{};
    struct DPR_VE{};
    struct MKT_OPS_FX_AGENCY{};
    struct MKT_OPS_DERIVATIVES_AGENCY{};
    struct OVER_THE_COUNTER_NEWS_AGENCY{};
    struct ELECTRONIC_PURCHASE_EXCHANGE{};
    struct CBLC_NEWS_AGENCY{};
    struct BOVESPA_INDEX_AGENCY{};
    struct BOVESPA_INSTITUTIONAL_AGENCY{};
    struct MKT_OPS_EQUITIES_AGENCY{};
    struct BOVESPA_COMPANIES_AGENCY{};

};
struct enum_33
{
    struct PREDEFINED{};
    struct USER_DEFINED{};

};
struct enum_34
{
    struct MULTI_ASSET_TRADE{};
    struct LEG_TRADE{};
    struct MIDPOINT_TRADE{};
    struct BLOCK_BOOK_TRADE{};
    struct RF_TRADE{};
    struct RLP_TRADE{};
    struct TAC_TRADE{};
    struct TAA_TRADE{};

};
struct type_90{};
struct type_91{};
struct composite_17
{
using length = ::bovespa_mbo_sbe::detail::schema::type_90;
using varData = ::bovespa_mbo_sbe::detail::schema::type_91;

};
struct message_1
{
    struct messageType{};
    struct applVerID{};
    struct newSeqNo{};

};
struct message_2
{
    struct messageType{};
    struct applVerID{};
    struct nextSeqNo{};

};
struct message_3
{
    struct messageType{};
    struct applVerID{};
    struct mDUpdateAction{};
    struct mDEntryType{};
    struct securityID{};
    struct securityIDSource{};
    struct securityExchange{};
    struct matchEventIndicator{};
    struct mDEntryTimestamp : ::bovespa_mbo_sbe::detail::schema::composite_10{};

};
struct message_4
{
    struct messageType{};
    struct applVerID{};
    struct mDUpdateAction{};
    struct mDEntryType{};
    struct matchEventIndicator{};
    struct mDEntryTimestamp : ::bovespa_mbo_sbe::detail::schema::composite_10{};

};
struct message_5
{
    struct messageType{};
    struct applVerID{};
    struct securityID{};
    struct securityIDSource{};
    struct securityExchange{};
    struct matchEventIndicator{};
    struct tradingSessionID{};
    struct securityTradingStatus{};
    struct securityTradingEvent{};
    struct tradeDate{};
    struct tradSesOpenTime : ::bovespa_mbo_sbe::detail::schema::composite_10{};
    struct transactTime : ::bovespa_mbo_sbe::detail::schema::composite_10{};
    struct rptSeq{};

};
struct message_6
{
    struct messageType{};
    struct applVerID{};
    struct securityGroup{};
    struct matchEventIndicator{};
    struct tradingSessionID{};
    struct tradingSessionSubID{};
    struct securityTradingEvent{};
    struct tradeDate{};
    struct tradSesOpenTime : ::bovespa_mbo_sbe::detail::schema::composite_10{};
    struct transactTime : ::bovespa_mbo_sbe::detail::schema::composite_10{};

};
struct group_1
{
    struct underlyingSecurityID{};
    struct underlyingSecurityIDSource{};
    struct underlyingSecurityExchange{};
    struct indexPct : ::bovespa_mbo_sbe::detail::schema::composite_13{};
    struct indexTheoreticalQty : ::bovespa_mbo_sbe::detail::schema::composite_12{};
    struct underlyingSymbol{};

};
struct group_2
{
    struct legSecurityID{};
    struct legSecurityIDSource{};
    struct legSecurityExchange{};
    struct legRatioQty : ::bovespa_mbo_sbe::detail::schema::composite_9{};
    struct legSecurityType{};
    struct legSide{};
    struct legSymbol{};

};
struct group_3
{
    struct instrAttribType{};
    struct instrAttribValue{};

};
struct message_7
{
    struct messageType{};
    struct applVerID{};
    struct securityID{};
    struct securityExchange{};
    struct securityIDSource{};
    struct securityGroup{};
    struct symbol{};
    struct securityUpdateAction{};
    struct securityType{};
    struct securitySubType{};
    struct totNoRelatedSym{};
    struct minPriceIncrement : ::bovespa_mbo_sbe::detail::schema::composite_1{};
    struct strikePrice : ::bovespa_mbo_sbe::detail::schema::composite_1{};
    struct contractMultiplier : ::bovespa_mbo_sbe::detail::schema::composite_12{};
    struct priceDivisor : ::bovespa_mbo_sbe::detail::schema::composite_12{};
    struct securityValidityTimestamp : ::bovespa_mbo_sbe::detail::schema::composite_11{};
    struct noSharesIssued{};
    struct clearingHouseID{};
    struct minOrderQty{};
    struct maxOrderQty{};
    struct minLotSize{};
    struct minTradeVol{};
    struct corporateActionEventId{};
    struct issueDate{};
    struct maturityDate{};
    struct countryOfIssue{};
    struct startDate{};
    struct endDate{};
    struct settlType{};
    struct settlDate{};
    struct datedDate{};
    struct isinNumber{};
    struct asset{};
    struct cfiCode{};
    struct maturityMonthYear : ::bovespa_mbo_sbe::detail::schema::composite_15{};
    struct contractSettlMonth : ::bovespa_mbo_sbe::detail::schema::composite_15{};
    struct currency{};
    struct strikeCurrency{};
    struct settlCurrency{};
    struct securityStrategyType{};
    struct lotType{};
    struct tickSizeDenominator{};
    struct product{};
    struct exerciseStyle{};
    struct putOrCall{};
    struct priceType{};
    struct marketSegmentID{};
    struct governanceIndicator{};
    struct securityMatchType{};
    struct lastFragment{};
    struct multiLegModel{};
    struct multiLegPriceMethod{};
    struct minCrossQty{};
    using noUnderlyings = ::bovespa_mbo_sbe::detail::schema::group_1;
    using noLegs = ::bovespa_mbo_sbe::detail::schema::group_2;
    using noInstrAttribs = ::bovespa_mbo_sbe::detail::schema::group_3;
    struct securityDesc{};

};
struct group_4
{
    struct underlyingSecurityID{};
    struct underlyingSecurityIDSource{};
    struct underlyingSecurityExchange{};
    struct underlyingSymbol{};

};
struct group_5
{
    struct legSecurityID{};
    struct legSecurityIDSource{};
    struct legSecurityExchange{};
    struct legRatioQty : ::bovespa_mbo_sbe::detail::schema::composite_9{};
    struct legSecurityType{};
    struct legSide{};
    struct legSymbol{};

};
struct group_6
{
    struct instrAttribType{};
    struct instrAttribValue{};

};
struct message_8
{
    struct messageType{};
    struct applVerID{};
    struct securityID{};
    struct securityExchange{};
    struct securityIDSource{};
    struct securityGroup{};
    struct symbol{};
    struct securityUpdateAction{};
    struct securityType{};
    struct securitySubType{};
    struct totNoRelatedSym{};
    struct minPriceIncrement : ::bovespa_mbo_sbe::detail::schema::composite_12{};
    struct strikePrice : ::bovespa_mbo_sbe::detail::schema::composite_1{};
    struct contractMultiplier : ::bovespa_mbo_sbe::detail::schema::composite_12{};
    struct priceDivisor : ::bovespa_mbo_sbe::detail::schema::composite_12{};
    struct securityValidityTimestamp : ::bovespa_mbo_sbe::detail::schema::composite_11{};
    struct noSharesIssued{};
    struct clearingHouseID{};
    struct minOrderQty{};
    struct maxOrderQty{};
    struct minLotSize{};
    struct minTradeVol{};
    struct corporateActionEventId{};
    struct issueDate{};
    struct maturityDate{};
    struct countryOfIssue{};
    struct startDate{};
    struct endDate{};
    struct settlType{};
    struct settlDate{};
    struct datedDate{};
    struct isinNumber{};
    struct asset{};
    struct cfiCode{};
    struct maturityMonthYear : ::bovespa_mbo_sbe::detail::schema::composite_15{};
    struct contractSettlMonth : ::bovespa_mbo_sbe::detail::schema::composite_15{};
    struct currency{};
    struct strikeCurrency{};
    struct settlCurrency{};
    struct securityStrategyType{};
    struct lotType{};
    struct tickSizeDenominator{};
    struct product{};
    struct exerciseStyle{};
    struct putOrCall{};
    struct priceType{};
    struct marketSegmentID{};
    struct governanceIndicator{};
    struct securityMatchType{};
    struct lastFragment{};
    struct multiLegModel{};
    struct multiLegPriceMethod{};
    struct minCrossQty{};
    using noUnderlyings = ::bovespa_mbo_sbe::detail::schema::group_4;
    using noLegs = ::bovespa_mbo_sbe::detail::schema::group_5;
    using noInstrAttribs = ::bovespa_mbo_sbe::detail::schema::group_6;
    struct securityDesc{};

};
struct message_9
{
    struct messageType{};
    struct applVerID{};
    struct securityID{};
    struct securityIDSource{};
    struct securityExchange{};
    struct matchEventIndicator{};
    struct newsSource{};
    struct languageCode{};
    struct partCount{};
    struct partNumber{};
    struct newsID{};
    struct origTime : ::bovespa_mbo_sbe::detail::schema::composite_10{};
    struct totalTextLength{};
    struct headline{};
    struct text{};
    struct uRLLink{};

};
struct message_10
{
    struct messageType{};
    struct applVerID{};
    struct securityID{};
    struct securityIDSource{};
    struct securityExchange{};
    struct matchEventIndicator{};
    struct mDUpdateAction{};
    struct mDEntryType{};
    struct openCloseSettlFlag{};
    struct mDEntryPx : ::bovespa_mbo_sbe::detail::schema::composite_5{};
    struct netChgPrevDay : ::bovespa_mbo_sbe::detail::schema::composite_7{};
    struct tradeDate{};
    struct mDEntryTimestamp : ::bovespa_mbo_sbe::detail::schema::composite_10{};
    struct rptSeq{};

};
struct message_11
{
    struct messageType{};
    struct applVerID{};
    struct securityID{};
    struct securityIDSource{};
    struct securityExchange{};
    struct matchEventIndicator{};
    struct mDUpdateAction{};
    struct mDEntryType{};
    struct openCloseSettlFlag{};
    struct tradeDate{};
    struct mDEntryPx : ::bovespa_mbo_sbe::detail::schema::composite_1{};
    struct mDEntrySize{};
    struct mDEntryTimestamp : ::bovespa_mbo_sbe::detail::schema::composite_10{};
    struct rptSeq{};

};
struct message_12
{
    struct messageType{};
    struct applVerID{};
    struct securityID{};
    struct securityIDSource{};
    struct securityExchange{};
    struct matchEventIndicator{};
    struct mDUpdateAction{};
    struct mDEntryType{};
    struct openCloseSettlFlag{};
    struct mDEntryPx : ::bovespa_mbo_sbe::detail::schema::composite_14{};
    struct lastTradeDate{};
    struct tradeDate{};
    struct mDEntryTimestamp : ::bovespa_mbo_sbe::detail::schema::composite_10{};
    struct rptSeq{};

};
struct message_13
{
    struct messageType{};
    struct applVerID{};
    struct securityID{};
    struct securityIDSource{};
    struct securityExchange{};
    struct matchEventIndicator{};
    struct mDUpdateAction{};
    struct mDEntryType{};
    struct imbalanceCondition{};
    struct mDEntrySize{};
    struct mDEntryTimestamp : ::bovespa_mbo_sbe::detail::schema::composite_10{};
    struct rptSeq{};

};
struct message_14
{
    struct messageType{};
    struct applVerID{};
    struct securityID{};
    struct securityIDSource{};
    struct securityExchange{};
    struct matchEventIndicator{};
    struct mDUpdateAction{};
    struct mDEntryType{};
    struct priceBandType{};
    struct priceLimitType{};
    struct priceBandMidpointPriceType{};
    struct lowLimitPrice : ::bovespa_mbo_sbe::detail::schema::composite_1{};
    struct highLimitPrice : ::bovespa_mbo_sbe::detail::schema::composite_1{};
    struct tradingReferencePrice : ::bovespa_mbo_sbe::detail::schema::composite_1{};
    struct mDEntryTimestamp : ::bovespa_mbo_sbe::detail::schema::composite_10{};
    struct rptSeq{};

};
struct message_15
{
    struct messageType{};
    struct applVerID{};
    struct securityID{};
    struct securityIDSource{};
    struct securityExchange{};
    struct matchEventIndicator{};
    struct mDUpdateAction{};
    struct mDEntryType{};
    struct avgDailyTradedQty{};
    struct maxTradeVol{};
    struct mDEntryTimestamp : ::bovespa_mbo_sbe::detail::schema::composite_10{};
    struct rptSeq{};

};
struct message_16
{
    struct messageType{};
    struct applVerID{};
    struct securityID{};
    struct securityIDSource{};
    struct securityExchange{};
    struct matchEventIndicator{};
    struct mDUpdateAction{};
    struct mDEntryType{};
    struct priceBandType{};
    struct priceLimitType{};
    struct priceBandMidpointPriceType{};
    struct lowLimitPrice : ::bovespa_mbo_sbe::detail::schema::composite_1{};
    struct highLimitPrice : ::bovespa_mbo_sbe::detail::schema::composite_1{};
    struct tradingReferencePrice : ::bovespa_mbo_sbe::detail::schema::composite_12{};
    struct mDEntryTimestamp : ::bovespa_mbo_sbe::detail::schema::composite_10{};
    struct rptSeq{};

};
struct message_17
{
    struct messageType{};
    struct applVerID{};
    struct securityID{};
    struct securityIDSource{};
    struct securityExchange{};
    struct matchEventIndicator{};
    struct mDUpdateAction{};
    struct mDEntryType{};
    struct tradeDate{};
    struct mDEntryPx : ::bovespa_mbo_sbe::detail::schema::composite_5{};
    struct mDEntryTimestamp : ::bovespa_mbo_sbe::detail::schema::composite_10{};
    struct rptSeq{};

};
struct message_18
{
    struct messageType{};
    struct applVerID{};
    struct securityID{};
    struct securityIDSource{};
    struct securityExchange{};
    struct matchEventIndicator{};
    struct mDUpdateAction{};
    struct mDEntryType{};
    struct tradeDate{};
    struct mDEntryPx : ::bovespa_mbo_sbe::detail::schema::composite_5{};
    struct mDEntryTimestamp : ::bovespa_mbo_sbe::detail::schema::composite_10{};
    struct rptSeq{};

};
struct message_19
{
    struct messageType{};
    struct applVerID{};
    struct securityID{};
    struct securityIDSource{};
    struct securityExchange{};
    struct matchEventIndicator{};
    struct mDUpdateAction{};
    struct mDEntryType{};
    struct tradingSessionID{};
    struct tradeCondition{};
    struct mDEntryPx : ::bovespa_mbo_sbe::detail::schema::composite_5{};
    struct mDEntrySize{};
    struct tradeID{};
    struct mDEntryBuyer{};
    struct mDEntrySeller{};
    struct tradeDate{};
    struct mDEntryTimestamp : ::bovespa_mbo_sbe::detail::schema::composite_10{};
    struct rptSeq{};
    struct sellerDays{};
    struct mDEntryInterestRate : ::bovespa_mbo_sbe::detail::schema::composite_8{};
    struct trdSubType{};

};
struct message_20
{
    struct messageType{};
    struct applVerID{};
    struct securityID{};
    struct securityIDSource{};
    struct securityExchange{};
    struct lastMsgSeqNumProcessed{};
    struct totNumReports{};
    struct totNumBids{};
    struct totNumOffers{};
    struct totNumStats{};
    struct lastRptSeq{};

};
struct message_21
{
    struct messageType{};
    struct applVerID{};
    struct securityID{};
    struct securityIDSource{};
    struct securityExchange{};
    struct matchEventIndicator{};
    struct mDUpdateAction{};
    struct mDEntryType{};
    struct mDEntryPx : ::bovespa_mbo_sbe::detail::schema::composite_1{};
    struct mDEntrySize{};
    struct mDEntryPositionNo{};
    struct enteringFirm{};
    struct mDInsertTimestamp : ::bovespa_mbo_sbe::detail::schema::composite_10{};
    struct secondaryOrderID{};
    struct rptSeq{};
    struct mDEntryTimestamp : ::bovespa_mbo_sbe::detail::schema::composite_10{};

};
struct message_22
{
    struct messageType{};
    struct applVerID{};
    struct securityID{};
    struct securityIDSource{};
    struct securityExchange{};
    struct matchEventIndicator{};
    struct mDUpdateAction{};
    struct mDEntryType{};
    struct mDEntryPositionNo{};
    struct mDEntrySize{};
    struct secondaryOrderID{};
    struct mDEntryTimestamp : ::bovespa_mbo_sbe::detail::schema::composite_10{};
    struct rptSeq{};

};
struct message_23
{
    struct messageType{};
    struct applVerID{};
    struct securityID{};
    struct securityIDSource{};
    struct securityExchange{};
    struct matchEventIndicator{};
    struct mDUpdateAction{};
    struct mDEntryType{};
    struct mDEntryPositionNo{};
    struct mDEntryTimestamp : ::bovespa_mbo_sbe::detail::schema::composite_10{};
    struct rptSeq{};

};
struct message_24
{
    struct messageType{};
    struct applVerID{};
    struct securityID{};
    struct securityIDSource{};
    struct securityExchange{};
    struct matchEventIndicator{};
    struct mDUpdateAction{};
    struct mDEntryType{};
    struct tradingSessionID{};
    struct tradeCondition{};
    struct mDEntryPx : ::bovespa_mbo_sbe::detail::schema::composite_5{};
    struct mDEntrySize{};
    struct tradeID{};
    struct mDEntryBuyer{};
    struct mDEntrySeller{};
    struct tradeDate{};
    struct trdSubType{};
    struct mDEntryTimestamp : ::bovespa_mbo_sbe::detail::schema::composite_10{};
    struct rptSeq{};

};
struct message_25
{
    struct messageType{};
    struct applVerID{};
    struct securityID{};
    struct securityIDSource{};
    struct securityExchange{};
    struct matchEventIndicator{};
    struct mDUpdateAction{};
    struct mDEntryType{};
    struct tradingSessionID{};
    struct tradeCondition{};
    struct mDEntryPx : ::bovespa_mbo_sbe::detail::schema::composite_5{};
    struct mDEntrySize{};
    struct tradeID{};
    struct mDEntryBuyer{};
    struct mDEntrySeller{};
    struct tradeDate{};
    struct mDEntryTimestamp : ::bovespa_mbo_sbe::detail::schema::composite_10{};
    struct rptSeq{};
    struct sellerDays{};
    struct mDEntryInterestRate : ::bovespa_mbo_sbe::detail::schema::composite_8{};
    struct trdSubType{};

};
struct message_26
{
    struct messageType{};
    struct applVerID{};
    struct securityID{};
    struct securityIDSource{};
    struct securityExchange{};
    struct mDUpdateAction{};
    struct mDEntryType{};
    struct aggressorSide{};
    struct lastPx : ::bovespa_mbo_sbe::detail::schema::composite_5{};
    struct fillQty{};
    struct tradedHiddenQty{};
    struct cxlQty{};
    struct aggressorTime : ::bovespa_mbo_sbe::detail::schema::composite_10{};
    struct rptSeq{};
    struct mDEntryTimestamp : ::bovespa_mbo_sbe::detail::schema::composite_10{};

};
struct message_27
{
    struct messageType{};
    struct applVerID{};
    struct securityID{};
    struct securityIDSource{};
    struct securityExchange{};
    struct matchEventIndicator{};
    struct mDUpdateAction{};
    struct mDEntryType{};
    struct tradingSessionID{};
    struct tradeDate{};
    struct tradeVolume{};
    struct vwapPx : ::bovespa_mbo_sbe::detail::schema::composite_1{};
    struct netChgPrevDay : ::bovespa_mbo_sbe::detail::schema::composite_7{};
    struct numberOfTrades{};
    struct mDEntryTimestamp : ::bovespa_mbo_sbe::detail::schema::composite_10{};
    struct rptSeq{};

};
struct message_28
{
    struct messageType{};
    struct applVerID{};
    struct securityID{};
    struct securityIDSource{};
    struct securityExchange{};
    struct matchEventIndicator{};
    struct mDUpdateAction{};
    struct mDEntryType{};
    struct tradingSessionID{};
    struct mDEntryPx : ::bovespa_mbo_sbe::detail::schema::composite_5{};
    struct mDEntrySize{};
    struct tradeID{};
    struct tradeDate{};
    struct mDEntryTimestamp : ::bovespa_mbo_sbe::detail::schema::composite_10{};
    struct rptSeq{};

};
struct group_7
{
    struct mDEntryPx : ::bovespa_mbo_sbe::detail::schema::composite_1{};
    struct mDEntrySize{};
    struct mDEntryPositionNo{};
    struct enteringFirm{};
    struct mDInsertTimestamp : ::bovespa_mbo_sbe::detail::schema::composite_10{};
    struct secondaryOrderID{};
    struct mDEntryType{};

};
struct message_29
{
    struct messageType{};
    struct applVerID{};
    struct securityID{};
    struct securityIDSource{};
    struct securityExchange{};
    using noMDEntries = ::bovespa_mbo_sbe::detail::schema::group_7;

};
struct message_30
{
    struct packetHeader : ::bovespa_mbo_sbe::detail::schema::composite_3{};
    struct framingHeader : ::bovespa_mbo_sbe::detail::schema::composite_4{};

};


struct types_0
{
    using TradeCondition = ::bovespa_mbo_sbe::detail::schema::set_1;
    using SecurityIDSource = ::bovespa_mbo_sbe::detail::schema::enum_1;
    using InstrAttribValue = ::bovespa_mbo_sbe::detail::schema::enum_2;
    using SecurityExchange = ::bovespa_mbo_sbe::detail::schema::type_1;
    using SecurityStrategyType = ::bovespa_mbo_sbe::detail::schema::type_2;
    using ClearingHouseID = ::bovespa_mbo_sbe::detail::schema::type_3;
    using ISINNumber = ::bovespa_mbo_sbe::detail::schema::type_4;
    using SecurityID = ::bovespa_mbo_sbe::detail::schema::type_5;
    using Currency = ::bovespa_mbo_sbe::detail::schema::type_6;
    using SecurityIDOptional = ::bovespa_mbo_sbe::detail::schema::type_7;
    using Symbol = ::bovespa_mbo_sbe::detail::schema::type_8;
    using TradeID = ::bovespa_mbo_sbe::detail::schema::type_9;
    using OrderID = ::bovespa_mbo_sbe::detail::schema::type_10;
    using InstrAttribType = ::bovespa_mbo_sbe::detail::schema::enum_3;
    using FirmOptional = ::bovespa_mbo_sbe::detail::schema::type_11;
    using QuantityVolume = ::bovespa_mbo_sbe::detail::schema::type_12;
    using MDEntryPositionNo = ::bovespa_mbo_sbe::detail::schema::type_13;
    using QuantityOptional = ::bovespa_mbo_sbe::detail::schema::type_14;
    using Quantity = ::bovespa_mbo_sbe::detail::schema::type_15;
    using Int32NULL = ::bovespa_mbo_sbe::detail::schema::type_16;
    using RptSeq = ::bovespa_mbo_sbe::detail::schema::type_17;
    using UInt32NULL = ::bovespa_mbo_sbe::detail::schema::type_18;
    using UInt16 = ::bovespa_mbo_sbe::detail::schema::type_19;
    using SettlPriceType = ::bovespa_mbo_sbe::detail::schema::enum_4;
    using MarketSegmentID = ::bovespa_mbo_sbe::detail::schema::type_20;
    using SecurityTradingStatus = ::bovespa_mbo_sbe::detail::schema::enum_5;
    using ApplVerID = ::bovespa_mbo_sbe::detail::schema::enum_6;
    using SeqNum = ::bovespa_mbo_sbe::detail::schema::type_21;
    using Int32 = ::bovespa_mbo_sbe::detail::schema::type_22;
    using PriceOptional = ::bovespa_mbo_sbe::detail::schema::composite_1;
    using LotType = ::bovespa_mbo_sbe::detail::schema::enum_7;
    using MessageType = ::bovespa_mbo_sbe::detail::schema::enum_8;
    using messageHeader = ::bovespa_mbo_sbe::detail::schema::composite_2;
    using UInt32 = ::bovespa_mbo_sbe::detail::schema::type_29;
    using MatchEventIndicator = ::bovespa_mbo_sbe::detail::schema::set_2;
    using CFICode = ::bovespa_mbo_sbe::detail::schema::type_30;
    using PriceType = ::bovespa_mbo_sbe::detail::schema::enum_9;
    using Int16 = ::bovespa_mbo_sbe::detail::schema::type_31;
    using ExerciseStyle = ::bovespa_mbo_sbe::detail::schema::enum_10;
    using Int8 = ::bovespa_mbo_sbe::detail::schema::type_32;
    using Asset = ::bovespa_mbo_sbe::detail::schema::type_33;
    using NumberOfTrades = ::bovespa_mbo_sbe::detail::schema::type_34;
    using Int16NULL = ::bovespa_mbo_sbe::detail::schema::type_35;
    using MultiLegPriceMethod = ::bovespa_mbo_sbe::detail::schema::enum_11;
    using UInt64 = ::bovespa_mbo_sbe::detail::schema::type_36;
    using UInt8 = ::bovespa_mbo_sbe::detail::schema::type_37;
    using PacketHeader = ::bovespa_mbo_sbe::detail::schema::composite_3;
    using FramingHeader = ::bovespa_mbo_sbe::detail::schema::composite_4;
    using NewsID = ::bovespa_mbo_sbe::detail::schema::type_45;
    using ImbalanceCondition = ::bovespa_mbo_sbe::detail::schema::set_3;
    using Price = ::bovespa_mbo_sbe::detail::schema::composite_5;
    using TimeUnit = ::bovespa_mbo_sbe::detail::schema::enum_12;
    using CharNULL = ::bovespa_mbo_sbe::detail::schema::type_48;
    using Int8NULL = ::bovespa_mbo_sbe::detail::schema::type_49;
    using LocalMktDate32Optional = ::bovespa_mbo_sbe::detail::schema::type_50;
    using TradingSessionSubID = ::bovespa_mbo_sbe::detail::schema::enum_13;
    using QuantityVolumeOptional = ::bovespa_mbo_sbe::detail::schema::type_51;
    using Int64NULL = ::bovespa_mbo_sbe::detail::schema::type_52;
    using VarString = ::bovespa_mbo_sbe::detail::schema::composite_6;
    using UInt64NULL = ::bovespa_mbo_sbe::detail::schema::type_55;
    using PriceOffset8Optional = ::bovespa_mbo_sbe::detail::schema::composite_7;
    using CountryCode = ::bovespa_mbo_sbe::detail::schema::type_58;
    using LanguageCode = ::bovespa_mbo_sbe::detail::schema::type_59;
    using Int64 = ::bovespa_mbo_sbe::detail::schema::type_60;
    using LocalMktDate = ::bovespa_mbo_sbe::detail::schema::type_61;
    using LocalMktDateOptional = ::bovespa_mbo_sbe::detail::schema::type_62;
    using LocalMktDate32 = ::bovespa_mbo_sbe::detail::schema::type_63;
    using Percentage = ::bovespa_mbo_sbe::detail::schema::composite_8;
    using RatioQty = ::bovespa_mbo_sbe::detail::schema::composite_9;
    using PriceLimitType = ::bovespa_mbo_sbe::detail::schema::enum_14;
    using UTCTimestampNanos = ::bovespa_mbo_sbe::detail::schema::composite_10;
    using SeqNum1 = ::bovespa_mbo_sbe::detail::schema::type_70;
    using UTCTimestampSeconds = ::bovespa_mbo_sbe::detail::schema::composite_11;
    using PriceBandType = ::bovespa_mbo_sbe::detail::schema::enum_15;
    using Fixed8 = ::bovespa_mbo_sbe::detail::schema::composite_12;
    using MDUpdateAction = ::bovespa_mbo_sbe::detail::schema::enum_16;
    using Percentage9 = ::bovespa_mbo_sbe::detail::schema::composite_13;
    using UInt8NULL = ::bovespa_mbo_sbe::detail::schema::type_77;
    using SecurityExchangeBVMF = ::bovespa_mbo_sbe::detail::schema::type_78;
    using Price8 = ::bovespa_mbo_sbe::detail::schema::composite_14;
    using Side = ::bovespa_mbo_sbe::detail::schema::enum_17;
    using SecurityUpdateAction = ::bovespa_mbo_sbe::detail::schema::enum_18;
    using SecurityMatchType = ::bovespa_mbo_sbe::detail::schema::enum_19;
    using Product = ::bovespa_mbo_sbe::detail::schema::enum_20;
    using SecurityType = ::bovespa_mbo_sbe::detail::schema::enum_21;
    using GovernanceIndicator = ::bovespa_mbo_sbe::detail::schema::enum_22;
    using Boolean = ::bovespa_mbo_sbe::detail::schema::enum_23;
    using AggressorSide = ::bovespa_mbo_sbe::detail::schema::enum_24;
    using TradingSessionID = ::bovespa_mbo_sbe::detail::schema::enum_25;
    using MaturityMonthYear = ::bovespa_mbo_sbe::detail::schema::composite_15;
    using SecurityTradingEvent = ::bovespa_mbo_sbe::detail::schema::enum_26;
    using OpenCloseSettlFlag = ::bovespa_mbo_sbe::detail::schema::enum_27;
    using UInt16NULL = ::bovespa_mbo_sbe::detail::schema::type_85;
    using PutOrCall = ::bovespa_mbo_sbe::detail::schema::enum_28;
    using PriceBandMidpointPriceType = ::bovespa_mbo_sbe::detail::schema::enum_29;
    using SettlType = ::bovespa_mbo_sbe::detail::schema::type_86;
    using UnderlyingPxType = ::bovespa_mbo_sbe::detail::schema::enum_30;
    using MDEntryType = ::bovespa_mbo_sbe::detail::schema::enum_31;
    using GroupSizeEncoding = ::bovespa_mbo_sbe::detail::schema::composite_16;
    using SecurityGroup = ::bovespa_mbo_sbe::detail::schema::type_89;
    using NewsSource = ::bovespa_mbo_sbe::detail::schema::enum_32;
    using MultiLegModel = ::bovespa_mbo_sbe::detail::schema::enum_33;
    using TrdSubType = ::bovespa_mbo_sbe::detail::schema::enum_34;
    using TextEncoding = ::bovespa_mbo_sbe::detail::schema::composite_17;

};

struct messages_0
{
    using SequenceReset_1 = ::bovespa_mbo_sbe::detail::schema::message_1;
    using Sequence_2 = ::bovespa_mbo_sbe::detail::schema::message_2;
    using EmptyBook_9 = ::bovespa_mbo_sbe::detail::schema::message_3;
    using ChannelReset_11 = ::bovespa_mbo_sbe::detail::schema::message_4;
    using SecurityStatus_3 = ::bovespa_mbo_sbe::detail::schema::message_5;
    using SecurityGroupPhase_10 = ::bovespa_mbo_sbe::detail::schema::message_6;
    using SecurityDefinition_4 = ::bovespa_mbo_sbe::detail::schema::message_7;
    using SecurityDefinition_12 = ::bovespa_mbo_sbe::detail::schema::message_8;
    using News_5 = ::bovespa_mbo_sbe::detail::schema::message_9;
    using OpeningPrice_15 = ::bovespa_mbo_sbe::detail::schema::message_10;
    using TheoreticalOpeningPrice_16 = ::bovespa_mbo_sbe::detail::schema::message_11;
    using ClosingPrice_17 = ::bovespa_mbo_sbe::detail::schema::message_12;
    using AuctionImbalance_19 = ::bovespa_mbo_sbe::detail::schema::message_13;
    using PriceBand_20 = ::bovespa_mbo_sbe::detail::schema::message_14;
    using QuantityBand_21 = ::bovespa_mbo_sbe::detail::schema::message_15;
    using PriceBand_22 = ::bovespa_mbo_sbe::detail::schema::message_16;
    using HighPrice_24 = ::bovespa_mbo_sbe::detail::schema::message_17;
    using LowPrice_25 = ::bovespa_mbo_sbe::detail::schema::message_18;
    using LastTradePrice_27 = ::bovespa_mbo_sbe::detail::schema::message_19;
    using SnapshotFullRefresh_Header_30 = ::bovespa_mbo_sbe::detail::schema::message_20;
    using Order_MBO_50 = ::bovespa_mbo_sbe::detail::schema::message_21;
    using DeleteOrder_MBO_51 = ::bovespa_mbo_sbe::detail::schema::message_22;
    using MassDeleteOrders_MBO_52 = ::bovespa_mbo_sbe::detail::schema::message_23;
    using Trade_53 = ::bovespa_mbo_sbe::detail::schema::message_24;
    using ForwardTrade_54 = ::bovespa_mbo_sbe::detail::schema::message_25;
    using ExecutionSummary_55 = ::bovespa_mbo_sbe::detail::schema::message_26;
    using ExecutionStatistics_56 = ::bovespa_mbo_sbe::detail::schema::message_27;
    using TradeBust_57 = ::bovespa_mbo_sbe::detail::schema::message_28;
    using SnapshotFullRefresh_Orders_MBO_71 = ::bovespa_mbo_sbe::detail::schema::message_29;
    using HeaderMessage_0 = ::bovespa_mbo_sbe::detail::schema::message_30;

};
} // namespace schema
} // namespace detail

struct schema
{
    using types = ::bovespa_mbo_sbe::detail::schema::types_0;
    using messages = ::bovespa_mbo_sbe::detail::schema::messages_0;
};


namespace detail
{
namespace types
{
template<typename Byte>
class composite_2;
} // namespace types
} // namespace detail
} // namespace bovespa_mbo_sbe

namespace sbepp
{

template<>
class schema_traits<::bovespa_mbo_sbe::schema>
{
public:
    static constexpr const char* package() noexcept
    {
        return "b3.umdf.mbo.sbe";
    }

    static constexpr schema_id_t id() noexcept
    {
        return 2;
    }

    static constexpr version_t version() noexcept
    {
        return 8;
    }

    static constexpr const char* semantic_version() noexcept
    {
        return "1.7.0";
    }

    static constexpr endian byte_order() noexcept
    {
        return ::sbepp::endian::little;
    }

    static constexpr const char* description() noexcept
    {
        return "B3 Market Data UMDF SBE messages";
    }

    
    template<typename Byte>
    using header_type = ::bovespa_mbo_sbe::detail::types::composite_2<Byte>;

    using header_type_tag = ::bovespa_mbo_sbe::schema::types::messageHeader;
};

}  // namespace sbepp

SBEPP_WARNINGS_ON();
