// SPDX-License-Identifier: MIT
// Copyright (c) 2023, Oleksandr Koval

// This file was generated by sbeppc 1.3.0
#pragma once

#include <sbepp/sbepp.hpp>

SBEPP_WARNINGS_OFF();

#include "../schema/schema.hpp"


namespace bovespa_mbo_sbe
{
namespace detail
{
namespace types
{

enum class enum_12 : ::std::uint8_t
{
    SECOND = 0,
    MILLISECOND = 3,
    MICROSECOND = 6,
    NANOSECOND = 9
};

template<typename Visitor>
SBEPP_CPP14_CONSTEXPR void tag_invoke(
    ::sbepp::detail::visit_tag, enum_12 e, Visitor& visitor) noexcept
{
    switch(e)
    {
    case enum_12::SECOND:
        visitor.on_enum_value(e, ::bovespa_mbo_sbe::schema::types::TimeUnit::SECOND{});
        break;
    case enum_12::MILLISECOND:
        visitor.on_enum_value(e, ::bovespa_mbo_sbe::schema::types::TimeUnit::MILLISECOND{});
        break;
    case enum_12::MICROSECOND:
        visitor.on_enum_value(e, ::bovespa_mbo_sbe::schema::types::TimeUnit::MICROSECOND{});
        break;
    case enum_12::NANOSECOND:
        visitor.on_enum_value(e, ::bovespa_mbo_sbe::schema::types::TimeUnit::NANOSECOND{});
        break;
    default:
        visitor.on_enum_value(e, ::sbepp::unknown_enum_value_tag{});
    }
}


} // namespace types
} // namespace detail

namespace types
{
using TimeUnit = ::bovespa_mbo_sbe::detail::types::enum_12;
} // namespace types
} // namespace bovespa_mbo_sbe

namespace sbepp
{

template<>
class enum_traits<::bovespa_mbo_sbe::schema::types::TimeUnit>
{
public:
    static constexpr const char* name() noexcept
    {
        return "TimeUnit";
    }

    static constexpr const char* description() noexcept
    {
        return "Unit of time.";
    }

    using encoding_type = ::std::uint8_t;
    
    
    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    
    using value_type = ::bovespa_mbo_sbe::types::TimeUnit;
};

template<>
struct traits_tag<::bovespa_mbo_sbe::types::TimeUnit>
{
    using type = ::bovespa_mbo_sbe::schema::types::TimeUnit;
};


template<>
class enum_value_traits<::bovespa_mbo_sbe::schema::types::TimeUnit::SECOND>
{
public:
    static constexpr const char* name() noexcept
    {
        return "SECOND";
    }

    static constexpr const char* description() noexcept
    {
        return "";
    }
    
    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    

    static constexpr ::bovespa_mbo_sbe::types::TimeUnit value() noexcept
    {
        return ::bovespa_mbo_sbe::types::TimeUnit::SECOND;
    }
};

template<>
class enum_value_traits<::bovespa_mbo_sbe::schema::types::TimeUnit::MILLISECOND>
{
public:
    static constexpr const char* name() noexcept
    {
        return "MILLISECOND";
    }

    static constexpr const char* description() noexcept
    {
        return "";
    }
    
    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    

    static constexpr ::bovespa_mbo_sbe::types::TimeUnit value() noexcept
    {
        return ::bovespa_mbo_sbe::types::TimeUnit::MILLISECOND;
    }
};

template<>
class enum_value_traits<::bovespa_mbo_sbe::schema::types::TimeUnit::MICROSECOND>
{
public:
    static constexpr const char* name() noexcept
    {
        return "MICROSECOND";
    }

    static constexpr const char* description() noexcept
    {
        return "";
    }
    
    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    

    static constexpr ::bovespa_mbo_sbe::types::TimeUnit value() noexcept
    {
        return ::bovespa_mbo_sbe::types::TimeUnit::MICROSECOND;
    }
};

template<>
class enum_value_traits<::bovespa_mbo_sbe::schema::types::TimeUnit::NANOSECOND>
{
public:
    static constexpr const char* name() noexcept
    {
        return "NANOSECOND";
    }

    static constexpr const char* description() noexcept
    {
        return "";
    }
    
    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    

    static constexpr ::bovespa_mbo_sbe::types::TimeUnit value() noexcept
    {
        return ::bovespa_mbo_sbe::types::TimeUnit::NANOSECOND;
    }
};

}  // namespace sbepp

SBEPP_WARNINGS_ON();
