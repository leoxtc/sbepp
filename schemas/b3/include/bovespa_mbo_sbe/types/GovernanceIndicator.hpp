// SPDX-License-Identifier: MIT
// Copyright (c) 2023, Oleksandr Koval

// This file was generated by sbeppc 1.3.0
#pragma once

#include <sbepp/sbepp.hpp>

SBEPP_WARNINGS_OFF();

#include "../schema/schema.hpp"


namespace bovespa_mbo_sbe
{
namespace detail
{
namespace types
{

enum class enum_22 : ::std::uint8_t
{
    No = 0,
    N1 = 1,
    N2 = 2,
    NM = 4,
    MA = 5,
    MB = 6,
    M2 = 7
};

template<typename Visitor>
SBEPP_CPP14_CONSTEXPR void tag_invoke(
    ::sbepp::detail::visit_tag, enum_22 e, Visitor& visitor) noexcept
{
    switch(e)
    {
    case enum_22::No:
        visitor.on_enum_value(e, ::bovespa_mbo_sbe::schema::types::GovernanceIndicator::No{});
        break;
    case enum_22::N1:
        visitor.on_enum_value(e, ::bovespa_mbo_sbe::schema::types::GovernanceIndicator::N1{});
        break;
    case enum_22::N2:
        visitor.on_enum_value(e, ::bovespa_mbo_sbe::schema::types::GovernanceIndicator::N2{});
        break;
    case enum_22::NM:
        visitor.on_enum_value(e, ::bovespa_mbo_sbe::schema::types::GovernanceIndicator::NM{});
        break;
    case enum_22::MA:
        visitor.on_enum_value(e, ::bovespa_mbo_sbe::schema::types::GovernanceIndicator::MA{});
        break;
    case enum_22::MB:
        visitor.on_enum_value(e, ::bovespa_mbo_sbe::schema::types::GovernanceIndicator::MB{});
        break;
    case enum_22::M2:
        visitor.on_enum_value(e, ::bovespa_mbo_sbe::schema::types::GovernanceIndicator::M2{});
        break;
    default:
        visitor.on_enum_value(e, ::sbepp::unknown_enum_value_tag{});
    }
}


} // namespace types
} // namespace detail

namespace types
{
using GovernanceIndicator = ::bovespa_mbo_sbe::detail::types::enum_22;
} // namespace types
} // namespace bovespa_mbo_sbe

namespace sbepp
{

template<>
class enum_traits<::bovespa_mbo_sbe::schema::types::GovernanceIndicator>
{
public:
    static constexpr const char* name() noexcept
    {
        return "GovernanceIndicator";
    }

    static constexpr const char* description() noexcept
    {
        return "Corporative governance level indicator. Required for cash equities.";
    }

    using encoding_type = ::std::uint8_t;
    
    
    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    
    using value_type = ::bovespa_mbo_sbe::types::GovernanceIndicator;
};

template<>
struct traits_tag<::bovespa_mbo_sbe::types::GovernanceIndicator>
{
    using type = ::bovespa_mbo_sbe::schema::types::GovernanceIndicator;
};


template<>
class enum_value_traits<::bovespa_mbo_sbe::schema::types::GovernanceIndicator::No>
{
public:
    static constexpr const char* name() noexcept
    {
        return "No";
    }

    static constexpr const char* description() noexcept
    {
        return "Unspecified.";
    }
    
    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    

    static constexpr ::bovespa_mbo_sbe::types::GovernanceIndicator value() noexcept
    {
        return ::bovespa_mbo_sbe::types::GovernanceIndicator::No;
    }
};

template<>
class enum_value_traits<::bovespa_mbo_sbe::schema::types::GovernanceIndicator::N1>
{
public:
    static constexpr const char* name() noexcept
    {
        return "N1";
    }

    static constexpr const char* description() noexcept
    {
        return "Level 1.";
    }
    
    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    

    static constexpr ::bovespa_mbo_sbe::types::GovernanceIndicator value() noexcept
    {
        return ::bovespa_mbo_sbe::types::GovernanceIndicator::N1;
    }
};

template<>
class enum_value_traits<::bovespa_mbo_sbe::schema::types::GovernanceIndicator::N2>
{
public:
    static constexpr const char* name() noexcept
    {
        return "N2";
    }

    static constexpr const char* description() noexcept
    {
        return "Level 2.";
    }
    
    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    

    static constexpr ::bovespa_mbo_sbe::types::GovernanceIndicator value() noexcept
    {
        return ::bovespa_mbo_sbe::types::GovernanceIndicator::N2;
    }
};

template<>
class enum_value_traits<::bovespa_mbo_sbe::schema::types::GovernanceIndicator::NM>
{
public:
    static constexpr const char* name() noexcept
    {
        return "NM";
    }

    static constexpr const char* description() noexcept
    {
        return "New Market.";
    }
    
    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    

    static constexpr ::bovespa_mbo_sbe::types::GovernanceIndicator value() noexcept
    {
        return ::bovespa_mbo_sbe::types::GovernanceIndicator::NM;
    }
};

template<>
class enum_value_traits<::bovespa_mbo_sbe::schema::types::GovernanceIndicator::MA>
{
public:
    static constexpr const char* name() noexcept
    {
        return "MA";
    }

    static constexpr const char* description() noexcept
    {
        return "Bovespa Mais.";
    }
    
    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    

    static constexpr ::bovespa_mbo_sbe::types::GovernanceIndicator value() noexcept
    {
        return ::bovespa_mbo_sbe::types::GovernanceIndicator::MA;
    }
};

template<>
class enum_value_traits<::bovespa_mbo_sbe::schema::types::GovernanceIndicator::MB>
{
public:
    static constexpr const char* name() noexcept
    {
        return "MB";
    }

    static constexpr const char* description() noexcept
    {
        return "Over the counter (SOMA Market).";
    }
    
    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    

    static constexpr ::bovespa_mbo_sbe::types::GovernanceIndicator value() noexcept
    {
        return ::bovespa_mbo_sbe::types::GovernanceIndicator::MB;
    }
};

template<>
class enum_value_traits<::bovespa_mbo_sbe::schema::types::GovernanceIndicator::M2>
{
public:
    static constexpr const char* name() noexcept
    {
        return "M2";
    }

    static constexpr const char* description() noexcept
    {
        return "Bovespa Mais Level 2.";
    }
    
    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    

    static constexpr ::bovespa_mbo_sbe::types::GovernanceIndicator value() noexcept
    {
        return ::bovespa_mbo_sbe::types::GovernanceIndicator::M2;
    }
};

}  // namespace sbepp

SBEPP_WARNINGS_ON();
