// SPDX-License-Identifier: MIT
// Copyright (c) 2023, Oleksandr Koval

// This file was generated by sbeppc 1.3.0
#pragma once

#include <sbepp/sbepp.hpp>

SBEPP_WARNINGS_OFF();

#include "../schema/schema.hpp"


namespace bovespa_mbo_sbe
{
namespace detail
{
namespace types
{

enum class enum_21 : ::std::uint8_t
{
    CASH = 1,
    CORP = 2,
    CS = 3,
    DTERM = 4,
    ETF = 5,
    FOPT = 6,
    FORWARD = 7,
    FUT = 8,
    INDEX = 9,
    INDEXOPT = 10,
    MLEG = 11,
    OPT = 12,
    OPTEXER = 13,
    PS = 14,
    SECLOAN = 15,
    SOPT = 16,
    SPOT = 17
};

template<typename Visitor>
SBEPP_CPP14_CONSTEXPR void tag_invoke(
    ::sbepp::detail::visit_tag, enum_21 e, Visitor& visitor) noexcept
{
    switch(e)
    {
    case enum_21::CASH:
        visitor.on_enum_value(e, ::bovespa_mbo_sbe::schema::types::SecurityType::CASH{});
        break;
    case enum_21::CORP:
        visitor.on_enum_value(e, ::bovespa_mbo_sbe::schema::types::SecurityType::CORP{});
        break;
    case enum_21::CS:
        visitor.on_enum_value(e, ::bovespa_mbo_sbe::schema::types::SecurityType::CS{});
        break;
    case enum_21::DTERM:
        visitor.on_enum_value(e, ::bovespa_mbo_sbe::schema::types::SecurityType::DTERM{});
        break;
    case enum_21::ETF:
        visitor.on_enum_value(e, ::bovespa_mbo_sbe::schema::types::SecurityType::ETF{});
        break;
    case enum_21::FOPT:
        visitor.on_enum_value(e, ::bovespa_mbo_sbe::schema::types::SecurityType::FOPT{});
        break;
    case enum_21::FORWARD:
        visitor.on_enum_value(e, ::bovespa_mbo_sbe::schema::types::SecurityType::FORWARD{});
        break;
    case enum_21::FUT:
        visitor.on_enum_value(e, ::bovespa_mbo_sbe::schema::types::SecurityType::FUT{});
        break;
    case enum_21::INDEX:
        visitor.on_enum_value(e, ::bovespa_mbo_sbe::schema::types::SecurityType::INDEX{});
        break;
    case enum_21::INDEXOPT:
        visitor.on_enum_value(e, ::bovespa_mbo_sbe::schema::types::SecurityType::INDEXOPT{});
        break;
    case enum_21::MLEG:
        visitor.on_enum_value(e, ::bovespa_mbo_sbe::schema::types::SecurityType::MLEG{});
        break;
    case enum_21::OPT:
        visitor.on_enum_value(e, ::bovespa_mbo_sbe::schema::types::SecurityType::OPT{});
        break;
    case enum_21::OPTEXER:
        visitor.on_enum_value(e, ::bovespa_mbo_sbe::schema::types::SecurityType::OPTEXER{});
        break;
    case enum_21::PS:
        visitor.on_enum_value(e, ::bovespa_mbo_sbe::schema::types::SecurityType::PS{});
        break;
    case enum_21::SECLOAN:
        visitor.on_enum_value(e, ::bovespa_mbo_sbe::schema::types::SecurityType::SECLOAN{});
        break;
    case enum_21::SOPT:
        visitor.on_enum_value(e, ::bovespa_mbo_sbe::schema::types::SecurityType::SOPT{});
        break;
    case enum_21::SPOT:
        visitor.on_enum_value(e, ::bovespa_mbo_sbe::schema::types::SecurityType::SPOT{});
        break;
    default:
        visitor.on_enum_value(e, ::sbepp::unknown_enum_value_tag{});
    }
}


} // namespace types
} // namespace detail

namespace types
{
using SecurityType = ::bovespa_mbo_sbe::detail::types::enum_21;
} // namespace types
} // namespace bovespa_mbo_sbe

namespace sbepp
{

template<>
class enum_traits<::bovespa_mbo_sbe::schema::types::SecurityType>
{
public:
    static constexpr const char* name() noexcept
    {
        return "SecurityType";
    }

    static constexpr const char* description() noexcept
    {
        return "Indicates the type of the security.";
    }

    using encoding_type = ::std::uint8_t;
    
    
    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    
    using value_type = ::bovespa_mbo_sbe::types::SecurityType;
};

template<>
struct traits_tag<::bovespa_mbo_sbe::types::SecurityType>
{
    using type = ::bovespa_mbo_sbe::schema::types::SecurityType;
};


template<>
class enum_value_traits<::bovespa_mbo_sbe::schema::types::SecurityType::CASH>
{
public:
    static constexpr const char* name() noexcept
    {
        return "CASH";
    }

    static constexpr const char* description() noexcept
    {
        return "Rights, etc.";
    }
    
    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    

    static constexpr ::bovespa_mbo_sbe::types::SecurityType value() noexcept
    {
        return ::bovespa_mbo_sbe::types::SecurityType::CASH;
    }
};

template<>
class enum_value_traits<::bovespa_mbo_sbe::schema::types::SecurityType::CORP>
{
public:
    static constexpr const char* name() noexcept
    {
        return "CORP";
    }

    static constexpr const char* description() noexcept
    {
        return "Corporate Fixed Income.";
    }
    
    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    

    static constexpr ::bovespa_mbo_sbe::types::SecurityType value() noexcept
    {
        return ::bovespa_mbo_sbe::types::SecurityType::CORP;
    }
};

template<>
class enum_value_traits<::bovespa_mbo_sbe::schema::types::SecurityType::CS>
{
public:
    static constexpr const char* name() noexcept
    {
        return "CS";
    }

    static constexpr const char* description() noexcept
    {
        return "Common Stock.";
    }
    
    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    

    static constexpr ::bovespa_mbo_sbe::types::SecurityType value() noexcept
    {
        return ::bovespa_mbo_sbe::types::SecurityType::CS;
    }
};

template<>
class enum_value_traits<::bovespa_mbo_sbe::schema::types::SecurityType::DTERM>
{
public:
    static constexpr const char* name() noexcept
    {
        return "DTERM";
    }

    static constexpr const char* description() noexcept
    {
        return "Derivative Forward or 'Termo'.";
    }
    
    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    

    static constexpr ::bovespa_mbo_sbe::types::SecurityType value() noexcept
    {
        return ::bovespa_mbo_sbe::types::SecurityType::DTERM;
    }
};

template<>
class enum_value_traits<::bovespa_mbo_sbe::schema::types::SecurityType::ETF>
{
public:
    static constexpr const char* name() noexcept
    {
        return "ETF";
    }

    static constexpr const char* description() noexcept
    {
        return "Exchange Traded Fund.";
    }
    
    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    

    static constexpr ::bovespa_mbo_sbe::types::SecurityType value() noexcept
    {
        return ::bovespa_mbo_sbe::types::SecurityType::ETF;
    }
};

template<>
class enum_value_traits<::bovespa_mbo_sbe::schema::types::SecurityType::FOPT>
{
public:
    static constexpr const char* name() noexcept
    {
        return "FOPT";
    }

    static constexpr const char* description() noexcept
    {
        return "Future Options.";
    }
    
    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    

    static constexpr ::bovespa_mbo_sbe::types::SecurityType value() noexcept
    {
        return ::bovespa_mbo_sbe::types::SecurityType::FOPT;
    }
};

template<>
class enum_value_traits<::bovespa_mbo_sbe::schema::types::SecurityType::FORWARD>
{
public:
    static constexpr const char* name() noexcept
    {
        return "FORWARD";
    }

    static constexpr const char* description() noexcept
    {
        return "Equity Forward or 'Termo'.";
    }
    
    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    

    static constexpr ::bovespa_mbo_sbe::types::SecurityType value() noexcept
    {
        return ::bovespa_mbo_sbe::types::SecurityType::FORWARD;
    }
};

template<>
class enum_value_traits<::bovespa_mbo_sbe::schema::types::SecurityType::FUT>
{
public:
    static constexpr const char* name() noexcept
    {
        return "FUT";
    }

    static constexpr const char* description() noexcept
    {
        return "Futures.";
    }
    
    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    

    static constexpr ::bovespa_mbo_sbe::types::SecurityType value() noexcept
    {
        return ::bovespa_mbo_sbe::types::SecurityType::FUT;
    }
};

template<>
class enum_value_traits<::bovespa_mbo_sbe::schema::types::SecurityType::INDEX>
{
public:
    static constexpr const char* name() noexcept
    {
        return "INDEX";
    }

    static constexpr const char* description() noexcept
    {
        return "Non-Tradable index.";
    }
    
    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    

    static constexpr ::bovespa_mbo_sbe::types::SecurityType value() noexcept
    {
        return ::bovespa_mbo_sbe::types::SecurityType::INDEX;
    }
};

template<>
class enum_value_traits<::bovespa_mbo_sbe::schema::types::SecurityType::INDEXOPT>
{
public:
    static constexpr const char* name() noexcept
    {
        return "INDEXOPT";
    }

    static constexpr const char* description() noexcept
    {
        return "";
    }
    
    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    

    static constexpr ::bovespa_mbo_sbe::types::SecurityType value() noexcept
    {
        return ::bovespa_mbo_sbe::types::SecurityType::INDEXOPT;
    }
};

template<>
class enum_value_traits<::bovespa_mbo_sbe::schema::types::SecurityType::MLEG>
{
public:
    static constexpr const char* name() noexcept
    {
        return "MLEG";
    }

    static constexpr const char* description() noexcept
    {
        return "Multileg Instrument.";
    }
    
    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    

    static constexpr ::bovespa_mbo_sbe::types::SecurityType value() noexcept
    {
        return ::bovespa_mbo_sbe::types::SecurityType::MLEG;
    }
};

template<>
class enum_value_traits<::bovespa_mbo_sbe::schema::types::SecurityType::OPT>
{
public:
    static constexpr const char* name() noexcept
    {
        return "OPT";
    }

    static constexpr const char* description() noexcept
    {
        return "Option.";
    }
    
    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    

    static constexpr ::bovespa_mbo_sbe::types::SecurityType value() noexcept
    {
        return ::bovespa_mbo_sbe::types::SecurityType::OPT;
    }
};

template<>
class enum_value_traits<::bovespa_mbo_sbe::schema::types::SecurityType::OPTEXER>
{
public:
    static constexpr const char* name() noexcept
    {
        return "OPTEXER";
    }

    static constexpr const char* description() noexcept
    {
        return "Option Exercise.";
    }
    
    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    

    static constexpr ::bovespa_mbo_sbe::types::SecurityType value() noexcept
    {
        return ::bovespa_mbo_sbe::types::SecurityType::OPTEXER;
    }
};

template<>
class enum_value_traits<::bovespa_mbo_sbe::schema::types::SecurityType::PS>
{
public:
    static constexpr const char* name() noexcept
    {
        return "PS";
    }

    static constexpr const char* description() noexcept
    {
        return "Preferred Stock.";
    }
    
    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    

    static constexpr ::bovespa_mbo_sbe::types::SecurityType value() noexcept
    {
        return ::bovespa_mbo_sbe::types::SecurityType::PS;
    }
};

template<>
class enum_value_traits<::bovespa_mbo_sbe::schema::types::SecurityType::SECLOAN>
{
public:
    static constexpr const char* name() noexcept
    {
        return "SECLOAN";
    }

    static constexpr const char* description() noexcept
    {
        return "";
    }
    
    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    

    static constexpr ::bovespa_mbo_sbe::types::SecurityType value() noexcept
    {
        return ::bovespa_mbo_sbe::types::SecurityType::SECLOAN;
    }
};

template<>
class enum_value_traits<::bovespa_mbo_sbe::schema::types::SecurityType::SOPT>
{
public:
    static constexpr const char* name() noexcept
    {
        return "SOPT";
    }

    static constexpr const char* description() noexcept
    {
        return "Spot Options.";
    }
    
    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    

    static constexpr ::bovespa_mbo_sbe::types::SecurityType value() noexcept
    {
        return ::bovespa_mbo_sbe::types::SecurityType::SOPT;
    }
};

template<>
class enum_value_traits<::bovespa_mbo_sbe::schema::types::SecurityType::SPOT>
{
public:
    static constexpr const char* name() noexcept
    {
        return "SPOT";
    }

    static constexpr const char* description() noexcept
    {
        return "Spot Market.";
    }
    
    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    

    static constexpr ::bovespa_mbo_sbe::types::SecurityType value() noexcept
    {
        return ::bovespa_mbo_sbe::types::SecurityType::SPOT;
    }
};

}  // namespace sbepp

SBEPP_WARNINGS_ON();
