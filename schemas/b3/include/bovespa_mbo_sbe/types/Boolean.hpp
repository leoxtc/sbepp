// SPDX-License-Identifier: MIT
// Copyright (c) 2023, Oleksandr Koval

// This file was generated by sbeppc 1.3.0
#pragma once

#include <sbepp/sbepp.hpp>

SBEPP_WARNINGS_OFF();

#include "../schema/schema.hpp"


namespace bovespa_mbo_sbe
{
namespace detail
{
namespace types
{

enum class enum_23 : ::std::uint8_t
{
    FALSE_VALUE = 0,
    TRUE_VALUE = 1
};

template<typename Visitor>
SBEPP_CPP14_CONSTEXPR void tag_invoke(
    ::sbepp::detail::visit_tag, enum_23 e, Visitor& visitor) noexcept
{
    switch(e)
    {
    case enum_23::FALSE_VALUE:
        visitor.on_enum_value(e, ::bovespa_mbo_sbe::schema::types::Boolean::FALSE_VALUE{});
        break;
    case enum_23::TRUE_VALUE:
        visitor.on_enum_value(e, ::bovespa_mbo_sbe::schema::types::Boolean::TRUE_VALUE{});
        break;
    default:
        visitor.on_enum_value(e, ::sbepp::unknown_enum_value_tag{});
    }
}


} // namespace types
} // namespace detail

namespace types
{
using Boolean = ::bovespa_mbo_sbe::detail::types::enum_23;
} // namespace types
} // namespace bovespa_mbo_sbe

namespace sbepp
{

template<>
class enum_traits<::bovespa_mbo_sbe::schema::types::Boolean>
{
public:
    static constexpr const char* name() noexcept
    {
        return "Boolean";
    }

    static constexpr const char* description() noexcept
    {
        return "Boolean type.";
    }

    using encoding_type = ::std::uint8_t;
    
    
    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    
    using value_type = ::bovespa_mbo_sbe::types::Boolean;
};

template<>
struct traits_tag<::bovespa_mbo_sbe::types::Boolean>
{
    using type = ::bovespa_mbo_sbe::schema::types::Boolean;
};


template<>
class enum_value_traits<::bovespa_mbo_sbe::schema::types::Boolean::FALSE_VALUE>
{
public:
    static constexpr const char* name() noexcept
    {
        return "FALSE_VALUE";
    }

    static constexpr const char* description() noexcept
    {
        return "false, N, 0.";
    }
    
    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    

    static constexpr ::bovespa_mbo_sbe::types::Boolean value() noexcept
    {
        return ::bovespa_mbo_sbe::types::Boolean::FALSE_VALUE;
    }
};

template<>
class enum_value_traits<::bovespa_mbo_sbe::schema::types::Boolean::TRUE_VALUE>
{
public:
    static constexpr const char* name() noexcept
    {
        return "TRUE_VALUE";
    }

    static constexpr const char* description() noexcept
    {
        return "true, Y, 1.";
    }
    
    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    

    static constexpr ::bovespa_mbo_sbe::types::Boolean value() noexcept
    {
        return ::bovespa_mbo_sbe::types::Boolean::TRUE_VALUE;
    }
};

}  // namespace sbepp

SBEPP_WARNINGS_ON();
