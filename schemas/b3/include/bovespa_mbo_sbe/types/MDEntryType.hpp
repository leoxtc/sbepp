// SPDX-License-Identifier: MIT
// Copyright (c) 2023, Oleksandr Koval

// This file was generated by sbeppc 1.3.0
#pragma once

#include <sbepp/sbepp.hpp>

SBEPP_WARNINGS_OFF();

#include "../schema/schema.hpp"


namespace bovespa_mbo_sbe
{
namespace detail
{
namespace types
{

enum class enum_31 : char
{
    BID = '0',
    OFFER = '1',
    TRADE = '2',
    INDEX_VALUE = '3',
    OPENING_PRICE = '4',
    CLOSING_PRICE = '5',
    SETTLEMENT_PRICE = '6',
    SESSION_HIGH_PRICE = '7',
    SESSION_LOW_PRICE = '8',
    EXECUTION_STATISTICS = '9',
    IMBALANCE = 'A',
    TRADE_VOLUME = 'B',
    OPEN_INTEREST = 'C',
    EMPTY_BOOK = 'J',
    SECURITY_TRADING_STATE_PHASE = 'c',
    PRICE_BAND = 'g',
    QUANTITY_BAND = 'h',
    COMPOSITE_UNDERLYING_PRICE = 'D',
    EXECUTION_SUMMARY = 's',
    VOLATILITY_PRICE = 'v',
    TRADE_BUST = 'u'
};

template<typename Visitor>
SBEPP_CPP14_CONSTEXPR void tag_invoke(
    ::sbepp::detail::visit_tag, enum_31 e, Visitor& visitor) noexcept
{
    switch(e)
    {
    case enum_31::BID:
        visitor.on_enum_value(e, ::bovespa_mbo_sbe::schema::types::MDEntryType::BID{});
        break;
    case enum_31::OFFER:
        visitor.on_enum_value(e, ::bovespa_mbo_sbe::schema::types::MDEntryType::OFFER{});
        break;
    case enum_31::TRADE:
        visitor.on_enum_value(e, ::bovespa_mbo_sbe::schema::types::MDEntryType::TRADE{});
        break;
    case enum_31::INDEX_VALUE:
        visitor.on_enum_value(e, ::bovespa_mbo_sbe::schema::types::MDEntryType::INDEX_VALUE{});
        break;
    case enum_31::OPENING_PRICE:
        visitor.on_enum_value(e, ::bovespa_mbo_sbe::schema::types::MDEntryType::OPENING_PRICE{});
        break;
    case enum_31::CLOSING_PRICE:
        visitor.on_enum_value(e, ::bovespa_mbo_sbe::schema::types::MDEntryType::CLOSING_PRICE{});
        break;
    case enum_31::SETTLEMENT_PRICE:
        visitor.on_enum_value(e, ::bovespa_mbo_sbe::schema::types::MDEntryType::SETTLEMENT_PRICE{});
        break;
    case enum_31::SESSION_HIGH_PRICE:
        visitor.on_enum_value(e, ::bovespa_mbo_sbe::schema::types::MDEntryType::SESSION_HIGH_PRICE{});
        break;
    case enum_31::SESSION_LOW_PRICE:
        visitor.on_enum_value(e, ::bovespa_mbo_sbe::schema::types::MDEntryType::SESSION_LOW_PRICE{});
        break;
    case enum_31::EXECUTION_STATISTICS:
        visitor.on_enum_value(e, ::bovespa_mbo_sbe::schema::types::MDEntryType::EXECUTION_STATISTICS{});
        break;
    case enum_31::IMBALANCE:
        visitor.on_enum_value(e, ::bovespa_mbo_sbe::schema::types::MDEntryType::IMBALANCE{});
        break;
    case enum_31::TRADE_VOLUME:
        visitor.on_enum_value(e, ::bovespa_mbo_sbe::schema::types::MDEntryType::TRADE_VOLUME{});
        break;
    case enum_31::OPEN_INTEREST:
        visitor.on_enum_value(e, ::bovespa_mbo_sbe::schema::types::MDEntryType::OPEN_INTEREST{});
        break;
    case enum_31::EMPTY_BOOK:
        visitor.on_enum_value(e, ::bovespa_mbo_sbe::schema::types::MDEntryType::EMPTY_BOOK{});
        break;
    case enum_31::SECURITY_TRADING_STATE_PHASE:
        visitor.on_enum_value(e, ::bovespa_mbo_sbe::schema::types::MDEntryType::SECURITY_TRADING_STATE_PHASE{});
        break;
    case enum_31::PRICE_BAND:
        visitor.on_enum_value(e, ::bovespa_mbo_sbe::schema::types::MDEntryType::PRICE_BAND{});
        break;
    case enum_31::QUANTITY_BAND:
        visitor.on_enum_value(e, ::bovespa_mbo_sbe::schema::types::MDEntryType::QUANTITY_BAND{});
        break;
    case enum_31::COMPOSITE_UNDERLYING_PRICE:
        visitor.on_enum_value(e, ::bovespa_mbo_sbe::schema::types::MDEntryType::COMPOSITE_UNDERLYING_PRICE{});
        break;
    case enum_31::EXECUTION_SUMMARY:
        visitor.on_enum_value(e, ::bovespa_mbo_sbe::schema::types::MDEntryType::EXECUTION_SUMMARY{});
        break;
    case enum_31::VOLATILITY_PRICE:
        visitor.on_enum_value(e, ::bovespa_mbo_sbe::schema::types::MDEntryType::VOLATILITY_PRICE{});
        break;
    case enum_31::TRADE_BUST:
        visitor.on_enum_value(e, ::bovespa_mbo_sbe::schema::types::MDEntryType::TRADE_BUST{});
        break;
    default:
        visitor.on_enum_value(e, ::sbepp::unknown_enum_value_tag{});
    }
}


} // namespace types
} // namespace detail

namespace types
{
using MDEntryType = ::bovespa_mbo_sbe::detail::types::enum_31;
} // namespace types
} // namespace bovespa_mbo_sbe

namespace sbepp
{

template<>
class enum_traits<::bovespa_mbo_sbe::schema::types::MDEntryType>
{
public:
    static constexpr const char* name() noexcept
    {
        return "MDEntryType";
    }

    static constexpr const char* description() noexcept
    {
        return "Type of the Market Data Entry.";
    }

    using encoding_type = char;
    
    
    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    
    using value_type = ::bovespa_mbo_sbe::types::MDEntryType;
};

template<>
struct traits_tag<::bovespa_mbo_sbe::types::MDEntryType>
{
    using type = ::bovespa_mbo_sbe::schema::types::MDEntryType;
};


template<>
class enum_value_traits<::bovespa_mbo_sbe::schema::types::MDEntryType::BID>
{
public:
    static constexpr const char* name() noexcept
    {
        return "BID";
    }

    static constexpr const char* description() noexcept
    {
        return "Bid.";
    }
    
    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    

    static constexpr ::bovespa_mbo_sbe::types::MDEntryType value() noexcept
    {
        return ::bovespa_mbo_sbe::types::MDEntryType::BID;
    }
};

template<>
class enum_value_traits<::bovespa_mbo_sbe::schema::types::MDEntryType::OFFER>
{
public:
    static constexpr const char* name() noexcept
    {
        return "OFFER";
    }

    static constexpr const char* description() noexcept
    {
        return "Offer.";
    }
    
    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    

    static constexpr ::bovespa_mbo_sbe::types::MDEntryType value() noexcept
    {
        return ::bovespa_mbo_sbe::types::MDEntryType::OFFER;
    }
};

template<>
class enum_value_traits<::bovespa_mbo_sbe::schema::types::MDEntryType::TRADE>
{
public:
    static constexpr const char* name() noexcept
    {
        return "TRADE";
    }

    static constexpr const char* description() noexcept
    {
        return "Trade or Trade Summary or Last Trade Price.";
    }
    
    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    

    static constexpr ::bovespa_mbo_sbe::types::MDEntryType value() noexcept
    {
        return ::bovespa_mbo_sbe::types::MDEntryType::TRADE;
    }
};

template<>
class enum_value_traits<::bovespa_mbo_sbe::schema::types::MDEntryType::INDEX_VALUE>
{
public:
    static constexpr const char* name() noexcept
    {
        return "INDEX_VALUE";
    }

    static constexpr const char* description() noexcept
    {
        return "Index Value.";
    }
    
    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    

    static constexpr ::bovespa_mbo_sbe::types::MDEntryType value() noexcept
    {
        return ::bovespa_mbo_sbe::types::MDEntryType::INDEX_VALUE;
    }
};

template<>
class enum_value_traits<::bovespa_mbo_sbe::schema::types::MDEntryType::OPENING_PRICE>
{
public:
    static constexpr const char* name() noexcept
    {
        return "OPENING_PRICE";
    }

    static constexpr const char* description() noexcept
    {
        return "Opening Price.";
    }
    
    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    

    static constexpr ::bovespa_mbo_sbe::types::MDEntryType value() noexcept
    {
        return ::bovespa_mbo_sbe::types::MDEntryType::OPENING_PRICE;
    }
};

template<>
class enum_value_traits<::bovespa_mbo_sbe::schema::types::MDEntryType::CLOSING_PRICE>
{
public:
    static constexpr const char* name() noexcept
    {
        return "CLOSING_PRICE";
    }

    static constexpr const char* description() noexcept
    {
        return "Closing Price.";
    }
    
    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    

    static constexpr ::bovespa_mbo_sbe::types::MDEntryType value() noexcept
    {
        return ::bovespa_mbo_sbe::types::MDEntryType::CLOSING_PRICE;
    }
};

template<>
class enum_value_traits<::bovespa_mbo_sbe::schema::types::MDEntryType::SETTLEMENT_PRICE>
{
public:
    static constexpr const char* name() noexcept
    {
        return "SETTLEMENT_PRICE";
    }

    static constexpr const char* description() noexcept
    {
        return "Settlement Price.";
    }
    
    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    

    static constexpr ::bovespa_mbo_sbe::types::MDEntryType value() noexcept
    {
        return ::bovespa_mbo_sbe::types::MDEntryType::SETTLEMENT_PRICE;
    }
};

template<>
class enum_value_traits<::bovespa_mbo_sbe::schema::types::MDEntryType::SESSION_HIGH_PRICE>
{
public:
    static constexpr const char* name() noexcept
    {
        return "SESSION_HIGH_PRICE";
    }

    static constexpr const char* description() noexcept
    {
        return "Session High Price.";
    }
    
    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    

    static constexpr ::bovespa_mbo_sbe::types::MDEntryType value() noexcept
    {
        return ::bovespa_mbo_sbe::types::MDEntryType::SESSION_HIGH_PRICE;
    }
};

template<>
class enum_value_traits<::bovespa_mbo_sbe::schema::types::MDEntryType::SESSION_LOW_PRICE>
{
public:
    static constexpr const char* name() noexcept
    {
        return "SESSION_LOW_PRICE";
    }

    static constexpr const char* description() noexcept
    {
        return "Session Low Price.";
    }
    
    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    

    static constexpr ::bovespa_mbo_sbe::types::MDEntryType value() noexcept
    {
        return ::bovespa_mbo_sbe::types::MDEntryType::SESSION_LOW_PRICE;
    }
};

template<>
class enum_value_traits<::bovespa_mbo_sbe::schema::types::MDEntryType::EXECUTION_STATISTICS>
{
public:
    static constexpr const char* name() noexcept
    {
        return "EXECUTION_STATISTICS";
    }

    static constexpr const char* description() noexcept
    {
        return "Execution Statistics for related Trades.";
    }
    
    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    

    static constexpr ::bovespa_mbo_sbe::types::MDEntryType value() noexcept
    {
        return ::bovespa_mbo_sbe::types::MDEntryType::EXECUTION_STATISTICS;
    }
};

template<>
class enum_value_traits<::bovespa_mbo_sbe::schema::types::MDEntryType::IMBALANCE>
{
public:
    static constexpr const char* name() noexcept
    {
        return "IMBALANCE";
    }

    static constexpr const char* description() noexcept
    {
        return "Imbalance.";
    }
    
    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    

    static constexpr ::bovespa_mbo_sbe::types::MDEntryType value() noexcept
    {
        return ::bovespa_mbo_sbe::types::MDEntryType::IMBALANCE;
    }
};

template<>
class enum_value_traits<::bovespa_mbo_sbe::schema::types::MDEntryType::TRADE_VOLUME>
{
public:
    static constexpr const char* name() noexcept
    {
        return "TRADE_VOLUME";
    }

    static constexpr const char* description() noexcept
    {
        return "Trade Volume.";
    }
    
    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    

    static constexpr ::bovespa_mbo_sbe::types::MDEntryType value() noexcept
    {
        return ::bovespa_mbo_sbe::types::MDEntryType::TRADE_VOLUME;
    }
};

template<>
class enum_value_traits<::bovespa_mbo_sbe::schema::types::MDEntryType::OPEN_INTEREST>
{
public:
    static constexpr const char* name() noexcept
    {
        return "OPEN_INTEREST";
    }

    static constexpr const char* description() noexcept
    {
        return "Open Interest.";
    }
    
    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    

    static constexpr ::bovespa_mbo_sbe::types::MDEntryType value() noexcept
    {
        return ::bovespa_mbo_sbe::types::MDEntryType::OPEN_INTEREST;
    }
};

template<>
class enum_value_traits<::bovespa_mbo_sbe::schema::types::MDEntryType::EMPTY_BOOK>
{
public:
    static constexpr const char* name() noexcept
    {
        return "EMPTY_BOOK";
    }

    static constexpr const char* description() noexcept
    {
        return "Empty Book.";
    }
    
    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    

    static constexpr ::bovespa_mbo_sbe::types::MDEntryType value() noexcept
    {
        return ::bovespa_mbo_sbe::types::MDEntryType::EMPTY_BOOK;
    }
};

template<>
class enum_value_traits<::bovespa_mbo_sbe::schema::types::MDEntryType::SECURITY_TRADING_STATE_PHASE>
{
public:
    static constexpr const char* name() noexcept
    {
        return "SECURITY_TRADING_STATE_PHASE";
    }

    static constexpr const char* description() noexcept
    {
        return "Security Trading State / Phase.";
    }
    
    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    

    static constexpr ::bovespa_mbo_sbe::types::MDEntryType value() noexcept
    {
        return ::bovespa_mbo_sbe::types::MDEntryType::SECURITY_TRADING_STATE_PHASE;
    }
};

template<>
class enum_value_traits<::bovespa_mbo_sbe::schema::types::MDEntryType::PRICE_BAND>
{
public:
    static constexpr const char* name() noexcept
    {
        return "PRICE_BAND";
    }

    static constexpr const char* description() noexcept
    {
        return "Price band.";
    }
    
    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    

    static constexpr ::bovespa_mbo_sbe::types::MDEntryType value() noexcept
    {
        return ::bovespa_mbo_sbe::types::MDEntryType::PRICE_BAND;
    }
};

template<>
class enum_value_traits<::bovespa_mbo_sbe::schema::types::MDEntryType::QUANTITY_BAND>
{
public:
    static constexpr const char* name() noexcept
    {
        return "QUANTITY_BAND";
    }

    static constexpr const char* description() noexcept
    {
        return "Quantity band.";
    }
    
    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    

    static constexpr ::bovespa_mbo_sbe::types::MDEntryType value() noexcept
    {
        return ::bovespa_mbo_sbe::types::MDEntryType::QUANTITY_BAND;
    }
};

template<>
class enum_value_traits<::bovespa_mbo_sbe::schema::types::MDEntryType::COMPOSITE_UNDERLYING_PRICE>
{
public:
    static constexpr const char* name() noexcept
    {
        return "COMPOSITE_UNDERLYING_PRICE";
    }

    static constexpr const char* description() noexcept
    {
        return "Composite Underlying Price.";
    }
    
    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    

    static constexpr ::bovespa_mbo_sbe::types::MDEntryType value() noexcept
    {
        return ::bovespa_mbo_sbe::types::MDEntryType::COMPOSITE_UNDERLYING_PRICE;
    }
};

template<>
class enum_value_traits<::bovespa_mbo_sbe::schema::types::MDEntryType::EXECUTION_SUMMARY>
{
public:
    static constexpr const char* name() noexcept
    {
        return "EXECUTION_SUMMARY";
    }

    static constexpr const char* description() noexcept
    {
        return "Execution Summary for related Trades.";
    }
    
    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    

    static constexpr ::bovespa_mbo_sbe::types::MDEntryType value() noexcept
    {
        return ::bovespa_mbo_sbe::types::MDEntryType::EXECUTION_SUMMARY;
    }
};

template<>
class enum_value_traits<::bovespa_mbo_sbe::schema::types::MDEntryType::VOLATILITY_PRICE>
{
public:
    static constexpr const char* name() noexcept
    {
        return "VOLATILITY_PRICE";
    }

    static constexpr const char* description() noexcept
    {
        return "Volatility price.";
    }
    
    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    

    static constexpr ::bovespa_mbo_sbe::types::MDEntryType value() noexcept
    {
        return ::bovespa_mbo_sbe::types::MDEntryType::VOLATILITY_PRICE;
    }
};

template<>
class enum_value_traits<::bovespa_mbo_sbe::schema::types::MDEntryType::TRADE_BUST>
{
public:
    static constexpr const char* name() noexcept
    {
        return "TRADE_BUST";
    }

    static constexpr const char* description() noexcept
    {
        return "Trade busted by Market Supervision.";
    }
    
    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    

    static constexpr ::bovespa_mbo_sbe::types::MDEntryType value() noexcept
    {
        return ::bovespa_mbo_sbe::types::MDEntryType::TRADE_BUST;
    }
};

}  // namespace sbepp

SBEPP_WARNINGS_ON();
