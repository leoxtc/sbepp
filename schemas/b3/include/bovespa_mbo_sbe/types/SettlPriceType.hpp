// SPDX-License-Identifier: MIT
// Copyright (c) 2023, Oleksandr Koval

// This file was generated by sbeppc 1.3.0
#pragma once

#include <sbepp/sbepp.hpp>

SBEPP_WARNINGS_OFF();

#include "../schema/schema.hpp"


namespace bovespa_mbo_sbe
{
namespace detail
{
namespace types
{

enum class enum_4 : ::std::uint8_t
{
    FINAL = 1,
    THEORETICAL = 2,
    UPDATED = 3
};

template<typename Visitor>
SBEPP_CPP14_CONSTEXPR void tag_invoke(
    ::sbepp::detail::visit_tag, enum_4 e, Visitor& visitor) noexcept
{
    switch(e)
    {
    case enum_4::FINAL:
        visitor.on_enum_value(e, ::bovespa_mbo_sbe::schema::types::SettlPriceType::FINAL{});
        break;
    case enum_4::THEORETICAL:
        visitor.on_enum_value(e, ::bovespa_mbo_sbe::schema::types::SettlPriceType::THEORETICAL{});
        break;
    case enum_4::UPDATED:
        visitor.on_enum_value(e, ::bovespa_mbo_sbe::schema::types::SettlPriceType::UPDATED{});
        break;
    default:
        visitor.on_enum_value(e, ::sbepp::unknown_enum_value_tag{});
    }
}


} // namespace types
} // namespace detail

namespace types
{
using SettlPriceType = ::bovespa_mbo_sbe::detail::types::enum_4;
} // namespace types
} // namespace bovespa_mbo_sbe

namespace sbepp
{

template<>
class enum_traits<::bovespa_mbo_sbe::schema::types::SettlPriceType>
{
public:
    static constexpr const char* name() noexcept
    {
        return "SettlPriceType";
    }

    static constexpr const char* description() noexcept
    {
        return "Type of settlement price.";
    }

    using encoding_type = ::std::uint8_t;
    
    
    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    
    using value_type = ::bovespa_mbo_sbe::types::SettlPriceType;
};

template<>
struct traits_tag<::bovespa_mbo_sbe::types::SettlPriceType>
{
    using type = ::bovespa_mbo_sbe::schema::types::SettlPriceType;
};


template<>
class enum_value_traits<::bovespa_mbo_sbe::schema::types::SettlPriceType::FINAL>
{
public:
    static constexpr const char* name() noexcept
    {
        return "FINAL";
    }

    static constexpr const char* description() noexcept
    {
        return "Final.";
    }
    
    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    

    static constexpr ::bovespa_mbo_sbe::types::SettlPriceType value() noexcept
    {
        return ::bovespa_mbo_sbe::types::SettlPriceType::FINAL;
    }
};

template<>
class enum_value_traits<::bovespa_mbo_sbe::schema::types::SettlPriceType::THEORETICAL>
{
public:
    static constexpr const char* name() noexcept
    {
        return "THEORETICAL";
    }

    static constexpr const char* description() noexcept
    {
        return "Theoretical / Preview.";
    }
    
    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    

    static constexpr ::bovespa_mbo_sbe::types::SettlPriceType value() noexcept
    {
        return ::bovespa_mbo_sbe::types::SettlPriceType::THEORETICAL;
    }
};

template<>
class enum_value_traits<::bovespa_mbo_sbe::schema::types::SettlPriceType::UPDATED>
{
public:
    static constexpr const char* name() noexcept
    {
        return "UPDATED";
    }

    static constexpr const char* description() noexcept
    {
        return "Updated.";
    }
    
    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    

    static constexpr ::bovespa_mbo_sbe::types::SettlPriceType value() noexcept
    {
        return ::bovespa_mbo_sbe::types::SettlPriceType::UPDATED;
    }
};

}  // namespace sbepp

SBEPP_WARNINGS_ON();
