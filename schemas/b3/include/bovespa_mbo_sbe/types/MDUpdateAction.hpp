// SPDX-License-Identifier: MIT
// Copyright (c) 2023, Oleksandr Koval

// This file was generated by sbeppc 1.3.0
#pragma once

#include <sbepp/sbepp.hpp>

SBEPP_WARNINGS_OFF();

#include "../schema/schema.hpp"


namespace bovespa_mbo_sbe
{
namespace detail
{
namespace types
{

enum class enum_16 : ::std::uint8_t
{
    NEW = 0,
    CHANGE = 1,
    DELETE = 2,
    DELETE_THRU = 3,
    DELETE_FROM = 4,
    OVERLAY = 5
};

template<typename Visitor>
SBEPP_CPP14_CONSTEXPR void tag_invoke(
    ::sbepp::detail::visit_tag, enum_16 e, Visitor& visitor) noexcept
{
    switch(e)
    {
    case enum_16::NEW:
        visitor.on_enum_value(e, ::bovespa_mbo_sbe::schema::types::MDUpdateAction::NEW{});
        break;
    case enum_16::CHANGE:
        visitor.on_enum_value(e, ::bovespa_mbo_sbe::schema::types::MDUpdateAction::CHANGE{});
        break;
    case enum_16::DELETE:
        visitor.on_enum_value(e, ::bovespa_mbo_sbe::schema::types::MDUpdateAction::DELETE{});
        break;
    case enum_16::DELETE_THRU:
        visitor.on_enum_value(e, ::bovespa_mbo_sbe::schema::types::MDUpdateAction::DELETE_THRU{});
        break;
    case enum_16::DELETE_FROM:
        visitor.on_enum_value(e, ::bovespa_mbo_sbe::schema::types::MDUpdateAction::DELETE_FROM{});
        break;
    case enum_16::OVERLAY:
        visitor.on_enum_value(e, ::bovespa_mbo_sbe::schema::types::MDUpdateAction::OVERLAY{});
        break;
    default:
        visitor.on_enum_value(e, ::sbepp::unknown_enum_value_tag{});
    }
}


} // namespace types
} // namespace detail

namespace types
{
using MDUpdateAction = ::bovespa_mbo_sbe::detail::types::enum_16;
} // namespace types
} // namespace bovespa_mbo_sbe

namespace sbepp
{

template<>
class enum_traits<::bovespa_mbo_sbe::schema::types::MDUpdateAction>
{
public:
    static constexpr const char* name() noexcept
    {
        return "MDUpdateAction";
    }

    static constexpr const char* description() noexcept
    {
        return "Types of Market Data update action.";
    }

    using encoding_type = ::std::uint8_t;
    
    
    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    
    using value_type = ::bovespa_mbo_sbe::types::MDUpdateAction;
};

template<>
struct traits_tag<::bovespa_mbo_sbe::types::MDUpdateAction>
{
    using type = ::bovespa_mbo_sbe::schema::types::MDUpdateAction;
};


template<>
class enum_value_traits<::bovespa_mbo_sbe::schema::types::MDUpdateAction::NEW>
{
public:
    static constexpr const char* name() noexcept
    {
        return "NEW";
    }

    static constexpr const char* description() noexcept
    {
        return "New.";
    }
    
    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    

    static constexpr ::bovespa_mbo_sbe::types::MDUpdateAction value() noexcept
    {
        return ::bovespa_mbo_sbe::types::MDUpdateAction::NEW;
    }
};

template<>
class enum_value_traits<::bovespa_mbo_sbe::schema::types::MDUpdateAction::CHANGE>
{
public:
    static constexpr const char* name() noexcept
    {
        return "CHANGE";
    }

    static constexpr const char* description() noexcept
    {
        return "Change.";
    }
    
    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    

    static constexpr ::bovespa_mbo_sbe::types::MDUpdateAction value() noexcept
    {
        return ::bovespa_mbo_sbe::types::MDUpdateAction::CHANGE;
    }
};

template<>
class enum_value_traits<::bovespa_mbo_sbe::schema::types::MDUpdateAction::DELETE>
{
public:
    static constexpr const char* name() noexcept
    {
        return "DELETE";
    }

    static constexpr const char* description() noexcept
    {
        return "Delete.";
    }
    
    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    

    static constexpr ::bovespa_mbo_sbe::types::MDUpdateAction value() noexcept
    {
        return ::bovespa_mbo_sbe::types::MDUpdateAction::DELETE;
    }
};

template<>
class enum_value_traits<::bovespa_mbo_sbe::schema::types::MDUpdateAction::DELETE_THRU>
{
public:
    static constexpr const char* name() noexcept
    {
        return "DELETE_THRU";
    }

    static constexpr const char* description() noexcept
    {
        return "Delete Thru - only for MBO.";
    }
    
    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    

    static constexpr ::bovespa_mbo_sbe::types::MDUpdateAction value() noexcept
    {
        return ::bovespa_mbo_sbe::types::MDUpdateAction::DELETE_THRU;
    }
};

template<>
class enum_value_traits<::bovespa_mbo_sbe::schema::types::MDUpdateAction::DELETE_FROM>
{
public:
    static constexpr const char* name() noexcept
    {
        return "DELETE_FROM";
    }

    static constexpr const char* description() noexcept
    {
        return "Delete From - only for MBO.";
    }
    
    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    

    static constexpr ::bovespa_mbo_sbe::types::MDUpdateAction value() noexcept
    {
        return ::bovespa_mbo_sbe::types::MDUpdateAction::DELETE_FROM;
    }
};

template<>
class enum_value_traits<::bovespa_mbo_sbe::schema::types::MDUpdateAction::OVERLAY>
{
public:
    static constexpr const char* name() noexcept
    {
        return "OVERLAY";
    }

    static constexpr const char* description() noexcept
    {
        return "Overlay - not used.";
    }
    
    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    

    static constexpr ::bovespa_mbo_sbe::types::MDUpdateAction value() noexcept
    {
        return ::bovespa_mbo_sbe::types::MDUpdateAction::OVERLAY;
    }
};

}  // namespace sbepp

SBEPP_WARNINGS_ON();
