// SPDX-License-Identifier: MIT
// Copyright (c) 2023, Oleksandr Koval

// This file was generated by sbeppc 1.3.0
#pragma once

#include <sbepp/sbepp.hpp>

SBEPP_WARNINGS_OFF();

#include "../schema/schema.hpp"


namespace bovespa_mbo_sbe
{
namespace detail
{
namespace types
{

enum class enum_11 : ::std::uint8_t
{
    NET_PRICE = 0,
    REVERSED_NET_PRICE = 1,
    YIELD_DIFFERENCE = 2,
    INDIVIDUAL = 3,
    CONTRACT_WEIGHTED_AVERAGE_PRICE = 4,
    MULTIPLIED_PRICE = 5
};

template<typename Visitor>
SBEPP_CPP14_CONSTEXPR void tag_invoke(
    ::sbepp::detail::visit_tag, enum_11 e, Visitor& visitor) noexcept
{
    switch(e)
    {
    case enum_11::NET_PRICE:
        visitor.on_enum_value(e, ::bovespa_mbo_sbe::schema::types::MultiLegPriceMethod::NET_PRICE{});
        break;
    case enum_11::REVERSED_NET_PRICE:
        visitor.on_enum_value(e, ::bovespa_mbo_sbe::schema::types::MultiLegPriceMethod::REVERSED_NET_PRICE{});
        break;
    case enum_11::YIELD_DIFFERENCE:
        visitor.on_enum_value(e, ::bovespa_mbo_sbe::schema::types::MultiLegPriceMethod::YIELD_DIFFERENCE{});
        break;
    case enum_11::INDIVIDUAL:
        visitor.on_enum_value(e, ::bovespa_mbo_sbe::schema::types::MultiLegPriceMethod::INDIVIDUAL{});
        break;
    case enum_11::CONTRACT_WEIGHTED_AVERAGE_PRICE:
        visitor.on_enum_value(e, ::bovespa_mbo_sbe::schema::types::MultiLegPriceMethod::CONTRACT_WEIGHTED_AVERAGE_PRICE{});
        break;
    case enum_11::MULTIPLIED_PRICE:
        visitor.on_enum_value(e, ::bovespa_mbo_sbe::schema::types::MultiLegPriceMethod::MULTIPLIED_PRICE{});
        break;
    default:
        visitor.on_enum_value(e, ::sbepp::unknown_enum_value_tag{});
    }
}


} // namespace types
} // namespace detail

namespace types
{
using MultiLegPriceMethod = ::bovespa_mbo_sbe::detail::types::enum_11;
} // namespace types
} // namespace bovespa_mbo_sbe

namespace sbepp
{

template<>
class enum_traits<::bovespa_mbo_sbe::schema::types::MultiLegPriceMethod>
{
public:
    static constexpr const char* name() noexcept
    {
        return "MultiLegPriceMethod";
    }

    static constexpr const char* description() noexcept
    {
        return "Code to represent how the multileg price is to be interpreted when applied to the legs.";
    }

    using encoding_type = ::std::uint8_t;
    
    
    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    
    using value_type = ::bovespa_mbo_sbe::types::MultiLegPriceMethod;
};

template<>
struct traits_tag<::bovespa_mbo_sbe::types::MultiLegPriceMethod>
{
    using type = ::bovespa_mbo_sbe::schema::types::MultiLegPriceMethod;
};


template<>
class enum_value_traits<::bovespa_mbo_sbe::schema::types::MultiLegPriceMethod::NET_PRICE>
{
public:
    static constexpr const char* name() noexcept
    {
        return "NET_PRICE";
    }

    static constexpr const char* description() noexcept
    {
        return "Net Price.";
    }
    
    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    

    static constexpr ::bovespa_mbo_sbe::types::MultiLegPriceMethod value() noexcept
    {
        return ::bovespa_mbo_sbe::types::MultiLegPriceMethod::NET_PRICE;
    }
};

template<>
class enum_value_traits<::bovespa_mbo_sbe::schema::types::MultiLegPriceMethod::REVERSED_NET_PRICE>
{
public:
    static constexpr const char* name() noexcept
    {
        return "REVERSED_NET_PRICE";
    }

    static constexpr const char* description() noexcept
    {
        return "Reversed Net Price.";
    }
    
    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    

    static constexpr ::bovespa_mbo_sbe::types::MultiLegPriceMethod value() noexcept
    {
        return ::bovespa_mbo_sbe::types::MultiLegPriceMethod::REVERSED_NET_PRICE;
    }
};

template<>
class enum_value_traits<::bovespa_mbo_sbe::schema::types::MultiLegPriceMethod::YIELD_DIFFERENCE>
{
public:
    static constexpr const char* name() noexcept
    {
        return "YIELD_DIFFERENCE";
    }

    static constexpr const char* description() noexcept
    {
        return "Yield Difference.";
    }
    
    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    

    static constexpr ::bovespa_mbo_sbe::types::MultiLegPriceMethod value() noexcept
    {
        return ::bovespa_mbo_sbe::types::MultiLegPriceMethod::YIELD_DIFFERENCE;
    }
};

template<>
class enum_value_traits<::bovespa_mbo_sbe::schema::types::MultiLegPriceMethod::INDIVIDUAL>
{
public:
    static constexpr const char* name() noexcept
    {
        return "INDIVIDUAL";
    }

    static constexpr const char* description() noexcept
    {
        return "Individual.";
    }
    
    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    

    static constexpr ::bovespa_mbo_sbe::types::MultiLegPriceMethod value() noexcept
    {
        return ::bovespa_mbo_sbe::types::MultiLegPriceMethod::INDIVIDUAL;
    }
};

template<>
class enum_value_traits<::bovespa_mbo_sbe::schema::types::MultiLegPriceMethod::CONTRACT_WEIGHTED_AVERAGE_PRICE>
{
public:
    static constexpr const char* name() noexcept
    {
        return "CONTRACT_WEIGHTED_AVERAGE_PRICE";
    }

    static constexpr const char* description() noexcept
    {
        return "Contract Weighted Average Price.";
    }
    
    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    

    static constexpr ::bovespa_mbo_sbe::types::MultiLegPriceMethod value() noexcept
    {
        return ::bovespa_mbo_sbe::types::MultiLegPriceMethod::CONTRACT_WEIGHTED_AVERAGE_PRICE;
    }
};

template<>
class enum_value_traits<::bovespa_mbo_sbe::schema::types::MultiLegPriceMethod::MULTIPLIED_PRICE>
{
public:
    static constexpr const char* name() noexcept
    {
        return "MULTIPLIED_PRICE";
    }

    static constexpr const char* description() noexcept
    {
        return "Multiplied Price.";
    }
    
    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    

    static constexpr ::bovespa_mbo_sbe::types::MultiLegPriceMethod value() noexcept
    {
        return ::bovespa_mbo_sbe::types::MultiLegPriceMethod::MULTIPLIED_PRICE;
    }
};

}  // namespace sbepp

SBEPP_WARNINGS_ON();
