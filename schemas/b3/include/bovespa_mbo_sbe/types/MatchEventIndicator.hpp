// SPDX-License-Identifier: MIT
// Copyright (c) 2023, Oleksandr Koval

// This file was generated by sbeppc 1.3.0
#pragma once

#include <sbepp/sbepp.hpp>

SBEPP_WARNINGS_OFF();

#include "../schema/schema.hpp"


namespace bovespa_mbo_sbe
{
namespace detail
{
namespace types
{

class set_2 : public ::sbepp::detail::bitset_base<::std::uint8_t>
{
public:
    using ::sbepp::detail::bitset_base<::std::uint8_t>::bitset_base;
    using ::sbepp::detail::bitset_base<::std::uint8_t>::operator();

    
    constexpr bool LastTradeMsg() const noexcept
    {
        return (*this)(::sbepp::detail::get_bit_tag{}, 0);
    }

    SBEPP_CPP14_CONSTEXPR set_2& LastTradeMsg(const bool v) noexcept
    {
        (*this)(::sbepp::detail::set_bit_tag{}, 0, v);
        return *this;
    }

    constexpr bool LastVolumeMsg() const noexcept
    {
        return (*this)(::sbepp::detail::get_bit_tag{}, 1);
    }

    SBEPP_CPP14_CONSTEXPR set_2& LastVolumeMsg(const bool v) noexcept
    {
        (*this)(::sbepp::detail::set_bit_tag{}, 1, v);
        return *this;
    }

    constexpr bool LastQuoteMsg() const noexcept
    {
        return (*this)(::sbepp::detail::get_bit_tag{}, 2);
    }

    SBEPP_CPP14_CONSTEXPR set_2& LastQuoteMsg(const bool v) noexcept
    {
        (*this)(::sbepp::detail::set_bit_tag{}, 2, v);
        return *this;
    }

    constexpr bool LastStatsMsg() const noexcept
    {
        return (*this)(::sbepp::detail::get_bit_tag{}, 3);
    }

    SBEPP_CPP14_CONSTEXPR set_2& LastStatsMsg(const bool v) noexcept
    {
        (*this)(::sbepp::detail::set_bit_tag{}, 3, v);
        return *this;
    }

    constexpr bool LastImpliedMsg() const noexcept
    {
        return (*this)(::sbepp::detail::get_bit_tag{}, 4);
    }

    SBEPP_CPP14_CONSTEXPR set_2& LastImpliedMsg(const bool v) noexcept
    {
        (*this)(::sbepp::detail::set_bit_tag{}, 4, v);
        return *this;
    }

    constexpr bool RecoveryMsg() const noexcept
    {
        return (*this)(::sbepp::detail::get_bit_tag{}, 5);
    }

    SBEPP_CPP14_CONSTEXPR set_2& RecoveryMsg(const bool v) noexcept
    {
        (*this)(::sbepp::detail::set_bit_tag{}, 5, v);
        return *this;
    }

    constexpr bool Reserved() const noexcept
    {
        return (*this)(::sbepp::detail::get_bit_tag{}, 6);
    }

    SBEPP_CPP14_CONSTEXPR set_2& Reserved(const bool v) noexcept
    {
        (*this)(::sbepp::detail::set_bit_tag{}, 6, v);
        return *this;
    }

    constexpr bool EndOfEvent() const noexcept
    {
        return (*this)(::sbepp::detail::get_bit_tag{}, 7);
    }

    SBEPP_CPP14_CONSTEXPR set_2& EndOfEvent(const bool v) noexcept
    {
        (*this)(::sbepp::detail::set_bit_tag{}, 7, v);
        return *this;
    }

    template<typename Visitor>
SBEPP_CPP14_CONSTEXPR Visitor&& operator()(
    ::sbepp::detail::visit_set_tag, Visitor&& visitor) const noexcept
{
    visitor(this->LastTradeMsg(), "LastTradeMsg");
    visitor(this->LastVolumeMsg(), "LastVolumeMsg");
    visitor(this->LastQuoteMsg(), "LastQuoteMsg");
    visitor(this->LastStatsMsg(), "LastStatsMsg");
    visitor(this->LastImpliedMsg(), "LastImpliedMsg");
    visitor(this->RecoveryMsg(), "RecoveryMsg");
    visitor(this->Reserved(), "Reserved");
    visitor(this->EndOfEvent(), "EndOfEvent");
    return std::forward<Visitor>(visitor);
}

    
template<typename Visitor>
SBEPP_CPP14_CONSTEXPR void operator()(
    ::sbepp::detail::visit_tag, Visitor& visitor) const noexcept
{
    visitor.on_set_choice(this->LastTradeMsg(), ::bovespa_mbo_sbe::schema::types::MatchEventIndicator::LastTradeMsg{});
    visitor.on_set_choice(this->LastVolumeMsg(), ::bovespa_mbo_sbe::schema::types::MatchEventIndicator::LastVolumeMsg{});
    visitor.on_set_choice(this->LastQuoteMsg(), ::bovespa_mbo_sbe::schema::types::MatchEventIndicator::LastQuoteMsg{});
    visitor.on_set_choice(this->LastStatsMsg(), ::bovespa_mbo_sbe::schema::types::MatchEventIndicator::LastStatsMsg{});
    visitor.on_set_choice(this->LastImpliedMsg(), ::bovespa_mbo_sbe::schema::types::MatchEventIndicator::LastImpliedMsg{});
    visitor.on_set_choice(this->RecoveryMsg(), ::bovespa_mbo_sbe::schema::types::MatchEventIndicator::RecoveryMsg{});
    visitor.on_set_choice(this->Reserved(), ::bovespa_mbo_sbe::schema::types::MatchEventIndicator::Reserved{});
    visitor.on_set_choice(this->EndOfEvent(), ::bovespa_mbo_sbe::schema::types::MatchEventIndicator::EndOfEvent{});
}

};

} // namespace types
} // namespace detail

namespace types
{
using MatchEventIndicator = ::bovespa_mbo_sbe::detail::types::set_2;
} // namespace types
} // namespace bovespa_mbo_sbe

namespace sbepp
{

template<>
class set_traits<::bovespa_mbo_sbe::schema::types::MatchEventIndicator>
{
public:
    static constexpr const char* name() noexcept
    {
        return "MatchEventIndicator";
    }

    static constexpr const char* description() noexcept
    {
        return "Set of indicators for the end of updates for a given event. It also indicates if this message is a retransmission.";
    }

    using encoding_type = ::std::uint8_t;
    
    
    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    
    using value_type = ::bovespa_mbo_sbe::types::MatchEventIndicator;
};

template<>
struct traits_tag<::bovespa_mbo_sbe::types::MatchEventIndicator>
{
    using type = ::bovespa_mbo_sbe::schema::types::MatchEventIndicator;
};


template<>
class set_choice_traits<::bovespa_mbo_sbe::schema::types::MatchEventIndicator::LastTradeMsg>
{
public:
    static constexpr const char* name() noexcept
    {
        return "LastTradeMsg";
    }

    static constexpr const char* description() noexcept
    {
        return "(Reserved) 1=Last trade message for the event, 0=Not last.";
    }
    
    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    

    static constexpr choice_index_t index() noexcept
    {
        return 0;
    }
};

template<>
class set_choice_traits<::bovespa_mbo_sbe::schema::types::MatchEventIndicator::LastVolumeMsg>
{
public:
    static constexpr const char* name() noexcept
    {
        return "LastVolumeMsg";
    }

    static constexpr const char* description() noexcept
    {
        return "(Reserved) 1=Last electronic volume message, 0=Not last.";
    }
    
    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    

    static constexpr choice_index_t index() noexcept
    {
        return 1;
    }
};

template<>
class set_choice_traits<::bovespa_mbo_sbe::schema::types::MatchEventIndicator::LastQuoteMsg>
{
public:
    static constexpr const char* name() noexcept
    {
        return "LastQuoteMsg";
    }

    static constexpr const char* description() noexcept
    {
        return "(Reserved) 1=Last real quote message, 0=Not last.";
    }
    
    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    

    static constexpr choice_index_t index() noexcept
    {
        return 2;
    }
};

template<>
class set_choice_traits<::bovespa_mbo_sbe::schema::types::MatchEventIndicator::LastStatsMsg>
{
public:
    static constexpr const char* name() noexcept
    {
        return "LastStatsMsg";
    }

    static constexpr const char* description() noexcept
    {
        return "(Reserved) 1=Last statistics message, 0=Not last.";
    }
    
    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    

    static constexpr choice_index_t index() noexcept
    {
        return 3;
    }
};

template<>
class set_choice_traits<::bovespa_mbo_sbe::schema::types::MatchEventIndicator::LastImpliedMsg>
{
public:
    static constexpr const char* name() noexcept
    {
        return "LastImpliedMsg";
    }

    static constexpr const char* description() noexcept
    {
        return "(Reserved) 1=Last implied quote message, 0=Not last.";
    }
    
    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    

    static constexpr choice_index_t index() noexcept
    {
        return 4;
    }
};

template<>
class set_choice_traits<::bovespa_mbo_sbe::schema::types::MatchEventIndicator::RecoveryMsg>
{
public:
    static constexpr const char* name() noexcept
    {
        return "RecoveryMsg";
    }

    static constexpr const char* description() noexcept
    {
        return "1=Message is sent during recovery process (QuoteCondition=R), 0=Not.";
    }
    
    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    

    static constexpr choice_index_t index() noexcept
    {
        return 5;
    }
};

template<>
class set_choice_traits<::bovespa_mbo_sbe::schema::types::MatchEventIndicator::Reserved>
{
public:
    static constexpr const char* name() noexcept
    {
        return "Reserved";
    }

    static constexpr const char* description() noexcept
    {
        return "0=Reserved for future use.";
    }
    
    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    

    static constexpr choice_index_t index() noexcept
    {
        return 6;
    }
};

template<>
class set_choice_traits<::bovespa_mbo_sbe::schema::types::MatchEventIndicator::EndOfEvent>
{
public:
    static constexpr const char* name() noexcept
    {
        return "EndOfEvent";
    }

    static constexpr const char* description() noexcept
    {
        return "1=Last message for the event, 0=Not last.";
    }
    
    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    

    static constexpr choice_index_t index() noexcept
    {
        return 7;
    }
};

}  // namespace sbepp

SBEPP_WARNINGS_ON();
