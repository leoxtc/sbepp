// SPDX-License-Identifier: MIT
// Copyright (c) 2023, Oleksandr Koval

// This file was generated by sbeppc 1.3.0
#pragma once

#include <sbepp/sbepp.hpp>

SBEPP_WARNINGS_OFF();

#include "../schema/schema.hpp"


namespace bovespa_mbo_sbe
{
namespace detail
{
namespace types
{

enum class enum_2 : ::std::uint8_t
{
    ELECTRONIC_MATCH_OR_GTD_GTC_ELIGIBLE = 1,
    ORDER_CROSS_ELIGIBLE = 2,
    BLOCK_TRADE_ELIGIBLE = 3,
    FLAG_RFQ_FOR_CROSS_ELIGIBLE = 14,
    NEGOTIATED_QUOTE_ELIGIBLE = 17
};

template<typename Visitor>
SBEPP_CPP14_CONSTEXPR void tag_invoke(
    ::sbepp::detail::visit_tag, enum_2 e, Visitor& visitor) noexcept
{
    switch(e)
    {
    case enum_2::ELECTRONIC_MATCH_OR_GTD_GTC_ELIGIBLE:
        visitor.on_enum_value(e, ::bovespa_mbo_sbe::schema::types::InstrAttribValue::ELECTRONIC_MATCH_OR_GTD_GTC_ELIGIBLE{});
        break;
    case enum_2::ORDER_CROSS_ELIGIBLE:
        visitor.on_enum_value(e, ::bovespa_mbo_sbe::schema::types::InstrAttribValue::ORDER_CROSS_ELIGIBLE{});
        break;
    case enum_2::BLOCK_TRADE_ELIGIBLE:
        visitor.on_enum_value(e, ::bovespa_mbo_sbe::schema::types::InstrAttribValue::BLOCK_TRADE_ELIGIBLE{});
        break;
    case enum_2::FLAG_RFQ_FOR_CROSS_ELIGIBLE:
        visitor.on_enum_value(e, ::bovespa_mbo_sbe::schema::types::InstrAttribValue::FLAG_RFQ_FOR_CROSS_ELIGIBLE{});
        break;
    case enum_2::NEGOTIATED_QUOTE_ELIGIBLE:
        visitor.on_enum_value(e, ::bovespa_mbo_sbe::schema::types::InstrAttribValue::NEGOTIATED_QUOTE_ELIGIBLE{});
        break;
    default:
        visitor.on_enum_value(e, ::sbepp::unknown_enum_value_tag{});
    }
}


} // namespace types
} // namespace detail

namespace types
{
using InstrAttribValue = ::bovespa_mbo_sbe::detail::types::enum_2;
} // namespace types
} // namespace bovespa_mbo_sbe

namespace sbepp
{

template<>
class enum_traits<::bovespa_mbo_sbe::schema::types::InstrAttribValue>
{
public:
    static constexpr const char* name() noexcept
    {
        return "InstrAttribValue";
    }

    static constexpr const char* description() noexcept
    {
        return "Code to represent the type of instrument attributes.";
    }

    using encoding_type = ::std::uint8_t;
    
    
    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    
    using value_type = ::bovespa_mbo_sbe::types::InstrAttribValue;
};

template<>
struct traits_tag<::bovespa_mbo_sbe::types::InstrAttribValue>
{
    using type = ::bovespa_mbo_sbe::schema::types::InstrAttribValue;
};


template<>
class enum_value_traits<::bovespa_mbo_sbe::schema::types::InstrAttribValue::ELECTRONIC_MATCH_OR_GTD_GTC_ELIGIBLE>
{
public:
    static constexpr const char* name() noexcept
    {
        return "ELECTRONIC_MATCH_OR_GTD_GTC_ELIGIBLE";
    }

    static constexpr const char* description() noexcept
    {
        return "Electronic Match Eligible (871=24) or GTD/GTC Eligible (871=34).";
    }
    
    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    

    static constexpr ::bovespa_mbo_sbe::types::InstrAttribValue value() noexcept
    {
        return ::bovespa_mbo_sbe::types::InstrAttribValue::ELECTRONIC_MATCH_OR_GTD_GTC_ELIGIBLE;
    }
};

template<>
class enum_value_traits<::bovespa_mbo_sbe::schema::types::InstrAttribValue::ORDER_CROSS_ELIGIBLE>
{
public:
    static constexpr const char* name() noexcept
    {
        return "ORDER_CROSS_ELIGIBLE";
    }

    static constexpr const char* description() noexcept
    {
        return "Order Cross Eligible (871=24).";
    }
    
    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    

    static constexpr ::bovespa_mbo_sbe::types::InstrAttribValue value() noexcept
    {
        return ::bovespa_mbo_sbe::types::InstrAttribValue::ORDER_CROSS_ELIGIBLE;
    }
};

template<>
class enum_value_traits<::bovespa_mbo_sbe::schema::types::InstrAttribValue::BLOCK_TRADE_ELIGIBLE>
{
public:
    static constexpr const char* name() noexcept
    {
        return "BLOCK_TRADE_ELIGIBLE";
    }

    static constexpr const char* description() noexcept
    {
        return "Block Trade Eligible (871=24).";
    }
    
    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    

    static constexpr ::bovespa_mbo_sbe::types::InstrAttribValue value() noexcept
    {
        return ::bovespa_mbo_sbe::types::InstrAttribValue::BLOCK_TRADE_ELIGIBLE;
    }
};

template<>
class enum_value_traits<::bovespa_mbo_sbe::schema::types::InstrAttribValue::FLAG_RFQ_FOR_CROSS_ELIGIBLE>
{
public:
    static constexpr const char* name() noexcept
    {
        return "FLAG_RFQ_FOR_CROSS_ELIGIBLE";
    }

    static constexpr const char* description() noexcept
    {
        return "Request for Quote (RFQ) for Cross Eligible (871=24).";
    }
    
    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    

    static constexpr ::bovespa_mbo_sbe::types::InstrAttribValue value() noexcept
    {
        return ::bovespa_mbo_sbe::types::InstrAttribValue::FLAG_RFQ_FOR_CROSS_ELIGIBLE;
    }
};

template<>
class enum_value_traits<::bovespa_mbo_sbe::schema::types::InstrAttribValue::NEGOTIATED_QUOTE_ELIGIBLE>
{
public:
    static constexpr const char* name() noexcept
    {
        return "NEGOTIATED_QUOTE_ELIGIBLE";
    }

    static constexpr const char* description() noexcept
    {
        return "Negotiated Quote Eligible (871=24).";
    }
    
    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    

    static constexpr ::bovespa_mbo_sbe::types::InstrAttribValue value() noexcept
    {
        return ::bovespa_mbo_sbe::types::InstrAttribValue::NEGOTIATED_QUOTE_ELIGIBLE;
    }
};

}  // namespace sbepp

SBEPP_WARNINGS_ON();
