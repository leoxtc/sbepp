// SPDX-License-Identifier: MIT
// Copyright (c) 2023, Oleksandr Koval

// This file was generated by sbeppc 1.3.0
#pragma once

#include <sbepp/sbepp.hpp>

SBEPP_WARNINGS_OFF();

#include "../schema/schema.hpp"


namespace bovespa_mbo_sbe
{
namespace detail
{
namespace types
{

enum class enum_13 : ::std::uint8_t
{
    PAUSE = 2,
    CLOSE = 4,
    OPEN = 17,
    FORBIDDEN = 18,
    UNKNOWN_OR_INVALID = 20,
    RESERVED = 21,
    FINAL_CLOSING_CALL = 101
};

template<typename Visitor>
SBEPP_CPP14_CONSTEXPR void tag_invoke(
    ::sbepp::detail::visit_tag, enum_13 e, Visitor& visitor) noexcept
{
    switch(e)
    {
    case enum_13::PAUSE:
        visitor.on_enum_value(e, ::bovespa_mbo_sbe::schema::types::TradingSessionSubID::PAUSE{});
        break;
    case enum_13::CLOSE:
        visitor.on_enum_value(e, ::bovespa_mbo_sbe::schema::types::TradingSessionSubID::CLOSE{});
        break;
    case enum_13::OPEN:
        visitor.on_enum_value(e, ::bovespa_mbo_sbe::schema::types::TradingSessionSubID::OPEN{});
        break;
    case enum_13::FORBIDDEN:
        visitor.on_enum_value(e, ::bovespa_mbo_sbe::schema::types::TradingSessionSubID::FORBIDDEN{});
        break;
    case enum_13::UNKNOWN_OR_INVALID:
        visitor.on_enum_value(e, ::bovespa_mbo_sbe::schema::types::TradingSessionSubID::UNKNOWN_OR_INVALID{});
        break;
    case enum_13::RESERVED:
        visitor.on_enum_value(e, ::bovespa_mbo_sbe::schema::types::TradingSessionSubID::RESERVED{});
        break;
    case enum_13::FINAL_CLOSING_CALL:
        visitor.on_enum_value(e, ::bovespa_mbo_sbe::schema::types::TradingSessionSubID::FINAL_CLOSING_CALL{});
        break;
    default:
        visitor.on_enum_value(e, ::sbepp::unknown_enum_value_tag{});
    }
}


} // namespace types
} // namespace detail

namespace types
{
using TradingSessionSubID = ::bovespa_mbo_sbe::detail::types::enum_13;
} // namespace types
} // namespace bovespa_mbo_sbe

namespace sbepp
{

template<>
class enum_traits<::bovespa_mbo_sbe::schema::types::TradingSessionSubID>
{
public:
    static constexpr const char* name() noexcept
    {
        return "TradingSessionSubID";
    }

    static constexpr const char* description() noexcept
    {
        return "Status related to a given Instrument or phase related to a SecurityGroup where the instrument belongs to.";
    }

    using encoding_type = ::std::uint8_t;
    
    
    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    
    using value_type = ::bovespa_mbo_sbe::types::TradingSessionSubID;
};

template<>
struct traits_tag<::bovespa_mbo_sbe::types::TradingSessionSubID>
{
    using type = ::bovespa_mbo_sbe::schema::types::TradingSessionSubID;
};


template<>
class enum_value_traits<::bovespa_mbo_sbe::schema::types::TradingSessionSubID::PAUSE>
{
public:
    static constexpr const char* name() noexcept
    {
        return "PAUSE";
    }

    static constexpr const char* description() noexcept
    {
        return "Trading Halt (Pause).";
    }
    
    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    

    static constexpr ::bovespa_mbo_sbe::types::TradingSessionSubID value() noexcept
    {
        return ::bovespa_mbo_sbe::types::TradingSessionSubID::PAUSE;
    }
};

template<>
class enum_value_traits<::bovespa_mbo_sbe::schema::types::TradingSessionSubID::CLOSE>
{
public:
    static constexpr const char* name() noexcept
    {
        return "CLOSE";
    }

    static constexpr const char* description() noexcept
    {
        return "No-Open (Close).";
    }
    
    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    

    static constexpr ::bovespa_mbo_sbe::types::TradingSessionSubID value() noexcept
    {
        return ::bovespa_mbo_sbe::types::TradingSessionSubID::CLOSE;
    }
};

template<>
class enum_value_traits<::bovespa_mbo_sbe::schema::types::TradingSessionSubID::OPEN>
{
public:
    static constexpr const char* name() noexcept
    {
        return "OPEN";
    }

    static constexpr const char* description() noexcept
    {
        return "Ready To Trade (Open).";
    }
    
    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    

    static constexpr ::bovespa_mbo_sbe::types::TradingSessionSubID value() noexcept
    {
        return ::bovespa_mbo_sbe::types::TradingSessionSubID::OPEN;
    }
};

template<>
class enum_value_traits<::bovespa_mbo_sbe::schema::types::TradingSessionSubID::FORBIDDEN>
{
public:
    static constexpr const char* name() noexcept
    {
        return "FORBIDDEN";
    }

    static constexpr const char* description() noexcept
    {
        return "Not Available For Trading (Forbidden).";
    }
    
    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    

    static constexpr ::bovespa_mbo_sbe::types::TradingSessionSubID value() noexcept
    {
        return ::bovespa_mbo_sbe::types::TradingSessionSubID::FORBIDDEN;
    }
};

template<>
class enum_value_traits<::bovespa_mbo_sbe::schema::types::TradingSessionSubID::UNKNOWN_OR_INVALID>
{
public:
    static constexpr const char* name() noexcept
    {
        return "UNKNOWN_OR_INVALID";
    }

    static constexpr const char* description() noexcept
    {
        return "Unknown Or Invalid.";
    }
    
    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    

    static constexpr ::bovespa_mbo_sbe::types::TradingSessionSubID value() noexcept
    {
        return ::bovespa_mbo_sbe::types::TradingSessionSubID::UNKNOWN_OR_INVALID;
    }
};

template<>
class enum_value_traits<::bovespa_mbo_sbe::schema::types::TradingSessionSubID::RESERVED>
{
public:
    static constexpr const char* name() noexcept
    {
        return "RESERVED";
    }

    static constexpr const char* description() noexcept
    {
        return "Pre Open (Reserved).";
    }
    
    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    

    static constexpr ::bovespa_mbo_sbe::types::TradingSessionSubID value() noexcept
    {
        return ::bovespa_mbo_sbe::types::TradingSessionSubID::RESERVED;
    }
};

template<>
class enum_value_traits<::bovespa_mbo_sbe::schema::types::TradingSessionSubID::FINAL_CLOSING_CALL>
{
public:
    static constexpr const char* name() noexcept
    {
        return "FINAL_CLOSING_CALL";
    }

    static constexpr const char* description() noexcept
    {
        return "Final Closing Call.";
    }
    
    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    

    static constexpr ::bovespa_mbo_sbe::types::TradingSessionSubID value() noexcept
    {
        return ::bovespa_mbo_sbe::types::TradingSessionSubID::FINAL_CLOSING_CALL;
    }
};

}  // namespace sbepp

SBEPP_WARNINGS_ON();
