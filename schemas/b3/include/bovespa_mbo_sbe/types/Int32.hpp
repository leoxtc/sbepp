// SPDX-License-Identifier: MIT
// Copyright (c) 2023, Oleksandr Koval

// This file was generated by sbeppc 1.3.0
#pragma once

#include <sbepp/sbepp.hpp>

SBEPP_WARNINGS_OFF();

#include "../schema/schema.hpp"


namespace bovespa_mbo_sbe
{
namespace detail
{
namespace types
{

class type_22
    : public ::sbepp::detail::required_base<::std::int32_t, type_22>
{
public:
    using ::sbepp::detail::required_base<
        ::std::int32_t, type_22>::required_base;

    static constexpr value_type min_value() noexcept
    {
        return {-2147483647};
    }

    static constexpr value_type max_value() noexcept
    {
        return {2147483647};
    }
};

} // namespace types
} // namespace detail

namespace types
{
using Int32 = ::bovespa_mbo_sbe::detail::types::type_22;
} // namespace types
} // namespace bovespa_mbo_sbe

namespace sbepp
{

template<>
class type_traits<::bovespa_mbo_sbe::schema::types::Int32>
{
public:
    static constexpr const char* name() noexcept
    {
        return "Int32";
    }

    static constexpr const char* description() noexcept
    {
        return "4-byte signed integer, from -2147483648 to 2147483647; if optional, null value is -2147483648.";
    }

    static constexpr field_presence presence() noexcept
    {
        return ::sbepp::field_presence::required;
    }

    using primitive_type = ::std::int32_t;
    
    static constexpr primitive_type min_value() noexcept
    {
        return value_type::min_value();
    }
    
    static constexpr primitive_type max_value() noexcept
    {
        return value_type::max_value();
    }

    
    static constexpr length_t length() noexcept
    {
        return 1;
    }
    
    
    
    static constexpr const char* semantic_type() noexcept
    {
        return "";
    }
    
    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    static constexpr const char* character_encoding() noexcept
    {
        return "";
    }

    
    using value_type = ::bovespa_mbo_sbe::types::Int32;
};

template<>
struct traits_tag<::bovespa_mbo_sbe::types::Int32>
{
    using type = ::bovespa_mbo_sbe::schema::types::Int32;
};


}  // namespace sbepp

SBEPP_WARNINGS_ON();
