// SPDX-License-Identifier: MIT
// Copyright (c) 2023, Oleksandr Koval

// This file was generated by sbeppc 1.3.0
#pragma once

#include <sbepp/sbepp.hpp>

SBEPP_WARNINGS_OFF();

#include "../schema/schema.hpp"


namespace bovespa_mbo_sbe
{
namespace detail
{
namespace types
{

enum class enum_15 : ::std::uint8_t
{
    HARD_LIMIT = 1,
    AUCTION_LIMITS = 2,
    REJECTION_BAND = 3,
    STATIC_LIMITS = 4
};

template<typename Visitor>
SBEPP_CPP14_CONSTEXPR void tag_invoke(
    ::sbepp::detail::visit_tag, enum_15 e, Visitor& visitor) noexcept
{
    switch(e)
    {
    case enum_15::HARD_LIMIT:
        visitor.on_enum_value(e, ::bovespa_mbo_sbe::schema::types::PriceBandType::HARD_LIMIT{});
        break;
    case enum_15::AUCTION_LIMITS:
        visitor.on_enum_value(e, ::bovespa_mbo_sbe::schema::types::PriceBandType::AUCTION_LIMITS{});
        break;
    case enum_15::REJECTION_BAND:
        visitor.on_enum_value(e, ::bovespa_mbo_sbe::schema::types::PriceBandType::REJECTION_BAND{});
        break;
    case enum_15::STATIC_LIMITS:
        visitor.on_enum_value(e, ::bovespa_mbo_sbe::schema::types::PriceBandType::STATIC_LIMITS{});
        break;
    default:
        visitor.on_enum_value(e, ::sbepp::unknown_enum_value_tag{});
    }
}


} // namespace types
} // namespace detail

namespace types
{
using PriceBandType = ::bovespa_mbo_sbe::detail::types::enum_15;
} // namespace types
} // namespace bovespa_mbo_sbe

namespace sbepp
{

template<>
class enum_traits<::bovespa_mbo_sbe::schema::types::PriceBandType>
{
public:
    static constexpr const char* name() noexcept
    {
        return "PriceBandType";
    }

    static constexpr const char* description() noexcept
    {
        return "Indicates the type of price banding (tunnel).";
    }

    using encoding_type = ::std::uint8_t;
    
    
    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    
    using value_type = ::bovespa_mbo_sbe::types::PriceBandType;
};

template<>
struct traits_tag<::bovespa_mbo_sbe::types::PriceBandType>
{
    using type = ::bovespa_mbo_sbe::schema::types::PriceBandType;
};


template<>
class enum_value_traits<::bovespa_mbo_sbe::schema::types::PriceBandType::HARD_LIMIT>
{
public:
    static constexpr const char* name() noexcept
    {
        return "HARD_LIMIT";
    }

    static constexpr const char* description() noexcept
    {
        return "Hard Limit.";
    }
    
    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    

    static constexpr ::bovespa_mbo_sbe::types::PriceBandType value() noexcept
    {
        return ::bovespa_mbo_sbe::types::PriceBandType::HARD_LIMIT;
    }
};

template<>
class enum_value_traits<::bovespa_mbo_sbe::schema::types::PriceBandType::AUCTION_LIMITS>
{
public:
    static constexpr const char* name() noexcept
    {
        return "AUCTION_LIMITS";
    }

    static constexpr const char* description() noexcept
    {
        return "Auction Limits.";
    }
    
    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    

    static constexpr ::bovespa_mbo_sbe::types::PriceBandType value() noexcept
    {
        return ::bovespa_mbo_sbe::types::PriceBandType::AUCTION_LIMITS;
    }
};

template<>
class enum_value_traits<::bovespa_mbo_sbe::schema::types::PriceBandType::REJECTION_BAND>
{
public:
    static constexpr const char* name() noexcept
    {
        return "REJECTION_BAND";
    }

    static constexpr const char* description() noexcept
    {
        return "Rejection Band.";
    }
    
    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    

    static constexpr ::bovespa_mbo_sbe::types::PriceBandType value() noexcept
    {
        return ::bovespa_mbo_sbe::types::PriceBandType::REJECTION_BAND;
    }
};

template<>
class enum_value_traits<::bovespa_mbo_sbe::schema::types::PriceBandType::STATIC_LIMITS>
{
public:
    static constexpr const char* name() noexcept
    {
        return "STATIC_LIMITS";
    }

    static constexpr const char* description() noexcept
    {
        return "Static Limits.";
    }
    
    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    

    static constexpr ::bovespa_mbo_sbe::types::PriceBandType value() noexcept
    {
        return ::bovespa_mbo_sbe::types::PriceBandType::STATIC_LIMITS;
    }
};

}  // namespace sbepp

SBEPP_WARNINGS_ON();
