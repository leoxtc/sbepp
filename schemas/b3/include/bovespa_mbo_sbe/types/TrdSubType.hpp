// SPDX-License-Identifier: MIT
// Copyright (c) 2023, Oleksandr Koval

// This file was generated by sbeppc 1.3.0
#pragma once

#include <sbepp/sbepp.hpp>

SBEPP_WARNINGS_OFF();

#include "../schema/schema.hpp"


namespace bovespa_mbo_sbe
{
namespace detail
{
namespace types
{

enum class enum_34 : ::std::uint8_t
{
    MULTI_ASSET_TRADE = 101,
    LEG_TRADE = 102,
    MIDPOINT_TRADE = 103,
    BLOCK_BOOK_TRADE = 104,
    RF_TRADE = 105,
    RLP_TRADE = 106,
    TAC_TRADE = 107,
    TAA_TRADE = 108
};

template<typename Visitor>
SBEPP_CPP14_CONSTEXPR void tag_invoke(
    ::sbepp::detail::visit_tag, enum_34 e, Visitor& visitor) noexcept
{
    switch(e)
    {
    case enum_34::MULTI_ASSET_TRADE:
        visitor.on_enum_value(e, ::bovespa_mbo_sbe::schema::types::TrdSubType::MULTI_ASSET_TRADE{});
        break;
    case enum_34::LEG_TRADE:
        visitor.on_enum_value(e, ::bovespa_mbo_sbe::schema::types::TrdSubType::LEG_TRADE{});
        break;
    case enum_34::MIDPOINT_TRADE:
        visitor.on_enum_value(e, ::bovespa_mbo_sbe::schema::types::TrdSubType::MIDPOINT_TRADE{});
        break;
    case enum_34::BLOCK_BOOK_TRADE:
        visitor.on_enum_value(e, ::bovespa_mbo_sbe::schema::types::TrdSubType::BLOCK_BOOK_TRADE{});
        break;
    case enum_34::RF_TRADE:
        visitor.on_enum_value(e, ::bovespa_mbo_sbe::schema::types::TrdSubType::RF_TRADE{});
        break;
    case enum_34::RLP_TRADE:
        visitor.on_enum_value(e, ::bovespa_mbo_sbe::schema::types::TrdSubType::RLP_TRADE{});
        break;
    case enum_34::TAC_TRADE:
        visitor.on_enum_value(e, ::bovespa_mbo_sbe::schema::types::TrdSubType::TAC_TRADE{});
        break;
    case enum_34::TAA_TRADE:
        visitor.on_enum_value(e, ::bovespa_mbo_sbe::schema::types::TrdSubType::TAA_TRADE{});
        break;
    default:
        visitor.on_enum_value(e, ::sbepp::unknown_enum_value_tag{});
    }
}


} // namespace types
} // namespace detail

namespace types
{
using TrdSubType = ::bovespa_mbo_sbe::detail::types::enum_34;
} // namespace types
} // namespace bovespa_mbo_sbe

namespace sbepp
{

template<>
class enum_traits<::bovespa_mbo_sbe::schema::types::TrdSubType>
{
public:
    static constexpr const char* name() noexcept
    {
        return "TrdSubType";
    }

    static constexpr const char* description() noexcept
    {
        return "Sub type of trade assigned to a trade.";
    }

    using encoding_type = ::std::uint8_t;
    
    
    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    
    using value_type = ::bovespa_mbo_sbe::types::TrdSubType;
};

template<>
struct traits_tag<::bovespa_mbo_sbe::types::TrdSubType>
{
    using type = ::bovespa_mbo_sbe::schema::types::TrdSubType;
};


template<>
class enum_value_traits<::bovespa_mbo_sbe::schema::types::TrdSubType::MULTI_ASSET_TRADE>
{
public:
    static constexpr const char* name() noexcept
    {
        return "MULTI_ASSET_TRADE";
    }

    static constexpr const char* description() noexcept
    {
        return "Multi Asset Trade (Termo Vista).";
    }
    
    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    

    static constexpr ::bovespa_mbo_sbe::types::TrdSubType value() noexcept
    {
        return ::bovespa_mbo_sbe::types::TrdSubType::MULTI_ASSET_TRADE;
    }
};

template<>
class enum_value_traits<::bovespa_mbo_sbe::schema::types::TrdSubType::LEG_TRADE>
{
public:
    static constexpr const char* name() noexcept
    {
        return "LEG_TRADE";
    }

    static constexpr const char* description() noexcept
    {
        return "Leg Trade (UDS/EDS).";
    }
    
    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    

    static constexpr ::bovespa_mbo_sbe::types::TrdSubType value() noexcept
    {
        return ::bovespa_mbo_sbe::types::TrdSubType::LEG_TRADE;
    }
};

template<>
class enum_value_traits<::bovespa_mbo_sbe::schema::types::TrdSubType::MIDPOINT_TRADE>
{
public:
    static constexpr const char* name() noexcept
    {
        return "MIDPOINT_TRADE";
    }

    static constexpr const char* description() noexcept
    {
        return "Midpoint Trade (MP).";
    }
    
    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    

    static constexpr ::bovespa_mbo_sbe::types::TrdSubType value() noexcept
    {
        return ::bovespa_mbo_sbe::types::TrdSubType::MIDPOINT_TRADE;
    }
};

template<>
class enum_value_traits<::bovespa_mbo_sbe::schema::types::TrdSubType::BLOCK_BOOK_TRADE>
{
public:
    static constexpr const char* name() noexcept
    {
        return "BLOCK_BOOK_TRADE";
    }

    static constexpr const char* description() noexcept
    {
        return "Block Book Trade (PT).";
    }
    
    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    

    static constexpr ::bovespa_mbo_sbe::types::TrdSubType value() noexcept
    {
        return ::bovespa_mbo_sbe::types::TrdSubType::BLOCK_BOOK_TRADE;
    }
};

template<>
class enum_value_traits<::bovespa_mbo_sbe::schema::types::TrdSubType::RF_TRADE>
{
public:
    static constexpr const char* name() noexcept
    {
        return "RF_TRADE";
    }

    static constexpr const char* description() noexcept
    {
        return "Equities: RFQ Trade, Futures: Fixed Income Trade (RF).";
    }
    
    static constexpr version_t since_version() noexcept
    {
        return 8;
    }

    

    static constexpr ::bovespa_mbo_sbe::types::TrdSubType value() noexcept
    {
        return ::bovespa_mbo_sbe::types::TrdSubType::RF_TRADE;
    }
};

template<>
class enum_value_traits<::bovespa_mbo_sbe::schema::types::TrdSubType::RLP_TRADE>
{
public:
    static constexpr const char* name() noexcept
    {
        return "RLP_TRADE";
    }

    static constexpr const char* description() noexcept
    {
        return "RLP Trade (RL).";
    }
    
    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    

    static constexpr ::bovespa_mbo_sbe::types::TrdSubType value() noexcept
    {
        return ::bovespa_mbo_sbe::types::TrdSubType::RLP_TRADE;
    }
};

template<>
class enum_value_traits<::bovespa_mbo_sbe::schema::types::TrdSubType::TAC_TRADE>
{
public:
    static constexpr const char* name() noexcept
    {
        return "TAC_TRADE";
    }

    static constexpr const char* description() noexcept
    {
        return "Trade at Close Trade (TC).";
    }
    
    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    

    static constexpr ::bovespa_mbo_sbe::types::TrdSubType value() noexcept
    {
        return ::bovespa_mbo_sbe::types::TrdSubType::TAC_TRADE;
    }
};

template<>
class enum_value_traits<::bovespa_mbo_sbe::schema::types::TrdSubType::TAA_TRADE>
{
public:
    static constexpr const char* name() noexcept
    {
        return "TAA_TRADE";
    }

    static constexpr const char* description() noexcept
    {
        return "Trade at Average Trade (TA).";
    }
    
    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    

    static constexpr ::bovespa_mbo_sbe::types::TrdSubType value() noexcept
    {
        return ::bovespa_mbo_sbe::types::TrdSubType::TAA_TRADE;
    }
};

}  // namespace sbepp

SBEPP_WARNINGS_ON();
