// SPDX-License-Identifier: MIT
// Copyright (c) 2023, Oleksandr Koval

// This file was generated by sbeppc 1.3.0
#pragma once

#include <sbepp/sbepp.hpp>

SBEPP_WARNINGS_OFF();

#include "../schema/schema.hpp"


namespace bovespa_mbo_sbe
{
namespace detail
{
namespace types
{

enum class enum_20 : ::std::uint8_t
{
    COMMODITY = 2,
    CORPORATE = 3,
    CURRENCY = 4,
    EQUITY = 5,
    GOVERNMENT = 6,
    INDEX = 7,
    ECONOMIC_INDICATOR = 15,
    MULTILEG = 16
};

template<typename Visitor>
SBEPP_CPP14_CONSTEXPR void tag_invoke(
    ::sbepp::detail::visit_tag, enum_20 e, Visitor& visitor) noexcept
{
    switch(e)
    {
    case enum_20::COMMODITY:
        visitor.on_enum_value(e, ::bovespa_mbo_sbe::schema::types::Product::COMMODITY{});
        break;
    case enum_20::CORPORATE:
        visitor.on_enum_value(e, ::bovespa_mbo_sbe::schema::types::Product::CORPORATE{});
        break;
    case enum_20::CURRENCY:
        visitor.on_enum_value(e, ::bovespa_mbo_sbe::schema::types::Product::CURRENCY{});
        break;
    case enum_20::EQUITY:
        visitor.on_enum_value(e, ::bovespa_mbo_sbe::schema::types::Product::EQUITY{});
        break;
    case enum_20::GOVERNMENT:
        visitor.on_enum_value(e, ::bovespa_mbo_sbe::schema::types::Product::GOVERNMENT{});
        break;
    case enum_20::INDEX:
        visitor.on_enum_value(e, ::bovespa_mbo_sbe::schema::types::Product::INDEX{});
        break;
    case enum_20::ECONOMIC_INDICATOR:
        visitor.on_enum_value(e, ::bovespa_mbo_sbe::schema::types::Product::ECONOMIC_INDICATOR{});
        break;
    case enum_20::MULTILEG:
        visitor.on_enum_value(e, ::bovespa_mbo_sbe::schema::types::Product::MULTILEG{});
        break;
    default:
        visitor.on_enum_value(e, ::sbepp::unknown_enum_value_tag{});
    }
}


} // namespace types
} // namespace detail

namespace types
{
using Product = ::bovespa_mbo_sbe::detail::types::enum_20;
} // namespace types
} // namespace bovespa_mbo_sbe

namespace sbepp
{

template<>
class enum_traits<::bovespa_mbo_sbe::schema::types::Product>
{
public:
    static constexpr const char* name() noexcept
    {
        return "Product";
    }

    static constexpr const char* description() noexcept
    {
        return "Indicates the type of product the security is associated with.";
    }

    using encoding_type = ::std::uint8_t;
    
    
    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    
    using value_type = ::bovespa_mbo_sbe::types::Product;
};

template<>
struct traits_tag<::bovespa_mbo_sbe::types::Product>
{
    using type = ::bovespa_mbo_sbe::schema::types::Product;
};


template<>
class enum_value_traits<::bovespa_mbo_sbe::schema::types::Product::COMMODITY>
{
public:
    static constexpr const char* name() noexcept
    {
        return "COMMODITY";
    }

    static constexpr const char* description() noexcept
    {
        return "Commodity.";
    }
    
    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    

    static constexpr ::bovespa_mbo_sbe::types::Product value() noexcept
    {
        return ::bovespa_mbo_sbe::types::Product::COMMODITY;
    }
};

template<>
class enum_value_traits<::bovespa_mbo_sbe::schema::types::Product::CORPORATE>
{
public:
    static constexpr const char* name() noexcept
    {
        return "CORPORATE";
    }

    static constexpr const char* description() noexcept
    {
        return "Corporate Fixed Income.";
    }
    
    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    

    static constexpr ::bovespa_mbo_sbe::types::Product value() noexcept
    {
        return ::bovespa_mbo_sbe::types::Product::CORPORATE;
    }
};

template<>
class enum_value_traits<::bovespa_mbo_sbe::schema::types::Product::CURRENCY>
{
public:
    static constexpr const char* name() noexcept
    {
        return "CURRENCY";
    }

    static constexpr const char* description() noexcept
    {
        return "Currency.";
    }
    
    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    

    static constexpr ::bovespa_mbo_sbe::types::Product value() noexcept
    {
        return ::bovespa_mbo_sbe::types::Product::CURRENCY;
    }
};

template<>
class enum_value_traits<::bovespa_mbo_sbe::schema::types::Product::EQUITY>
{
public:
    static constexpr const char* name() noexcept
    {
        return "EQUITY";
    }

    static constexpr const char* description() noexcept
    {
        return "Equity.";
    }
    
    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    

    static constexpr ::bovespa_mbo_sbe::types::Product value() noexcept
    {
        return ::bovespa_mbo_sbe::types::Product::EQUITY;
    }
};

template<>
class enum_value_traits<::bovespa_mbo_sbe::schema::types::Product::GOVERNMENT>
{
public:
    static constexpr const char* name() noexcept
    {
        return "GOVERNMENT";
    }

    static constexpr const char* description() noexcept
    {
        return "Public debt.";
    }
    
    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    

    static constexpr ::bovespa_mbo_sbe::types::Product value() noexcept
    {
        return ::bovespa_mbo_sbe::types::Product::GOVERNMENT;
    }
};

template<>
class enum_value_traits<::bovespa_mbo_sbe::schema::types::Product::INDEX>
{
public:
    static constexpr const char* name() noexcept
    {
        return "INDEX";
    }

    static constexpr const char* description() noexcept
    {
        return "Index.";
    }
    
    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    

    static constexpr ::bovespa_mbo_sbe::types::Product value() noexcept
    {
        return ::bovespa_mbo_sbe::types::Product::INDEX;
    }
};

template<>
class enum_value_traits<::bovespa_mbo_sbe::schema::types::Product::ECONOMIC_INDICATOR>
{
public:
    static constexpr const char* name() noexcept
    {
        return "ECONOMIC_INDICATOR";
    }

    static constexpr const char* description() noexcept
    {
        return "Economic indicator.";
    }
    
    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    

    static constexpr ::bovespa_mbo_sbe::types::Product value() noexcept
    {
        return ::bovespa_mbo_sbe::types::Product::ECONOMIC_INDICATOR;
    }
};

template<>
class enum_value_traits<::bovespa_mbo_sbe::schema::types::Product::MULTILEG>
{
public:
    static constexpr const char* name() noexcept
    {
        return "MULTILEG";
    }

    static constexpr const char* description() noexcept
    {
        return "Multileg.";
    }
    
    static constexpr version_t since_version() noexcept
    {
        return 0;
    }

    

    static constexpr ::bovespa_mbo_sbe::types::Product value() noexcept
    {
        return ::bovespa_mbo_sbe::types::Product::MULTILEG;
    }
};

}  // namespace sbepp

SBEPP_WARNINGS_ON();
